<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>本地 https 环境解决方案</title>
    <link href="/z/posts/d845bf65/"/>
    <url>/z/posts/d845bf65/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><blockquote><p>本文记录如何使用 mkcert 与 nginx 快速搭建本地 https 环境，并且没有浏览器警告</p></blockquote><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以前本地开发搭建 https 环境时，使用的是自签证书，由于浏览器不信任自签证书，经常需要在警告页面点击继续访问，有些麻烦：</p><p><img src="https://upload-bbs.mihoyo.com/upload/2022/09/24/260511332/ebfd14c62279607cb9ebc1141f6a0826_2814762419453775092.png" alt="图 1"></p><p>有时甚至没有继续访问的按钮，就需要到 <code>chrome://net-internals/#hsts</code> 里删除相关域名，更麻烦了，而且过段时间后还需要重复操作：</p><p><img src="https://upload-bbs.mihoyo.com/upload/2022/09/24/260511332/364475124c4888811626d048e87ba2cd_3644725119622854697.png" alt="图 2"></p><p>为了不这么麻烦，需要我们将自签证书使用的根证书添加到系统的可信 CA 证书中，这样就不会出现警告了。当然了达到这个效果需要执行一堆 <code>openssl</code> 命令，确实繁琐，好在已经有了封装了这些的小工具 —— <a href="https://github.com/FiloSottile/mkcert">mkcert</a> 。</p><h2 id="mkcert-介绍"><a href="#mkcert-介绍" class="headerlink" title="mkcert 介绍"></a>mkcert 介绍</h2><blockquote><p><a href="https://github.com/FiloSottile/mkcert">mkcert</a> 是一个使用 go 语言编写的生成本地自签证书的小程序，具有跨平台、使用简单、支持多域名、自动信任 CA 等一系列方便的特性可供本地开发时快速创建 https 环境使用。</p></blockquote><p><img src="https://upload-bbs.mihoyo.com/upload/2022/09/24/260511332/b70a9ba56304e657d9e1d30f3e8032c5_2994465346230218279.png" alt="图 3"></p><h2 id="mkcert-安装"><a href="#mkcert-安装" class="headerlink" title="mkcert 安装"></a>mkcert 安装</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ul><li><p>使用 <a href="https://chocolatey.org/">Chocolatey</a> 或 <a href="https://github.com/ScoopInstaller/scoop">Scoop</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">choco install mkcert<br><span class="hljs-comment"># 或者</span><br>scoop bucket add extras<br>scoop install mkcert<br></code></pre></td></tr></table></figure></li><li><p>或者直接下载编译好的文件</p><p>访问 <a href="https://github.com/FiloSottile/mkcert/releases">GitHub Releases</a> 下载（<a href="https://download.fastgit.org/FiloSottile/mkcert/releases/download/v1.4.4/mkcert-v1.4.4-windows-amd64.exe">备用链接</a>）</p><p>然后可以重命名文件为 <code>mkcert.exe</code> ，所在路径放到环境变量 Path 里，方便直接以 <code>mkcert</code> 命令运行</p><p>如果运行时有问题的话，切换为以管理员运行</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/acf80e912da3366b41ebf37d0d02befb5924.png" alt="image-20220923104612775"></p></li></ul><h3 id="macOS-x2F-Linux"><a href="#macOS-x2F-Linux" class="headerlink" title="macOS &#x2F; Linux"></a>macOS &#x2F; Linux</h3><p>使用 <a href="https://brew.sh/">Homebrew</a> &#x2F; <a href="https://docs.brew.sh/Homebrew-on-Linux">Homebrew on Linux</a></p>   <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>mkcert<br><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>nss <span class="hljs-comment"># 如果使用 Firefox</span><br></code></pre></td></tr></table></figure><h2 id="信任-CA-证书"><a href="#信任-CA-证书" class="headerlink" title="信任 CA 证书"></a>信任 CA 证书</h2><div class="warning"><blockquote><p>⚠ Warning</p><p>mkcert 自动生成的 <code>rootCA-key.pem</code> 文件提供了拦截来自本机安全请求的完整能力。不要分享这个文件。</p></blockquote></div><p>将 mkcert 使用的根证书加入本地可信 CA 中，以后由该 CA 签发的证书在<strong>本地</strong>都是可信的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mkcert -install<br></code></pre></td></tr></table></figure><img src="https://upload-bbs.mihoyo.com/upload/2022/10/16/260511332/f2b0f191e6cfcec5a3f65557900d5498_8039913934619601376.png" alt="Screenshot_2022-09-23_09-25-20"><p>可能不支持火狐浏览器</p><img src="https://upload-bbs.mihoyo.com/upload/2022/09/24/260511332/f8b0365166f9ba08b5257e8f8c232956_6431625309180978405.png" alt="Screenshot_2022-09-23_09-26-21"><p>然后可以在 Windows 的可信 CA 列表找到该证书：</p><img src="https://pic.rmb.bdstatic.com/bjh/events/61d4365a7898b0ed4b445e8249d597d39598.png" alt="Screenshot_2022-09-23_09-31-26"><h2 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h2><p>去官网 <a href="http://nginx.org/en/download.html">下载 nginx</a> 或使用包管理器安装，具体步骤不再赘述</p><h2 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">mkcert localhost 127.0.0.1<br><span class="hljs-comment"># 或者使用域名配合 hosts</span><br>mkcert *.example.com<br></code></pre></td></tr></table></figure><img src="https://upload-bbs.mihoyo.com/upload/2022/09/24/260511332/3f1bd55b5bb32729bd9172a9d5092bac_4626938331097778786.png" alt="image-20220923112751149"><p>会在当前目录生成证书文件和私钥文件，然后就可以用在 nginx 上了</p><h2 id="使用证书"><a href="#使用证书" class="headerlink" title="使用证书"></a>使用证书</h2><p>修改 nginx 配置如下</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;<br>    <span class="hljs-comment"># 修改为所需域名或者 localhost</span><br>    <span class="hljs-attribute">server_name</span> <span class="hljs-regexp">*.example.com</span>;<br>    <span class="hljs-attribute">index</span> index.html index.htm index.php default.html default.htm default.php;<br>    <span class="hljs-attribute">root</span> html;<br><br>    <span class="hljs-comment"># 修改为生成文件目录</span><br>    <span class="hljs-attribute">ssl_certificate</span> <span class="hljs-string">&quot;cert/_wildcard.example.com.pem&quot;</span>;<br>    <span class="hljs-comment"># 修改为生成文件目录</span><br>    <span class="hljs-attribute">ssl_certificate_key</span> <span class="hljs-string">&quot;cert/_wildcard.example.com-key.pem&quot;</span>;<br>    <span class="hljs-attribute">ssl_session_cache</span> shared:SSL:<span class="hljs-number">1m</span>; <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">5m</span>;<br>    <span class="hljs-attribute">ssl_ciphers</span> HIGH:!aNULL:!MD5; <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-comment"># 此处为个人需求，代理请求到 80 端口</span><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1;<br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$proxy_host</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> Via <span class="hljs-string">&quot;nginx&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="检查是否生效"><a href="#检查是否生效" class="headerlink" title="检查是否生效"></a>检查是否生效</h2><p>运行 nginx 后访问，没有警告页面</p><p><img src="https://upload-bbs.mihoyo.com/upload/2022/09/25/260511332/aa62a8b8c8c2f8016116e624574b5aa3_7510037431628871874.png" alt="图 7"></p><p><img src="https://upload-bbs.mihoyo.com/upload/2022/09/25/260511332/edf0d9805fcaeae09992cade6f504c79_2133465381961921180.png" alt="图 6"></p><p>之后如果证书过期的话再重新执行一遍命令即可</p><h2 id="mkcert-其他选项"><a href="#mkcert-其他选项" class="headerlink" title="mkcert 其他选项"></a>mkcert 其他选项</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cmake">-cert-<span class="hljs-keyword">file</span> <span class="hljs-keyword">FILE</span>, -key-<span class="hljs-keyword">file</span> <span class="hljs-keyword">FILE</span>, -p12-<span class="hljs-keyword">file</span> <span class="hljs-keyword">FILE</span><br>  自定义输出路径/文件名。<br><br>-client<br>  生成用于客户端身份验证的证书。<br><br>-ecdsa<br>  使用 ECDSA 密钥生成证书。<br><br>-pkcs12<br>  生成 PKCS12 格式的证书。Java 程序通常不支持 PEM 格式的证书，但是支持 PKCS12 格式的证书。<br><br>-csr CSR<br>  根据提供的 CSR 生成证书。与除 -<span class="hljs-keyword">install</span> 和 -cert-<span class="hljs-keyword">file</span> 之外的所有其他选项冲突。<br></code></pre></td></tr></table></figure><p>注意：需要将这些选项放在域名之前</p><p>例子：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mkcert -key-file key.pem -cert-file cert.pem example.com *.example.com<br></code></pre></td></tr></table></figure><h2 id="局域网内使用"><a href="#局域网内使用" class="headerlink" title="局域网内使用"></a>局域网内使用</h2><p>参照 <a href="https://blog.dteam.top/posts/2019-04/%E6%9C%AC%E5%9C%B0https%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88mkcert.html#%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E4%BD%BF%E7%94%A8">https://blog.dteam.top/posts/2019-04/%E6%9C%AC%E5%9C%B0https%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88mkcert.html#%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E4%BD%BF%E7%94%A8</a> ：</p><blockquote><p>有时候我们需要在局域网内测试 https 应用，这种环境可能不对外，因此也无法使用像 <code>Let&#39;s encrypt</code> 这种免费证书的方案给局域网签发一个可信的证书，而且 <code>Let&#39;s encrypt</code> 本身也不支持认证 ip。</p><p>先来回忆一下证书可信的三个要素：</p><ul><li>由可信的 CA 机构签发</li><li>访问的地址跟证书认证地址相符</li><li>证书在有效期内</li></ul><p>如果期望我们自签证书在局域网内使用，以上三个条件都需要满足。很明显自签证书一定可以满足证书在有效期内，那么需要保证后两条。我们签发的证书必须匹配浏览器的地址栏，比如局域网的 ip 或者域名，此外还需要信任 CA。</p><p>我们先重新签发一下证书，加上本机的局域网 ip 认证：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\Users\abcfy&gt; mkcert localhost <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> ::<span class="hljs-number">1</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">31.170</span><br><span class="hljs-keyword">Using</span> the local CA at <span class="hljs-string">&quot;C:\Users\abcfy\AppData\Local\mkcert&quot;</span> ✨<br><br>Created a new certificate valid <span class="hljs-keyword">for</span> the following names 📜<br> - <span class="hljs-string">&quot;localhost&quot;</span><br> - <span class="hljs-string">&quot;127.0.0.1&quot;</span><br> - <span class="hljs-string">&quot;::1&quot;</span><br> - <span class="hljs-string">&quot;192.168.31.170&quot;</span><br><br>The certificate is at <span class="hljs-string">&quot;./localhost+3.pem&quot;</span> and the key at <span class="hljs-string">&quot;./localhost+3-key.pem&quot;</span> ✅<br></code></pre></td></tr></table></figure><p>再次验证发现使用 <code>https://192.168.31.170</code> 本机访问也是可信的。然后我们需要将 CA 证书发放给局域网内其他的用户。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\Users\abcfy&gt; mkcert <span class="hljs-literal">-CAROOT</span><br>C:\Users\abcfy\AppData\Local\mkcert<br></code></pre></td></tr></table></figure><p>使用 <code>mkcert -CAROOT</code> 命令可以列出 CA 证书的存放路径</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\Users\abcfy&gt; <span class="hljs-built_in">ls</span> <span class="hljs-variable">$</span>(mkcert <span class="hljs-literal">-CAROOT</span>)<br><br>    目录：C:\Users\abcfy\AppData\Local\mkcert<br><br>Mode                LastWriteTime         Length Name<br><span class="hljs-literal">----</span>                <span class="hljs-literal">-------------</span>         <span class="hljs-literal">------</span> <span class="hljs-literal">----</span><br><span class="hljs-literal">-a----</span>  <span class="hljs-number">2019</span><span class="hljs-literal">-04-09-</span>星期二  上午 <span class="hljs-number">1</span>           <span class="hljs-number">2484</span> rootCA<span class="hljs-literal">-key</span>.pem<br>                             <span class="hljs-number">2</span>:<span class="hljs-number">16</span><br><span class="hljs-literal">-a----</span>  <span class="hljs-number">2019</span><span class="hljs-literal">-04-09-</span>星期二  上午 <span class="hljs-number">1</span>           <span class="hljs-number">1651</span> rootCA.pem<br>                             <span class="hljs-number">2</span>:<span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><p>可以看到 CA 路径下有两个文件 <code>rootCA-key.pem</code> 和 <code>rootCA.pem</code> 两个文件，用户需要信任 <code>rootCA.pem</code> 这个文件。将 <code>rootCA.pem</code> 拷贝一个副本，并命名为 <code>rootCA.crt</code>（因为 windows 并不识别 <code>pem</code> 扩展名，并且 Ubuntu 也不会将 <code>pem</code> 扩展名作为 CA 证书文件对待），将 <code>rootCA.crt</code> 文件分发给其他用户，手工导入。</p><p>windows 导入证书的方法是双击这个文件，在证书导入向导中将证书导入 <code>受信任的根证书颁发机构</code> :</p><p><img src="https://upload-bbs.mihoyo.com/upload/2022/09/25/260511332/5656eac6b3d34035834f4f8a18392181_3504489147586877598.png" alt="image.png"></p><p>MacOS 的做法也一样，同样选择将 CA 证书导入到受信任的根证书颁发机构。</p><p>Ubuntu 的做法可以将证书文件（必须是<code>crt</code>后缀）放入 <code>/usr/local/share/ca-certificates/</code> ，然后执行 <code>sudo update-ca-certificates</code></p><p>Android 和 iOS 信任 CA 证书的做法参考 <a href="https://github.com/FiloSottile/mkcert#mobile-devices">官方文档</a>。</p><p>在局域网其他计算机就可以访问 https 而不报警了。我在另一台虚拟机 Ubuntu 上使用 curl 测试结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ curl -I https://192.168.31.170<br>HTTP/1.0 200 OK<br>Server: SimpleHTTP/0.6 Python/3.6.8<br>Date: Tue, 09 Apr 2019 05:22:12 GMT<br>Content-<span class="hljs-built_in">type</span>: text/html; charset=utf-8<br>Content-Length: 1794<br></code></pre></td></tr></table></figure><p>无警告，加上 <code>-v</code> 参数输出还会告诉证书是可信的。</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/FiloSottile/mkcert">https://github.com/FiloSottile/mkcert</a></p><p><a href="https://www.jianshu.com/p/7cb5c2cffaaa">https://www.jianshu.com/p/7cb5c2cffaaa</a></p><hr><p><em>fin.</em></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mkcert</tag>
      
      <tag>https</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Umami 统计个人网站访问数据</title>
    <link href="/z/posts/9393cc03/"/>
    <url>/z/posts/9393cc03/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><blockquote><p>没有人喜欢自己的隐私数据被收集、被利用，也没有人喜欢自己被跨网站、跨设备的跟踪浏览行为、制作用户画像、精准投递广告。作为一个非商用的小站，是时候向诸如谷歌统计、百度统计、51La 等说再见了，只关注关键的几个数据，全程匿名化处理，隐私至上。</p></blockquote><span id="more"></span><h2 id="关于-Umami"><a href="#关于-Umami" class="headerlink" title="关于 Umami"></a>关于 Umami</h2><p>Umami 是一个开源的、以隐私为中心的 Google Analytics 替代方案。Umami 提供强大的网络分析解决方案，不会侵犯用户隐私。此外，当自行托管 Umami 时，可以完全控制自己的数据。</p><blockquote><p>Umami 基于 Node.js 开发，支持 Mysql 和 Postgresql 数据库，除服务器外，它甚至可以部署在 Serverless 中。自部署的好处在于某些商业服务滥用用户数据，当数据保存在自己手中时可以确保不会分享给第三方（如果你查阅 Umami 的数据库，你甚至可以发现它连用户 IP 都没有收集）。</p></blockquote><blockquote><p>此外由于现有的商用统计分析系统过于臭名昭著，绝大部分隐私拦截插件（如隐私獾）都对其脚本进行了过滤，在保护了访客隐私的同时却导致了统计数据不精准，而 Umami 可以重写脚本名称及绑定用户自己的域名，最大程度上避免被误拦截（因为本身不收集隐私、理直气壮）。</p></blockquote><p>查看 Umami 功能示例：🔗<a href="https://app.umami.is/share/8rmHaheU/umami.is">Live Demo</a> 。</p><h2 id="如何搭建"><a href="#如何搭建" class="headerlink" title="如何搭建"></a>如何搭建</h2><p>本文使用 Serverless 平台来搭建 Umami，应用部署在 <a href="https://vercel.com/">Vercel</a>，数据库使用 <a href="https://planetscale.com/">PlanetScale</a>，其他平台参见 <a href="https://umami.is/docs">官网文档</a></p><h3 id="数据库部分"><a href="#数据库部分" class="headerlink" title="数据库部分"></a>数据库部分</h3><p><a href="https://planetscale.com/">PlanetScale</a> 是一个兼容 MySQL 的无服务器数据库平台。 PlanetScale 平台不支持外键，因此需要修改 <code>schema.mysql.sql</code> 。</p><p>其他数据库参见官网文档  <a href="https://umami.is/docs/hosting">Hosting</a> <code>Managed databases</code> 部分。</p><ol><li>使用魔法登录 PlanetScale 并创建一个数据库，名字假如为 umami-db ，获取连接字符串，<code>连接方式</code> 要选择 <code>Prisma</code>，字符串形如：<code>mysql://username:password@host/umami-db?sslaccept=strict</code> ，然后初始密码看不到，要自己新建一个数据库密码</li></ol><p>  <img src="https://upload-bbs.mihoyo.com/upload/2022/08/21/260511332/00b728940b873dc3d3e940fc268dd2e5_2276870465142348577.png" alt="图 1"></p><ol start="2"><li>打开 <a href="https://github.com/umami-software/umami/blob/master/sql/schema.mysql.sql">schema.mysql.sql</a> ，删除所有以外键 (<code>-- AddForeignKey</code>) 开头的行，并确保逗号准确。</li><li>初始化数据库</li></ol><ul><li><p>打开 PlanetScale Web 控制台，从 <code>Branches</code> &gt; <code>main</code> &gt; <code>Console</code> 进入，复制 <code>schema.mysql.sql</code> 中语句，每次运行一条语句</p><p><img src="https://upload-bbs.mihoyo.com/upload/2022/08/21/260511332/b102b6200c907411994c8b9bec6e3bb4_2303785330596306678.png" alt="图 2"></p></li><li><p>另外也可以使用 <a href="https://github.com/planetscale/cli/releases">PlanetScale CLI</a> 来初始化</p><ol><li>使用 <code>pscale auth login</code> 登录</li><li>在项目根目录运行 <code>pscale shell umami-db main &lt; sql/schema.mysql.sql</code></li></ol></li></ul><ol start="4"><li>查看表是否已经建好，或者去 <code>Schema</code> 页面查看</li></ol><p>  <img src="https://upload-bbs.mihoyo.com/upload/2022/08/21/260511332/f151de781d0cf1d13f359e841f0117e3_1731019309529313289.png" alt="图 3"></p><h3 id="Vercel-部分"><a href="#Vercel-部分" class="headerlink" title="Vercel 部分"></a>Vercel 部分</h3><p>此时数据库已经初始化完毕，接下来将应用部署在 Vercel 上。</p><ol><li><p><a href="https://vercel.com/new/git/external?repository-url=https%3A%2F%2Fgithub.com%2Fmikecao%2Fumami&amp;env=DATABASE_URL,HASH_SALT&amp;envDescription=These%20values%20are%20defined%20in%20the%20configure%20Umami%20step%20from%20Install&amp;envLink=https%3A%2F%2Fumami.is%2Fdocs%2Finstall&amp;project-name=umami&amp;repo-name=umami">点击一键部署</a></p></li><li><p>手动部署</p></li></ol><ul><li><p>Fork Umami 的仓库: <a href="https://github.com/umami-software/umami">https://github.com/umami-software/umami</a> 到自己的 GitHub</p></li><li><p>注册一个 Vercel 帐户并登录（已有跳过）。</p></li><li><p>访问 <a href="https://vercel.com/new">https://vercel.com/new</a> 页面，从 GitHub 上导入项目。</p></li><li><p>添加所需的环境变量 DATABASE_URL 和 HASH_SALT（随机字符串）。</p><p><img src="https://upload-bbs.mihoyo.com/upload/2022/08/21/260511332/36850ff2abe78ddf57596b20c524bc61_8099389476793374314.png" alt="图 4"></p></li><li><p>点击部署按钮，然后可以访问 <code>&lt;deploy-id&gt;.vercel.app</code> 查看效果。</p></li><li><p>后续可以在 <code>Settings</code> &gt; <code>Environment Variables</code> 编辑环境变量，需要重新部署服务生效</p></li></ul><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="接入网站"><a href="#接入网站" class="headerlink" title="接入网站"></a>接入网站</h3><blockquote><p>配置完成网站后打开，使用初始用户名密码登录 admin:umami。登录完成后可在右上角个人资料，更新密码处修改默认信息。接着个人资料，网站，添加网址处接入待统计的网站，如果勾选了启用共享链接，代表可以将该网站的统计数据分享给他人查看。</p></blockquote><blockquote><p>添加网站后，在网站列表的获取跟踪代码按钮处点击，复制具体内容到标签中，注：如果开启了自定义脚本名称，此处的链接文件需要手动替换。</p></blockquote><h3 id="跟踪事件"><a href="#跟踪事件" class="headerlink" title="跟踪事件"></a>跟踪事件</h3><blockquote><p>Umami 的自定义跟踪事件有些鸡肋，只能做到统计数量。支持两类：一是 CSS 类，也就是 <code>umami--&lt;event&gt;--&lt;event-name&gt;</code> 打标方式；另一种是在加载完成 Umami 文件后，提供了 umami 对象，可以调用一些方法，两种方式其实都挺勉强。</p></blockquote><h4 id="使用-CSS-类名"><a href="#使用-CSS-类名" class="headerlink" title="使用 CSS 类名"></a>使用 CSS 类名</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;signup-button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button umami--click--signup-button&quot;</span>&gt;</span>Sign up<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>格式：<code>umami--&lt;event&gt;--&lt;event-name&gt;</code>，<code>&lt;event&gt;</code> 取值见 <a href="https://developer.mozilla.org/en-US/docs/Web/Events">https://developer.mozilla.org/en-US/docs/Web/Events</a></p><p>注意不要使用一些频繁触发的事件，如 <code>scroll</code> 或 <code>drag</code></p><h4 id="使用-JavaScript"><a href="#使用-JavaScript" class="headerlink" title="使用 JavaScript"></a>使用 JavaScript</h4><p>在 umami 加载完成后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;signup-button&#x27;</span>);<br><br>button.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">umami</span>(<span class="hljs-string">&#x27;Signup button click&#x27;</span>);<br></code></pre></td></tr></table></figure><p>详情见官网文档：<a href="https://umami.is/docs/track-events">https://umami.is/docs/track-events</a></p><h3 id="在-hexo-中使用"><a href="#在-hexo-中使用" class="headerlink" title="在 hexo 中使用"></a>在 hexo 中使用</h3><p>如果主题没有适配 umami 的话，可以使用 <a href="https://hexo.io/zh-cn/api/injector">hexo injector</a> 直接注入，hexo 版本需要大于 5</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// &lt;博客项目根目录&gt;/scripts/injector.js</span><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;head_end&#x27;</span>, <span class="hljs-string">&#x27;&lt;script async defer data-website-id=&quot;&lt;your-website-id&gt;&quot; src=&quot;&lt;your-umami-url&gt;&quot;&gt;&lt;/script&gt;&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://umami.is/docs/getting-started">Umami Documentation</a></p><p><a href="https://inkss.cn/blog/f7886cf2">枋柚梓 - 自建个人网站数据统计分析系统</a></p><hr><p><em>fin.</em></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Umami</tag>
      
      <tag>Analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用用户脚本优化 Yandere/Konachan 站点浏览体验</title>
    <link href="/z/posts/854aec20/"/>
    <url>/z/posts/854aec20/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><blockquote><p>中文标签、缩略图放大、双击翻页与瀑布流浏览模式，更舒服的 Booru 站点浏览体验</p></blockquote><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://yande.re/post">Y 站</a> 与 <a href="https://konachan.com/post">K 站</a> 都是寻找壁纸的好网站，日常必备，只可惜浏览体验不是很好，网站界面与标签都是英文，图片列表页面缩略图也比较小。这个时候自然要无敌的油猴脚本出马了，我便立马打开了 <a href="https://greasyfork.org/">Greasy Fork</a> 进行搜索。排除掉一些比较久远并且失效的脚本，我发现了 yande-re-chinese-patch，说实话这个脚本对页面的一些修改比如 sidebar 显隐、键盘翻页啥的我不是很感冒，但是这个流体布局浏览模式让我眼前一亮，用起来不错，而且翻译了一些常用的标签，终于不用整天划词了 w。于是便在这个脚本基础上进行了修改并对代码进行了重构，使用 <a href="http://vitejs.dev/">vite</a> 与 <a href="https://github.com/asadahimeka/vite-plugin-tm-userscript">vite-plugin-tm-userscript</a> 进行构建，然后支持了一些其他图站，利用 <a href="https://www.npmjs.com/package/@himeka/booru">@himeka&#x2F;booru</a> 库来获取各 booru 站点数据。访问 <a href="https://github.com/asadahimeka/yandere-masonry">GitHub</a> 查看源码。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="PC-端"><a href="#PC-端" class="headerlink" title="PC 端"></a>PC 端</h3><ul><li>如何安装用户脚本管理器插件不再赘述，可以参照 <a href="https://greasyfork.org/">Greasy Fork</a> 首页提示安装浏览器插件。</li><li>脚本已发布在 <a href="https://greasyfork.org/zh-CN/scripts/444885">Greasy Fork</a> 上，可以点进页面直接安装。</li><li>如果没登 Greasy Fork 账号的话，可以访问 <a href="https://sleazyfork.org/scripts/444885">Sleazy Fork</a> 进行安装。</li><li>建议安装 <a href="https://greasyfork.org/zh-CN/scripts/23840">大人的 Greasyfork</a> 脚本在访问匿名不可用脚本时跳转至 Sleazyfork。</li><li>也可以直接从 <a href="https://github.com/asadahimeka/yandere-masonry/raw/main/dist/yandere-masonry.user.js">GitHub 仓库文件</a> 安装。</li></ul><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><ul><li>使用 Yandex、Kiwi 或 Firefox 等浏览器安装 Tampermonkey 插件，然后再安装本脚本。</li><li>或者直接使用第三方原生应用 <a href="https://github.com/flexbooru/flexbooru">Flexbooru</a> &#x2F; <a href="https://github.com/sin3hz/Mbooru/releases">Mbooru</a>。</li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="缩略图放大"><a href="#缩略图放大" class="headerlink" title="缩略图放大"></a>缩略图放大</h3><p>对列表页的缩略图进行放大 [Y 站 &#x2F; K 站]</p><p><img src="https://img2022.cnblogs.com/blog/1091021/202207/1091021-20220725230919755-1736331692.png" alt="图 3"></p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/623ccf465ad72b55bf1258e52da78a85538.png" alt="图 4"></p><h3 id="双击翻页"><a href="#双击翻页" class="headerlink" title="双击翻页"></a>双击翻页</h3><p>双击页面左侧任意区域进入上一页，双击页面右侧任意区域进入下一页 [Y 站 &#x2F; K 站]</p><h3 id="访问标记"><a href="#访问标记" class="headerlink" title="访问标记"></a>访问标记</h3><p>会在点击过详情页面的图片下方标注一条横线，利用的是 a 标签 :visited 特性，清除缓存后失效 [Y 站 &#x2F; K 站]</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/a5c5df323ed6a9f9f4a8975aa178f09e.png" alt="图 2"></p><h3 id="标签中文翻译"><a href="#标签中文翻译" class="headerlink" title="标签中文翻译"></a>标签中文翻译</h3><p>添加 Y 站 与 K 站 标签的中文翻译，翻译文件来自 yande-re-chinese-patch ，翻译了出现频率较高的 100 多个标签。</p><p>欢迎 <a href="https://github.com/asadahimeka/yandere-masonry/edit/main/src/data/tags_cn.json">PR</a> 补充或校正翻译。</p><p><img src="https://upload-bbs.mihoyo.com/upload/2022/07/25/260511332/618d4ddd3684de719729f9a1f4d7ee73_8311796271489441122.png" alt="图 1"></p><h3 id="瀑布流模式"><a href="#瀑布流模式" class="headerlink" title="瀑布流模式"></a>瀑布流模式</h3><p>点击右上角按钮进入瀑布流模式</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/e5bf86ebbc68be5748b697197db1de93.png" alt="图 5"></p><h4 id="输出下载地址"><a href="#输出下载地址" class="headerlink" title="输出下载地址"></a>输出下载地址</h4><p>瀑布流模式下可使用 <code>输出下载地址</code> 功能保存图片地址 TXT 后使用迅雷、IDM、wget 等批量下载，见 <a href="https://github.com/FoXZilla/Pxer/issues/8">FoXZilla&#x2F;Pxer#8</a></p><p><img src="https://upload-bbs.mihoyo.com/upload/2022/07/25/260511332/aa8aa8eb0105b7022d56ec0c7698301d_4922268873480853883.png" alt="图 6"></p><h4 id="顶部操作"><a href="#顶部操作" class="headerlink" title="顶部操作"></a>顶部操作</h4><ul><li>站点切换，打开侧栏操作，支持站点见下方所述</li><li>打开个人页面或收藏夹（Y 站&#x2F;K 站），侧栏里操作</li><li>瀑布流显示列数切换，列数选择非自动且列数小于 6 时图片会以 sample_url （即点击详情的大小） 展示。</li><li>批量选择</li><li>查看下载列表</li><li>深色模式切换</li></ul><h4 id="详情查看"><a href="#详情查看" class="headerlink" title="详情查看"></a>详情查看</h4><p>点击缩略图可查看详情，可进行以下操作</p><ul><li>收藏（Y 站&#x2F;K 站）</li><li>打开源站详情页面</li><li>打开来源地址</li><li>查看原图</li><li>下载&#x2F;加入下载列表</li><li>打开源站标签页面</li><li>点击图片控制按钮与标签显示</li></ul><p><img src="https://pic.rmb.bdstatic.com/bjh/events/b4e794b26a64e0d89080627268fe7076.png" alt="图 8"></p><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>Moebooru 站点（Y 站、K 站）可通过设置查询参数 <code>locale</code> 或者设置 cookie 里的 <code>locale</code> 项来指定界面语言</p><p>如： <a href="https://konachan.net/post?locale=zh_CN">https://konachan.net/post?locale=zh_CN</a></p><p>本脚本在访问 Y 站或 K 站时已默认指定语言为 <code>zh_CN</code></p><h2 id="站点支持"><a href="#站点支持" class="headerlink" title="站点支持"></a>站点支持</h2><p>主要支持站点为 Y 站 和 K 站，其他站点为基本支持。</p><p>本脚本主要是为了方便图片浏览，其他功能如下载为简单支持，不保证完全可用。</p><p>另，存在源站页面图片列表与 API 返回列表不一致的情况，请悉知。</p><p>缩略图放大与双击翻页支持的站点为 Y 站 和 K 站，瀑布流模式支持的 Booru 站点见 <a href="https://github.com/asadahimeka/booru/blob/master/src/sites.json">sites.json</a> （其中有 CSP 限制的站点暂未支持）。</p><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>瀑布流模式的简单预览效果可以前往 <a href="https://www.nanoka.top/illust/konachan.html">https://www.nanoka.top/illust/konachan.html</a> 查看</p><h2 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h2><ol><li><code>git clone https://github.com/asadahimeka/yandere-masonry.git</code></li><li><code>cd yandere-masonry</code></li><li><code>yarn install</code></li><li><code>yarn dev</code></li></ol><h3 id="Vue-3-TypeScript-Vite"><a href="#Vue-3-TypeScript-Vite" class="headerlink" title="Vue 3 + TypeScript + Vite"></a>Vue 3 + TypeScript + Vite</h3><p>本项目使用 TypeScript + Vue 3 <code>&lt;script setup&gt;</code> 语法编写，并使用 Vite 构建，具体查阅文档：<a href="https://v3.vuejs.org/api/sfc-script-setup.html#sfc-script-setup">script setup docs</a>。</p><p>P.S. Vue 2.7 以上版本已支持<code>&lt;script setup&gt;</code> 与 Composition-api，本项目使用的 Vue 版本为 2.6.14，如何在 2.7 以下版本使用<code>&lt;script setup&gt;</code>语法 与 Composition-api 可参照 <a href="https://www.nanoka.top/posts/fb7525a/">Vite + Vue2 + Vuetify2 + script setup + TypeScript 搭配开发项目</a>。</p><h3 id="推荐-IDE-与插件"><a href="#推荐-IDE-与插件" class="headerlink" title="推荐 IDE 与插件"></a>推荐 IDE 与插件</h3><ul><li><a href="https://code.visualstudio.com/">VS Code</a> + <a href="https://marketplace.visualstudio.com/items?itemName=johnsoncodehk.volar">Volar</a></li></ul><h3 id="TypeScript-中-vue-文件的类型支持"><a href="#TypeScript-中-vue-文件的类型支持" class="headerlink" title="TypeScript 中 .vue 文件的类型支持"></a>TypeScript 中 <code>.vue</code> 文件的类型支持</h3><p>由于 TypeScript 无法处理 <code>.vue</code> 导入的类型信息，因此默认情况下被填充为通用 Vue 组件类型。如果希望在 <code>.vue</code> 导入中获取实际的参数类型（如，在使用 <code>h(...)</code> 时获取参数验证），可以按照以下步骤启用 Volar 的 Take Over 模式：</p><ol><li>从 VS Code 的命令面板运行 <code>Extensions: Show Built-in Extensions</code>，查找 <code>TypeScript and JavaScript Language Features</code>，然后右键单击并选择 <code>Disable (Workspace)</code>。 默认情况下，如果默认 TypeScript 扩展被禁用，Take Over 模式将自行启用。</li><li>通过从命令面板运行<code>Developer: Reload Window</code> 重新加载 VS Code 窗口。</li></ol><p>可以在 <a href="https://github.com/johnsoncodehk/volar/discussions/471">此处</a> 了解有关 Take Over 模式的更多信息。</p><h2 id="Related"><a href="#Related" class="headerlink" title="Related"></a>Related</h2><p>yande-re-chinese-patch</p><p><a href="https://www.npmjs.com/package/@himeka/booru">@himeka&#x2F;booru</a></p><p><a href="https://github.com/asadahimeka/vite-plugin-tm-userscript">vite-plugin-tm-userscript</a></p><p>有问题或建议请到 GitHub <a href="https://github.com/asadahimeka/yandere-masonry/issues">反馈</a></p><hr><p><em>fin.</em></p>]]></content>
    
    
    <categories>
      
      <category>Original</category>
      
    </categories>
    
    
    <tags>
      
      <tag>booru</tag>
      
      <tag>yandere</tag>
      
      <tag>konachan</tag>
      
      <tag>userscript</tag>
      
      <tag>tampermonkey</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为博客添加 Pixiv 每日排行榜小挂件</title>
    <link href="/z/posts/9253784/"/>
    <url>/z/posts/9253784/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><blockquote><p>一行代码为博客添加一个 Pixiv 每日排行榜小挂件，来自 <a href="https://github.com/mokeyjay/Pixiv-daily-ranking-widget/tree/develop">mokeyjay</a></p></blockquote><span id="more"></span><p>之前偶然发现的一款博客小挂件，可以非常方便地在博客展示 Pixiv 每日排行榜，就很爱。下面记录一下使用方法，喜欢的话可以去给作者点一个 <a href="https://github.com/mokeyjay/Pixiv-daily-ranking-widget">star</a>。</p><h2 id="挂件特色"><a href="#挂件特色" class="headerlink" title="挂件特色"></a>挂件特色</h2><blockquote><ul><li><p>一行 HTML 代码即可调用，方便快捷</p></li><li><p>自适应宽高。推荐宽度 240px、高度 380px 或以上</p></li><li><p>点击图片可跳转到对应作品详情页</p></li><li><p>每日自动更新，无需人工干预</p></li><li><p>内置多图床支持、按需加载图片，极低资源消耗</p></li><li><p>提供 API 服务，含有排行榜更新日期、缩略图 url 及详情页 url 等</p></li></ul></blockquote><h2 id="挂件使用"><a href="#挂件使用" class="headerlink" title="挂件使用"></a>挂件使用</h2><p>把下面这行代码放到网页合适位置即可，样式可自行调整，预览效果可以查看 <a href="https://www.cnblogs.com/himeka">我的博客园</a> 页面右侧</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cloud.mokeyjay.com/pixiv&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:240px; height:380px; border: 0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="在博客园中使用"><a href="#在博客园中使用" class="headerlink" title="在博客园中使用"></a>在博客园中使用</h3><p>首先开通博客园 JS 权限，然后在博客后台设置里的 <code>页脚 HTML 代码</code> 栏里添加如下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> f = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;iframe&#x27;</span>);</span><br><span class="language-javascript">      f.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;https://cloud.mokeyjay.com/pixiv/&#x27;</span>;</span><br><span class="language-javascript">      f.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;frameborder&#x27;</span>, <span class="hljs-number">0</span>);</span><br><span class="language-javascript">      f.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-string">&#x27;width:240px;height:380px;display:block;margin:0 auto;&#x27;</span>);</span><br><span class="language-javascript">      $(<span class="hljs-string">&#x27;#blog-calendar&#x27;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;&lt;h3 style=&quot;text-align: center;&quot;&gt;Pixiv 日榜 Top 50&lt;/h3&gt;&#x27;</span>).<span class="hljs-title function_">append</span>(f);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我是直接把博客日历替换成了这个小挂件，效果如下图，可自己按需更改插入的位置</p><p><img src="https://upload-bbs.mihoyo.com/upload/2022/10/16/260511332/f8388becee0ddbb0cc4c647c3f7e5543_1445980308774322412.png" alt="图 1"></p><h3 id="API-使用"><a href="#API-使用" class="headerlink" title="API 使用"></a>API 使用</h3><p>如果想自定义或者单纯调用接口，作者提供了以下 API：</p><ul><li><a href="https://cloud.mokeyjay.com/pixiv/?r=api/pixiv-json">排行榜数据（已上传至图床）</a>（推荐）</li><li><a href="https://cloud.mokeyjay.com/pixiv/?r=api/source-json">排行榜数据（pixiv url）</a></li></ul><blockquote><p>其中 <code>data</code> 为排行榜数据，<code>date</code> 为排行榜日期（可能是昨天或者前天，因为官方更新时间不一定），这两个接口都会自动根据请求头的 <code>Origin</code> 或者 <code>Referer</code> 返回对应跨域头，可供前端直接调用。</p></blockquote><p>API 返回结构</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/d0381a3c7c2610f34894f9fa1453e5d7.png" alt="图 2"></p><h2 id="替代方案"><a href="#替代方案" class="headerlink" title="替代方案"></a>替代方案</h2><p>因为 cloud.mokeyjay.com 部署在韩国，访问起来可能有点慢，有大佬自己在国内搭建了一个，对速度不满意的可以使用如下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://fun.hujingnb.com/pixiv/i?w=300&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:300px; height:400px;&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><p>另外，这个链接可以使用下面这些参数</p><p>例如：<code>https://fun.hujingnb.com/pixiv/i?w=300&amp;interval=1500&amp;bg=red&amp;limit=10&amp;rand=1</code></p><ul><li><code>interval</code>: 页面轮播时长（毫秒）. 默认 5000</li><li><code>bg</code>: 背景色，默认 <code>transparent</code><ul><li>注意，若你的色值为 <code>#000</code>, 请传递参数 <code>%23000</code>. 在 get uri 中<code>#</code>符号需要进行转义</li><li>当然，其他在 <code>HTML</code> 中用于标识颜色的都可以哦。比如 <code>black</code></li></ul></li><li><code>w</code>: 图片宽度。默认 <code>100</code><ul><li>可选值：<code>50, 100, 200, 300</code></li><li>图片压缩后，可提高访问速度</li><li>因只进行缩略图展示，故下载的图片宽度最大为 240, 未下载原图（应该也用不到吧）</li><li>请按需使用，不要超过窗口的宽度，否则徒增图片大小（也会增加流量消耗）</li></ul></li><li><code>limit</code>: 轮播的排名区间。默认 <code>1,50</code><ul><li><code>1,50</code> 为显示排名 1-50 的图片</li><li>最大排名 <code>100</code>, 暂时看 <code>100</code> 应该够用了，故只拉取了日榜的 top 100</li></ul></li><li><code>type</code>: 榜单类型，默认 <code>daily</code><ul><li>日榜 (<code>daily</code>), 月榜 (<code>monthly</code>)</li><li>周榜介于日榜和月榜之间，感觉没人用吧，就没有爬</li></ul></li><li><code>rand</code>: 是否随机起始图片，默认 <code>0</code><ul><li>若为 1, 则每次进入页面，都会随机一个起始位置</li></ul></li><li><code>c_type</code>: 图片点击行为。默认为 <code>img</code><ul><li>可能值如下：<ul><li><code>img</code>: 在新页面打开图片</li><li><code>none</code>: 点击无反应</li><li><code>p_detail</code>: 打开 pixiv 站点的图片页面</li><li><code>p_user</code>: 打开 pixiv 站点的作者页面</li></ul></li></ul></li><li>cursor: 鼠标在图片上的样式，可配合 <code>c_type</code> 使用。默认为 <code>pointer</code><ul><li>此样式请参数 css 属性 <code>cursor</code></li></ul></li></ul><h2 id="P-S"><a href="#P-S" class="headerlink" title="P.S."></a>P.S.</h2><p>如果想查看排行榜详情的话，可以前往我做的页面 <a href="https://www.nanoka.top/illust/pixiv/index.html">Pixiv Ranking</a> 😸</p><p><img src="https://upload-bbs.mihoyo.com/upload/2022/07/23/260511332/0a847e54da91da3c8a1ba2c709625192_9173308788344150353.png" alt="图 3"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/mokeyjay/Pixiv-daily-ranking-widget">Pixiv-daily-ranking-widget</a></p><p><a href="https://hujingnb.com/archives/666">pixiv 小控件</a></p><hr><p><em>fin.</em></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pixiv</tag>
      
      <tag>Widget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo + VSCode 插入 Markdown 图片解决办法</title>
    <link href="/z/posts/e5b6f57d/"/>
    <url>/z/posts/e5b6f57d/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><p>最近打开 typora 时发现弹窗强更，不让用 beta 版了</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/54cec84bc1cc95d36cf0c7bdbc94d2d1.png" alt="图 1"></p><p>想到自己并不是非常需要 WYSIWYG，而且也不是经常使用 typora，于是直接退回到 VSCode 了，而且在 VSCode 里可以直接打开终端操作，写完了推送到 GitHub 都很方便。<br>然后就是老生常谈的图片问题，之前记录过 typora 上的 <a href="https://kanata.ml/posts/12a70b22">解决办法</a> ，VSCode 上利用扩展也可以解决，下面简单记录下。</p><h2 id="推荐插件"><a href="#推荐插件" class="headerlink" title="推荐插件"></a>推荐插件</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one">Markdown All in One</a> : 快捷键、生成目录、自动预览等等</p><p><a href="https://marketplace.visualstudio.com/items?itemName=hancel.markdown-image">Markdown Image</a> : 方便地在 Markdown 中插入图片，支持本地、图床或对象存储</p><p><a href="https://marketplace.visualstudio.com/items?itemName=xlthu.Pangu-Markdown">Pangu-Markdown</a> : 在中英文之间加空格</p><p><a href="https://marketplace.visualstudio.com/items?itemName=cweijan.vscode-office">Office Viewer(Markdown Editor)</a> : 如果有 WYSIWYG 需求的话推荐</p><h2 id="图片插件使用方式"><a href="#图片插件使用方式" class="headerlink" title="图片插件使用方式"></a>图片插件使用方式</h2><p>首先安装 <a href="https://marketplace.visualstudio.com/items?itemName=hancel.markdown-image">Markdown Image</a> 插件</p><p>可复制图片文件或截图粘贴，快捷键 <kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>V</kbd>，或右键菜单粘贴图片</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/8fbeb71eea4993a750a8494d3cf93b85.png" alt="图 2"></p><h2 id="插件基本配置"><a href="#插件基本配置" class="headerlink" title="插件基本配置"></a>插件基本配置</h2><ul><li><code>markdown-image.base.uploadMethod</code>: 上传图片的方式，根据不同的方式，须设置不同的项目</li><li><code>markdown-image.base.fileNameFormat</code>: 图片文件命名格式化字符串。支持多种变量做格式化，可同时配置文件夹格式，具体见设置</li></ul><p><code>uploadMethod</code> 可选值为：</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/3cabeddf1adb220a7cad65b79e6fdb5e.png" alt="图 1"></p><h2 id="复制到本地"><a href="#复制到本地" class="headerlink" title="复制到本地"></a>复制到本地</h2><p><code>uploadMethod</code> 设置为 <code>Local</code></p><p><code>markdown-image.local.path</code>: 图片本地存放路径，支持相对路径，相对于所粘贴 Markdown 文件，<code>/</code> 表示打开的文件夹根目录。若路径不存在，将会自动创建</p><h2 id="上传到图床或-OSS"><a href="#上传到图床或-OSS" class="headerlink" title="上传到图床或 OSS"></a>上传到图床或 OSS</h2><p>按需选择，具体见 <a href="https://github.com/imlinhanchao/vsc-markdown-image/blob/HEAD/README.zh-cn.md#%E6%89%A9%E5%B1%95%E8%AE%BE%E7%BD%AE%E9%A1%B9%E7%9B%AE">文档</a></p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/724fe1a20b4f770c3dd938e2ec8bc53e6199.png" alt="图 3"></p><h2 id="自定义上传"><a href="#自定义上传" class="headerlink" title="自定义上传"></a>自定义上传</h2><p>当你用的图床不在默认支持列表时可以编写自定义代码来上传图片，配置 <code>markdown-image.DIY.path</code> 为你写的代码的路径</p><p>你的代码必须 exports 一个像 <code>async function (filePath:string, savePath:string, markdownPath:string):string</code> 的函数</p><p>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">filePath, savePath, markdownPath</span>) &#123;<br>  <span class="hljs-comment">// Return a picture access link</span><br>  <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">relative</span>(path.<span class="hljs-title function_">dirname</span>(markdownPath), filePath);<br>&#125;<br></code></pre></td></tr></table></figure><details><summary>我的自定义代码：</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; createReadStream &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> fetch = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-fetch&#x27;</span>) <span class="hljs-comment">// ^2.6.7</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">FormData</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;form-data&#x27;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">upload</span>(<span class="hljs-params">&#123; filePath, preUpload, ...options &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> form = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>()<br>  <span class="hljs-keyword">if</span> (preUpload) <span class="hljs-keyword">await</span> <span class="hljs-title function_">preUpload</span>(filePath, form, options)<br>  <span class="hljs-keyword">const</span> &#123; api, fileField = <span class="hljs-string">&#x27;file&#x27;</span>, formData = &#123;&#125;, headers = &#123;&#125;, isSuccess, returnUrl &#125; = options<br>  form.<span class="hljs-title function_">append</span>(fileField, <span class="hljs-title function_">createReadStream</span>(filePath))<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [formKey, formValue] <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(formData)) &#123;<br>    form.<span class="hljs-title function_">append</span>(formKey, formValue)<br>  &#125;<br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(api, &#123;<br>    <span class="hljs-attr">body</span>: form,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>      ...headers,<br>      ...form.<span class="hljs-title function_">getHeaders</span>()<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(response.<span class="hljs-property">statusText</span>)<br>  <span class="hljs-keyword">const</span> json = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>()<br>  <span class="hljs-keyword">if</span> (isSuccess?.(json)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">returnUrl</span>(json)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(json, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>))<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 以 bilibili 为例</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">filePath</span>) &#123;<br>  <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">upload</span>(&#123;<br>    <span class="hljs-attr">api</span>: <span class="hljs-string">&#x27;https://api.bilibili.com/x/dynamic/feed/draw/upload_bfs&#x27;</span>,<br>    filePath,<br>    <span class="hljs-attr">fileField</span>: <span class="hljs-string">&#x27;file_up&#x27;</span>,<br>    <span class="hljs-attr">formData</span>: &#123;<br>      <span class="hljs-attr">biz</span>: <span class="hljs-string">&#x27;new_dyn&#x27;</span>,<br>      <span class="hljs-attr">category</span>: <span class="hljs-string">&#x27;daily&#x27;</span>,<br>      <span class="hljs-attr">csrf</span>: <span class="hljs-string">&#x27;你的 CSRF Token&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-title class_">Cookie</span>: <span class="hljs-string">&#x27;你的 Cookie&#x27;</span>,<br>      <span class="hljs-title class_">Origin</span>: <span class="hljs-string">&#x27;https://t.bilibili.com&#x27;</span>,<br>      <span class="hljs-title class_">Referer</span>: <span class="hljs-string">&#x27;https://t.bilibili.com/&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">isSuccess</span>: <span class="hljs-function"><span class="hljs-params">d</span> =&gt;</span> d.<span class="hljs-property">code</span> == <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">returnUrl</span>: <span class="hljs-function"><span class="hljs-params">d</span> =&gt;</span> d.<span class="hljs-property">data</span>.<span class="hljs-property">image_url</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;http:&#x27;</span>, <span class="hljs-string">&#x27;https:&#x27;</span>)<br>  &#125;)<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure></details><details><summary>使用 upimg 上传：</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> upimg = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;upimg&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">filePath</span>) &#123;<br>  <span class="hljs-comment">// 以 bilibili 为例，文档见 https://www.npmjs.com/package/upimg</span><br>  <span class="hljs-keyword">const</span> &#123; url &#125; = <span class="hljs-keyword">await</span> upimg.<span class="hljs-property">bilibili</span>.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;cookie&#x27;</span>, <span class="hljs-string">&#x27;你的 Cookie&#x27;</span>).<span class="hljs-title function_">upload</span>(filePath)<br>  <span class="hljs-keyword">return</span> url<br>&#125;<br></code></pre></td></tr></table></figure></details><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/imlinhanchao/vsc-markdown-image/blob/HEAD/README.zh-cn.md">Markdown Image Readme</a></p><hr><p><em>fin.</em></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>VS Code</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm WARN config global `--global` are deprecated 解决办法</title>
    <link href="/z/posts/db4d19bf/"/>
    <url>/z/posts/db4d19bf/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 以管理员身份运行</span><br>npm i -g npm-windows-upgrade<br>npm-windows-upgrade<br><span class="hljs-comment"># 然后选择最新版本</span><br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>最近执行 <code>npm -v</code> 时，npm 报了如下警告：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">npm WARN config global `--global`, `--local` are deprecated. Use `--location=global` instead.<br></code></pre></td></tr></table></figure><p>问题是在 Windows 平台出现的，查了下貌似是 <code>npm.cmd</code> 里用了弃用的选项 <code>-g</code>，导致出现了这个警告。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>最新的 npm 应该已经修复了这个问题，但我在使用 <code>npm i -g npm</code> 安装最新版本后还是报这个警告，于是使用 <code>npm-windows-upgrade</code> 这个包来更新 npm。另外，既然是 <code>npm.cmd</code> 使用了废弃的选项，那就直接修改 <code>npm.cmd</code> ，把这个选项替换掉。</p><h3 id="方式一：使用-npm-windows-upgrade"><a href="#方式一：使用-npm-windows-upgrade" class="headerlink" title="方式一：使用 npm-windows-upgrade"></a>方式一：使用 npm-windows-upgrade</h3><p><img src="https://github-readme-stats.vercel.app/api/pin/?username=felixrieseberg&repo=npm-windows-upgrade" alt="npm-windows-upgrade"></p><p>首先，要确保可以通过从 PowerShell 执行 npm 脚本。以管理员身份打开 PowerShell，运行以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Set-ExecutionPolicy</span> Unrestricted <span class="hljs-literal">-Scope</span> CurrentUser <span class="hljs-literal">-Force</span><br></code></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --global --production npm-windows-upgrade<br>npm-windows-upgrade<br></code></pre></td></tr></table></figure><p>选择最新版本</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/192d8487fa5adad5bcecfe083f52219b.png" alt="图 1"></p><h3 id="方式二：修改-npm-cmd"><a href="#方式二：修改-npm-cmd" class="headerlink" title="方式二：修改 npm.cmd"></a>方式二：修改 <code>npm.cmd</code></h3><ol><li>进入到 nodejs 安装目录</li></ol><p> <img src="https://upload-bbs.mihoyo.com/upload/2022/06/09/260511332/5b5463077bb1d98a3a7e7804bc18767c_601754267090861.png" alt="图 2"></p><ol start="2"><li>替换 <code>npm.cmd</code> 第 12 行的 <code>prefix -g</code> 为 <code>prefix --location=global</code></li></ol><p> <img src="https://pic.rmb.bdstatic.com/bjh/events/a037ae700920c9b683d259a8e6450dbc.png" alt="图 3"></p><ol start="3"><li><p>同样修改其他几个文件： <code>npm</code>, <code>npx</code>, <code>npx.cmd</code></p></li><li><p>保存（以管理员身份）</p></li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://stackoverflow.com/questions/72401421">stackoverflow&#x2F;72401421</a></p><p><a href="https://www.npmjs.com/package/npm-windows-upgrade">npm-windows-upgrade</a></p><hr><p><em>fin.</em></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vite + Vue2 + Vuetify2 + script setup + TypeScript 搭配开发项目</title>
    <link href="/z/posts/fb7525a/"/>
    <url>/z/posts/fb7525a/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><blockquote><p>本文记录如何在 Vue2 环境下尽量使用 Vue3 的 Composition-api 并配合 Vuetify2 使用</p></blockquote><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前在改造一个用 Vuetify2 的 <a href="https://github.com/asadahimeka/yandere-masonry">项目</a>，由于 Vuetify3 还处于 beta 阶段并且与 Vuetify2 相比缺失一些特性，但又想用 Vue3 的 <code>&lt;script setup&gt;</code> 语法，于是寻找了下相关方案，下面简单记录一下。</p><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>建议使用 VSCode 开发并安装以下插件且禁用 Vetur：</p><p><a href="https://marketplace.visualstudio.com/items?itemName=Vue.volar">Vue Language Features (Volar)</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=Vue.vscode-typescript-vue-plugin">TypeScript Vue Plugin (Volar)</a></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>使用 <code>npm init</code> 初始化项目</p><h2 id="添加所需依赖"><a href="#添加所需依赖" class="headerlink" title="添加所需依赖"></a>添加所需依赖</h2><ul><li><a href="mailto:&#118;&#x75;&#x65;&#64;&#50;&#x2e;&#54;&#46;&#49;&#x34;">&#118;&#x75;&#x65;&#64;&#50;&#x2e;&#54;&#46;&#49;&#x34;</a>: 指定 2 版本，不指定的话默认安装 3 版本</li><li>vue-template-compiler: 将 Vue 2.0 模板预编译为渲染函数</li><li>vite-plugin-vue2: 让 Vite 支持 Vue2</li><li>@vue&#x2F;composition-api: 在 Vue2 项目中使用组合 API</li><li>unplugin-vue2-script-setup: 在 Vue2 项目中使用 <code>&lt;script setup&gt;</code> 语法糖</li><li>unplugin-vue-components: 按需自动引入组件</li><li>@vue&#x2F;runtime-dom: 配合 Volar</li></ul><p>完整依赖如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;@mdi/font&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5.9.55&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;@vue/composition-api&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.6.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;roboto-fontface&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.6.14&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;vuetify&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.6.4&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;webfontloader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.0.0&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;@types/node&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^17.0.29&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;@types/webfontloader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.6.34&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;@vue/runtime-dom&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.2.33&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sass&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.32.12&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;typescript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.6.3&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;unplugin-vue-components&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^0.19.3&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;unplugin-vue2-script-setup&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^0.10.2&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;vite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.9.5&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;vite-plugin-vue2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;vue-template-compiler&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.6.14&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;vue-tsc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^0.34.10&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="文件目录结构"><a href="#文件目录结构" class="headerlink" title="文件目录结构"></a>文件目录结构</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs stylus">📦project<br> ┣ 📂<span class="hljs-selector-class">.vscode</span><br> ┣ 📂dist<br> ┣ 📂node_modules<br> ┣ 📂<span class="hljs-attribute">src</span><br> ┃ ┣ 📂common<br> ┃ ┣ 📂components<br> ┃ ┣ 📂plugins<br> ┃ ┃ ┣ 📜vuetify<span class="hljs-selector-class">.ts</span><br> ┃ ┃ ┗ 📜webfontloader<span class="hljs-selector-class">.ts</span><br> ┃ ┣ 📂styles<br> ┃ ┣ 📜App<span class="hljs-selector-class">.vue</span><br> ┃ ┣ 📜env<span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.ts</span><br> ┃ ┗ 📜<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.ts</span><br> ┣ 📜<span class="hljs-selector-class">.gitattributes</span><br> ┣ 📜<span class="hljs-selector-class">.gitignore</span><br> ┣ 📜components<span class="hljs-selector-class">.d</span><span class="hljs-selector-class">.ts</span><br> ┣ 📜index<span class="hljs-selector-class">.html</span><br> ┣ 📜package<span class="hljs-selector-class">.json</span><br> ┣ 📜readme<span class="hljs-selector-class">.md</span><br> ┣ 📜tsconfig<span class="hljs-selector-class">.json</span><br> ┣ 📜tsconfig<span class="hljs-selector-class">.node</span><span class="hljs-selector-class">.json</span><br> ┣ 📜vite<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.ts</span><br> ┗ 📜yarn.lock<br></code></pre></td></tr></table></figure><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><p>来自 <a href="https://cn.vitejs.dev/guide/#index-html-and-project-root">Vite 官网</a>：</p><blockquote><p>你可能已经注意到，在一个 Vite 项目中，<code>index.html</code> 在项目最外层而不是在 <code>public</code> 文件夹内。这是有意而为之的：在开发期间 <code>Vite</code> 是一个服务器，而 <code>index.html</code> 是该 Vite 项目的入口文件。Vite 将 <code>index.html</code> 视为源码和模块图的一部分。Vite 解析 <code>&lt;script type=&quot;module&quot; src=&quot;...&quot;&gt;</code> ，这个标签指向你的 JavaScript 源码。甚至内联引入 JavaScript 的 <code>&lt;script type=&quot;module&quot;&gt;</code> 和引用 CSS 的 <code>&lt;link href&gt;</code> 也能利用 Vite 特有的功能被解析。另外，<code>index.html</code> 中的 URL 将被自动转换，因此不再需要 <code>%PUBLIC_URL%</code> 占位符了。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vite App<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/src/main.ts&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="components-d-ts"><a href="#components-d-ts" class="headerlink" title="components.d.ts"></a>components.d.ts</h3><p>由 <code>unplugin-vue-components</code> 自动生成，为自动引入组件提供支持，在 <code>vite.config.ts</code> 中通过以下设置打开</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Components</span>(&#123;<br>  <span class="hljs-attr">dts</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// enabled by default if `typescript` is installed</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>记得把 <code>components.d.ts</code> 添加到 <code>tsconfig.json</code> 的 <code>includes</code></p><h3 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h3><blockquote><p><code>tsconfig.json</code> 文件中指定了用来编译这个项目的根文件和编译选项。</p></blockquote><p>配置全局类型：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;types&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;vite/client&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;node&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;vue&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;vuetify&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;unplugin-vue2-script-setup/types&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>Volar 需要以下配置来支持 Vue2</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;vueCompilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;experimentalCompatMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;experimentalTemplateCompilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;compatConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;MODE&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span> <span class="hljs-comment">// optional</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>完整配置见 <a href="https://github.com/asadahimeka/userscripts/blob/master/yandere-masonry/tsconfig.json">yandere-masonry&#x2F;tsconfig.json</a></p><h3 id="tsconfig-node-json"><a href="#tsconfig-node-json" class="headerlink" title="tsconfig.node.json"></a>tsconfig.node.json</h3><p>配置 <code>vite.config.ts</code> 的 TypeScript 选项</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;composite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;esnext&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;moduleResolution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;esModuleInterop&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;types&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;node&quot;</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;include&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;vite.config.ts&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="vite-config-ts"><a href="#vite-config-ts" class="headerlink" title="vite.config.ts"></a>vite.config.ts</h3><p>Vite 配置文件，之前安装的插件需要这个文件里配置一下来支持 Vue2、<code>&lt;script setup&gt;</code> 等等</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; fileURLToPath, <span class="hljs-variable constant_">URL</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;node:url&#x27;</span><br><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> &#123; createVuePlugin <span class="hljs-keyword">as</span> <span class="hljs-title class_">Vue2</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-vue2&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">VuetifyResolver</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unplugin-vue-components/resolvers&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Components</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unplugin-vue-components/vite&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ScriptSetup</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unplugin-vue2-script-setup/vite&#x27;</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">// https://github.com/underfin/vite-plugin-vue2</span><br>    <span class="hljs-title class_">Vue2</span>(&#123; <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;esnext&#x27;</span> &#125;),<br>    <span class="hljs-comment">// https://github.com/antfu/unplugin-vue2-script-setup</span><br>    <span class="hljs-title class_">ScriptSetup</span>(),<br>    <span class="hljs-comment">// https://github.com/antfu/unplugin-vue-components</span><br>    <span class="hljs-title class_">Components</span>(&#123;<br>      <span class="hljs-comment">// generate `components.d.ts` global declarations</span><br>      <span class="hljs-attr">dts</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// auto import for directives</span><br>      <span class="hljs-attr">directives</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// resolvers for custom components</span><br>      <span class="hljs-attr">resolvers</span>: [<br>        <span class="hljs-comment">// Vuetify</span><br>        <span class="hljs-title class_">VuetifyResolver</span>(),<br>      ],<br>    &#125;),<br>  ],<br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-string">&#x27;@&#x27;</span>: <span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&#x27;src&#x27;</span>, <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>))<br>    &#125;,<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="src-x2F-env-d-ts"><a href="#src-x2F-env-d-ts" class="headerlink" title="src&#x2F;env.d.ts"></a>src&#x2F;env.d.ts</h3><p>提供类型支持：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/// &lt;reference types=&quot;vite/client&quot; /&gt;</span><br><br><span class="hljs-keyword">declare</span> <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;*.vue&#x27;</span> &#123;<br>  <span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">DefineComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br>  <span class="hljs-comment">// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/ban-types</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">component</span>: <span class="hljs-title class_">DefineComponent</span>&lt;&#123;&#125;, &#123;&#125;, <span class="hljs-built_in">any</span>&gt;<br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> component<br>&#125;<br><br><span class="hljs-keyword">declare</span> <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;vuetify/lib/framework&#x27;</span> &#123;<br>  <span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;vuetify/types&#x27;</span><br>  <span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuetify</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuetify&#x27;</span><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Vuetify</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="src-x2F-main-ts"><a href="#src-x2F-main-ts" class="headerlink" title="src&#x2F;main.ts"></a>src&#x2F;main.ts</h3><p>入口文件，在此安装 <code>VueCompositionAPI</code> 与 <code>Vuetify</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueCompositionAPI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vue/composition-api&#x27;</span><br><span class="hljs-keyword">import</span> installVuetify <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./plugins/vuetify&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueCompositionAPI</span>)<br><br><span class="hljs-keyword">const</span> vuetify = <span class="hljs-title function_">installVuetify</span>()<br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  vuetify,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>&#125;)<br>app.$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="src-x2F-App-vue"><a href="#src-x2F-App-vue" class="headerlink" title="src&#x2F;App.vue"></a>src&#x2F;App.vue</h3><p>直接使用 <code>&lt;script setup&gt;</code> 语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">v-app</span> <span class="hljs-attr">:theme</span>=<span class="hljs-string">&quot;store.theme&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">v-app-bar</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">v-navigation-drawer</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">v-main</span> <span class="hljs-attr">app</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">v-container</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">v-main</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">v-app</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// This starter template is using Vue 3 &lt;script setup&gt; SFCs</span></span><br><span class="language-javascript"><span class="hljs-comment">// Check out https://vuejs.org/api/sfc-script-setup.html#script-setup</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; onMounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vue/composition-api&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; useVuetify &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./plugins/vuetify&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> vuetify = <span class="hljs-title function_">useVuetify</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">  vuetify.<span class="hljs-property">theme</span>.<span class="hljs-property">dark</span> = <span class="hljs-literal">true</span></span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="src-x2F-plugins-x2F-vuetify-ts"><a href="#src-x2F-plugins-x2F-vuetify-ts" class="headerlink" title="src&#x2F;plugins&#x2F;vuetify.ts"></a>src&#x2F;plugins&#x2F;vuetify.ts</h3><p>安装 <code>Vuetify</code>，并通过 <code>useVuetify</code> 暴露 <code>$vuetify</code> 实例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// Styles</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@mdi/font/css/materialdesignicons.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;vuetify/dist/vuetify.min.css&#x27;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuetify</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuetify&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getCurrentInstance &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vue/composition-api&#x27;</span><br><span class="hljs-keyword">import</span> &#123; loadFonts &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./webfontloader&#x27;</span><br><br><span class="hljs-title function_">loadFonts</span>()<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">installVuetify</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuetify</span>)<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuetify</span>(&#123;&#125;)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> installVuetify<br><br><span class="hljs-comment">/** Get vuetify instance (For Composition api) */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useVuetify</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">/** Get Instance */</span><br>  <span class="hljs-keyword">const</span> instance = <span class="hljs-title function_">getCurrentInstance</span>()<br>  <span class="hljs-keyword">if</span> (!instance) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Should be used in setup().&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> instance.<span class="hljs-property">proxy</span>.<span class="hljs-property">$vuetify</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="src-x2F-plugins-x2F-webfontloader-ts"><a href="#src-x2F-plugins-x2F-webfontloader-ts" class="headerlink" title="src&#x2F;plugins&#x2F;webfontloader.ts"></a>src&#x2F;plugins&#x2F;webfontloader.ts</h3><p>加载字体：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * plugins/webfontloader.js</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * webfontloader documentation: https://github.com/typekit/webfontloader</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">loadFonts</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> webFontLoader = <span class="hljs-keyword">await</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;webfontloader&#x27;</span>)<br><br>  webFontLoader.<span class="hljs-title function_">load</span>(&#123;<br>    <span class="hljs-attr">google</span>: &#123;<br>      <span class="hljs-attr">families</span>: [<span class="hljs-string">&#x27;Roboto:100,300,400,500,700,900&amp;display=swap&#x27;</span>],<br>    &#125;,<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>启动项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn dev<br></code></pre></td></tr></table></figure><p><img src="https://pic.rmb.bdstatic.com/bjh/events/e5482b5a51ea9f2f0968d207ba92d137.png" alt="图 1"></p><p>项目代码见 <a href="https://github.com/asadahimeka/yandere-masonry">yandere-masonry</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://juejin.cn/post/7012240119465771038">https://juejin.cn/post/7012240119465771038</a></p><p><a href="https://github.com/logue/vite-vue2-vuetify-ts-starter">https://github.com/logue/vite-vue2-vuetify-ts-starter</a></p><p><a href="https://github.com/antfu/unplugin-vue2-script-setup">https://github.com/antfu/unplugin-vue2-script-setup</a></p><hr><p><em>fin.</em></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Vite</tag>
      
      <tag>Vuetify</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何让 Windows 把 TypeScript 文件当作文本文件</title>
    <link href="/z/posts/47c73f2e/"/>
    <url>/z/posts/47c73f2e/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>修改注册表项 <code>HKEY_CLASSES_ROOT\.ts</code> 为 <code>HKEY_CLASSES_ROOT\.txt</code> 的值</p><span id="more"></span><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><blockquote><p>Windows10 总把 TypeScript 文件自动当成视频，放 .ts 的文件夹经常被自动识别为视频文件夹，打开后自动刷新一遍，然后变成大图标，并有一个播放选项。</p></blockquote><p><code>.ts</code> 文件格式在 Windows 中默认为 <code>MPEG 2 TS</code> 视频格式，当进入 TypeScript 项目目录，会读取 <code>.ts</code>  文件获取视频缩略图，造成卡顿。</p><p>这本身没有什么问题，因为 .ts 文件，在 TypeScript 出现之前实际上是 Transscript 文件，用于播放 DVD，并且 Windows 支持这种格式。然而把 TypeScript 文件当作视频去解析是无意义的，就使文件管理器变得很卡。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>修改注册表解决：</p><ol><li>打开注册表：<kbd>Win</kbd> + <kbd>R</kbd> 输入 <code>regedit.exe</code></li><li>导航到 <code>HKEY_CLASSES_ROOT\.ts</code></li><li>修改以下值：<ul><li>(默认) : txtfile</li><li>Content Type : text&#x2F;plain</li><li>PerceivedType : text</li></ul></li></ol><p>也可以直接保存以下代码为 <code>.reg</code> 文件双击合并注册表。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">Windows Registry Editor Version 5.00<br><br>[HKEY_CLASSES_ROOT\.ts]<br>@=&quot;txtfile&quot;<br>&quot;Content Type&quot;=&quot;text/plain&quot;<br>&quot;PerceivedType&quot;=&quot;text&quot;<br><br>[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\KindMap]<br>&quot;.ts&quot;=&quot;document&quot;<br></code></pre></td></tr></table></figure><p><strong>修改之前先备份下原先的注册表</strong>。</p><p>修改完成以后重启文件管理器或计算机生效。</p><p>对于修改注册表之前已存在的项目文件，需要右键项目文件夹点击 <code>属性</code>，然后选择 <code>自定义</code> 页面，将 <code>优化此文件夹</code> 选择为 <code>常规项目</code>，并将下方的 <code>把此模板应用到所有子文件夹</code> 勾选上，然后确定即可。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.zhihu.com/question/373189177">https://www.zhihu.com/question/373189177</a></p><p><a href="https://stackoverflow.com/questions/32669805">https://stackoverflow.com/questions/32669805</a></p><hr><p><em>fin.</em></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Vite 插件开发构建 Tampermonkey 用户脚本</title>
    <link href="/z/posts/3a8bdf22/"/>
    <url>/z/posts/3a8bdf22/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>一直以来，我都是直接在浏览器 Tampermonkey 扩展页面直接新建用户脚本来开发的：</p><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/30/260511332/292d73f6d6ffa3de501a71d2b535a822_1730909607709473864.png" alt="图 1"></p><p>对于一些简单的脚本，这没有什么问题，即改即看。但当代码多了以后问题就来了，自带编辑器开发体验确实不太舒服，没有格式化，没有代码补全，无法模块化编写代码等等，这时候我就想寻找一个打包方案，让我们可以在自己的编辑器如 VSCode 里开发，这样就可以充分利用前端工程化的便利，提升开发体验。</p><p>常见的打包工具比如 webpack、parcel、rollup 等，首先排除 webpack（笑），然后试了下 parcel，效果不太理想，之后试了 rollup 感觉还可以。转眼想到要用 vue 开发，那就直接上 vite 吧 😂，vite 也是用 rollup 来打包生产代码的。</p><p>直接打开 npm，看看有没有人造轮子，然后发现下面几个包：</p><ul><li>gorilla (rollup 插件）</li><li>vite-plugin-tampermonkey</li><li>vite-plugin-monkey</li></ul><p>这几个都符合基本需求，其中 <code>gorilla</code> 不能打包样式，另外两个插件都差不多，选了 <code>vite-plugin-tampermonkey</code> 进行改造。</p><p>修改后的插件： <a href="https://github.com/asadahimeka/vite-plugin-tm-userscript">Github</a> | <a href="https://www.npmjs.com/package/vite-plugin-tm-userscript">npm</a></p><h2 id="插件特点"><a href="#插件特点" class="headerlink" title="插件特点"></a>插件特点</h2><ul><li>通过单独的配置文件或者 <code>package.json</code> 中的 <code>tmHeader</code> 字段来配置 Tampermonkey 的 Userscript Header</li><li>构建生产时支持自动分析代码用到的 <code>grant</code></li><li>开发模式时默认导入所有 <code>grant</code>，并且把所有的 <code>grant</code> 方法加入到 <code>unsafeWindow</code></li><li>可通过简单配置，把引入的外部包 <code>require</code> 化，自动引入 jsdelivr CDN ，详情见下面的插件配置</li></ul><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p><a href="https://cn.vitejs.dev/">Vite 官方中文文档</a></p><p><a href="https://www.tampermonkey.net/documentation.php">Tampermonkey 文档</a></p><p><a href="https://github.com/apsking/gorilla">gorilla</a></p><p><a href="https://www.npmjs.com/package/vite-plugin-tampermonkey">vite-plugin-tampermonkey</a></p><p><a href="https://github.com/lisonge/vite-plugin-monkey">vite-plugin-monkey</a></p><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><blockquote><p>兼容性注意<br>Vite 需要 Node.js 版本 &gt;&#x3D; 12.0.0。然而，有些模板需要依赖更高的 Node 版本才能正常运行，当你的包管理器发出警告时，请注意升级你的 Node 版本。</p></blockquote><p>使用 NPM:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm create vite@latest<br></code></pre></td></tr></table></figure><p>使用 Yarn:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ yarn create vite<br></code></pre></td></tr></table></figure><p>使用 PNPM:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pnpm create vite<br></code></pre></td></tr></table></figure><p>按需选择框架</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/e7442f76ebca609e88c1ddc5ceafd1ed7854.png" alt="图 3"></p><p>推荐使用 TypeScript</p><p><img src="https://upload-bbs.mihoyo.com/upload/2022/10/16/260511332/1bd88d0869fb28ccb772360bf81bd3d1_6955823704538922666.png" alt="图 4"></p><p>然后到项目目录开始安装依赖</p><h2 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add vite-plugin-tm-userscript -D<br><span class="hljs-comment"># OR</span><br>npm install vite-plugin-tm-userscript -D<br></code></pre></td></tr></table></figure><h3 id="配置-vite-config-ts"><a href="#配置-vite-config-ts" class="headerlink" title="配置 vite.config.ts"></a>配置 <code>vite.config.ts</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Userscript</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-tm-userscript&#x27;</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title class_">Userscript</span>(&#123;<br>      <span class="hljs-attr">externalGlobals</span>: [<span class="hljs-string">&#x27;vue&#x27;</span>]<br>    &#125;)<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="配置-Userscript-Header"><a href="#配置-Userscript-Header" class="headerlink" title="配置 Userscript Header"></a>配置 Userscript Header</h3><p>有四种方式来配置 <code>Userscript Header</code>, 优先级如下所示</p><ol><li><code>header.config.json</code></li><li><code>header.config.js</code></li><li><code>header.config.txt</code></li><li><code>package.json</code> 中的 <code>tmHeader</code> 字段</li></ol><p>其中 <code>header.config.txt</code> 使用 Tampermonkey 头部注释配置，不会经过处理，直接插入脚本头部作为 Header 使用</p><p>其他三种格式按 json 格式配置，多个属性配置如 <code>match</code> 用数组表示，经过处理自动添加 <code>grant</code> 与 <code>require</code></p><p>示例配置见 <code>example/header.config.js</code></p><p>使用 js 文件来配置的好处是可以有自动补全：</p><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/30/260511332/367ebdc421ac33552e745c22ab52a862_7237050299708920247.png" alt="图 5"></p><p>具体属性配置见 <a href="https://www.tampermonkey.net/documentation.php">Tampermonkey 文档</a></p><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TMPluginOptions</span> &#123;<br>  entry?: <span class="hljs-built_in">string</span>;<br>  autoGrant?: <span class="hljs-built_in">boolean</span>;<br>  externalGlobals?: <span class="hljs-built_in">string</span>[] | <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span> | <span class="hljs-built_in">string</span>[]&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="externalGlobals"><a href="#externalGlobals" class="headerlink" title="externalGlobals"></a><code>externalGlobals</code></h3><p>配置外部包，比如 <code>vue</code>，<code>axios</code> 等，减少打包体积，并且会自动声明 <code>require</code> ，如下配置：</p><p>三种配置形式，可自定义 CDN，不配置 CDN 的话默认使用 jsdelivr CDN</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1</span><br><span class="hljs-title class_">TMPlugin</span>(&#123;<br>  <span class="hljs-attr">externalGlobals</span>: [<span class="hljs-string">&#x27;jquery&#x27;</span>]<br>&#125;)<br><br><span class="hljs-comment">// 2</span><br><span class="hljs-title class_">TMPlugin</span>(&#123;<br>  <span class="hljs-attr">externalGlobals</span>: &#123;<br>    <span class="hljs-string">&#x27;jquery&#x27;</span>: <span class="hljs-string">&#x27;jQuery&#x27;</span><br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// 3</span><br><span class="hljs-title class_">TMPlugin</span>(&#123;<br>  <span class="hljs-attr">externalGlobals</span>: &#123;<br>    <span class="hljs-string">&#x27;jquery&#x27;</span>: [<span class="hljs-string">&#x27;jQuery&#x27;</span>, <span class="hljs-string">&#x27;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js&#x27;</span>]<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// =&gt;</span><br><br><span class="hljs-keyword">return</span> &#123;<br>  <span class="hljs-attr">rollupOptions</span>: &#123;<br>    <span class="hljs-attr">external</span>: [<span class="hljs-string">&#x27;jquery&#x27;</span>]<br>    <span class="hljs-attr">output</span>: &#123;<br>      <span class="hljs-attr">globals</span>: &#123;<br>        <span class="hljs-attr">jquery</span>: <span class="hljs-string">&#x27;jQuery&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// @require https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js</span><br></code></pre></td></tr></table></figure><h3 id="autoGrant"><a href="#autoGrant" class="headerlink" title="autoGrant"></a><code>autoGrant</code></h3><p><code>boolean</code> 类型，默认为 <code>true</code></p><p>自动分析代码中使用的 Tampermonkey 的 <code>grant</code>，并加入 Userscript Header 声明中</p><h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a><code>entry</code></h3><p>入口文件，默认为 <code>src/main.js</code> 或者 <code>src/main.ts</code></p><h2 id="开发启动"><a href="#开发启动" class="headerlink" title="开发启动"></a>开发启动</h2><p><code>npm run dev</code> 或 <code>yarn dev</code> 运行开发服务，然后点击下图所示链接安装</p><p><img src="https://upload-bbs.mihoyo.com/upload/2022/10/16/260511332/b436bcc8da5b22fc79ea8c39aee9781e_1780254568259664848.png" alt="图 6"></p><h2 id="生产打包"><a href="#生产打包" class="headerlink" title="生产打包"></a>生产打包</h2><p><code>npm run build</code> 或 <code>yarn build</code> 进行生产模式打包，打包文件放在 <code>dist</code> 文件夹里</p><p>然后可以发布到插件市场或者直接安装到浏览器</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><a href="https://github.com/asadahimeka/vite-plugin-tm-userscript/tree/master/example">https://github.com/asadahimeka/vite-plugin-tm-userscript/tree/master/example</a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="vite-配置额外说明"><a href="#vite-配置额外说明" class="headerlink" title="vite 配置额外说明"></a>vite 配置额外说明</h3><p>生产构建模式将强制配置 <code>config.build</code>:</p><ul><li>构建的包名为 <code>package.json</code> 的 <code>name</code> （<strong>必须填写</strong>）属性的驼峰模式，构建的文件名也与其相关</li><li>文件打包格式为 <code>iife</code>，不压缩，不分离 <code>css</code> 文件</li><li>额外配置了 <code>rollupOptions</code>，以支持其他功能</li></ul><h3 id="禁止-CSP-Content-Security-Policy"><a href="#禁止-CSP-Content-Security-Policy" class="headerlink" title="禁止 CSP(Content-Security-Policy)"></a>禁止 CSP(Content-Security-Policy)</h3><p>在开发模式下，需要通过 <code>script</code> 标签注入 <code>vite</code> 的脚本，有些网站开启了 <code>CSP(Content-Security-Policy)</code>，导致报错，可以安装 <code>Chrome</code> 插件 <a href="https://chrome.google.com/webstore/detail/disable-content-security/ieelmcmcagommplceebfedjlakkhpden">Disable Content-Security-Policy</a> 或者 <a href="https://chrome.google.com/webstore/detail/always-disable-content-se/ffelghdomoehpceihalcnbmnodohkibj">Always Disable Content-Security-Policy</a>，来禁止 <code>CSP(Content-Security-Policy)</code>，<strong>在开发时开启插件即可（其他时间记得关闭以保证网页浏览的安全性）</strong>。</p><hr><p><em>fin.</em></p>]]></content>
    
    
    <categories>
      
      <category>Original</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vite</tag>
      
      <tag>Tampermonkey</tag>
      
      <tag>Userscript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jeecg-vue-tmpl 自用文档</title>
    <link href="/z/posts/9e50dc76/"/>
    <url>/z/posts/9e50dc76/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><div class="warning"><blockquote><p>Deprecated. 请使用官方最新版本。</p></blockquote></div><p>JeecgBoot 前端初始项目 改 自用文档</p><span id="more"></span><h2 id="npm-脚本"><a href="#npm-脚本" class="headerlink" title="npm 脚本"></a>npm 脚本</h2><ul><li><code>yarn serve</code>:  启动本地开发服务，并将地址复制到剪贴板</li><li><code>yarn deploy</code>:  编译打包并部署（外网部署）</li><li><code>yarn build</code>:  编译打包为生产文件</li><li><code>yarn rsync</code>:  通过 rsync 部署文件到服务器（需要 WSL&#x2F;Linux 环境支持）</li><li><code>yarn scp</code>:  通过 scp 部署文件到服务器</li><li><code>yarn build:repo</code>:  打包时生成报告文件帮助分析文件大小情况</li><li><code>yarn lint</code>:  运行 eslint 校验并修复可以自动修复的错误</li><li><code>yarn lint:nofix</code>:  只运行 eslint 校验不修复错误</li><li><code>yarn preview</code>:  本地预览打包完的 dist 文件夹</li><li><code>yarn instal</code>:  安装依赖（使用淘宝源）</li></ul><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><h3 id="moment-range"><a href="#moment-range" class="headerlink" title="moment-range"></a>moment-range</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> moment <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;moment&#x27;</span><br><span class="hljs-keyword">import</span> &#123; extendMoment &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;moment-range&#x27;</span><br><span class="hljs-keyword">const</span> momentRange = <span class="hljs-title function_">extendMoment</span>(moment) <span class="hljs-comment">// 扩展 moment</span><br><span class="hljs-keyword">const</span> rangeMap = &#123;<br>  <span class="hljs-string">&#x27;day&#x27;</span>: &#123; <span class="hljs-attr">unit</span>: <span class="hljs-string">&#x27;days&#x27;</span>, <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;YYYY-MM-DD&#x27;</span> &#125;,<br>  <span class="hljs-string">&#x27;week&#x27;</span>: &#123; <span class="hljs-attr">unit</span>: <span class="hljs-string">&#x27;weeks&#x27;</span>, <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;YYYY-w&#x27;</span> &#125;,<br>  <span class="hljs-string">&#x27;month&#x27;</span>: &#123; <span class="hljs-attr">unit</span>: <span class="hljs-string">&#x27;months&#x27;</span>, <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;YYYY-M&#x27;</span> &#125;<br>&#125;<br><span class="hljs-comment">// 图表开发过程中，API 返回结果中缺失一些没有纵轴数据的横坐标，如下进行补零操作，不然会影响图表趋势</span><br><span class="hljs-comment">// momentRange.range([起始日期，结束日期]).by（日期单位） 进行这一区间的日期迭代</span><br><span class="hljs-comment">// range 的返回结果可使用 for of 进行迭代，也可转为数组进行迭代</span><br><span class="hljs-comment">// 具体文档见 https://github.com/rotaready/moment-range</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setBarData</span>(<span class="hljs-params">d = [], date = [], type = <span class="hljs-string">&#x27;day&#x27;</span></span>) &#123;<br>  <span class="hljs-keyword">let</span> res = []<br>  <span class="hljs-keyword">let</span> dk = d.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> ((acc[cur.<span class="hljs-property">x</span>] = cur), acc), &#123;&#125;)<br>  <span class="hljs-keyword">let</span> &#123; unit, format &#125; = rangeMap[type]<br>  <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(momentRange.<span class="hljs-title function_">range</span>(date).<span class="hljs-title function_">by</span>(unit)).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> x = e.<span class="hljs-title function_">format</span>(format)<br>    <span class="hljs-keyword">let</span> item = dk[x] || &#123; x, <span class="hljs-attr">y</span>: <span class="hljs-number">0</span> &#125;<br>    res.<span class="hljs-title function_">push</span>(item)<br>  &#125;)<br>  <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="numeral"><a href="#numeral" class="headerlink" title="numeral"></a>numeral</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> numeral <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;numeral&#x27;</span><br><span class="hljs-comment">// 使用 numeral 进行精确计算</span><br><span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span> === <span class="hljs-number">0.3</span> <span class="hljs-comment">// false</span><br><span class="hljs-title function_">numeral</span>(<span class="hljs-number">0.1</span>).<span class="hljs-title function_">add</span>(<span class="hljs-number">0.2</span>).<span class="hljs-title function_">value</span>() === <span class="hljs-number">0.3</span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="v-distpicker"><a href="#v-distpicker" class="headerlink" title="v-distpicker"></a>v-distpicker</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">v-distpicker</span> <span class="hljs-attr">:province</span>=<span class="hljs-string">&quot;model.province&quot;</span> <span class="hljs-attr">:city</span>=<span class="hljs-string">&quot;model.cityArea&quot;</span> <span class="hljs-attr">:area</span>=<span class="hljs-string">&quot;model.counties&quot;</span> @<span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;onAreaSelected&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">model</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">province</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-attr">cityArea</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-attr">counties</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">onAreaSelected</span>(<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-property">province</span>.<span class="hljs-property">value</span>) <span class="hljs-comment">// 省</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-property">city</span>.<span class="hljs-property">value</span>) <span class="hljs-comment">// 市</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-property">area</span>.<span class="hljs-property">value</span>) <span class="hljs-comment">// 区</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="vue-svg-loader"><a href="#vue-svg-loader" class="headerlink" title="vue-svg-loader"></a>vue-svg-loader</h3><p>svg 图标文件均置于 <code>@/icons</code> 下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a-icon</span> <span class="hljs-attr">:component</span>=<span class="hljs-string">&quot;MyIcon&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyIcon</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/icons/MyIcon.svg&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-title class_">MyIcon</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="根据模板自动生成页面文件"><a href="#根据模板自动生成页面文件" class="headerlink" title="根据模板自动生成页面文件"></a>根据模板自动生成页面文件</h2><p>在 <code>scripts/comp.list</code> 填写页面名称，换行分隔，运行  <code>node scripts/generate</code> 会根据以下模板生成文件到 <code>@/views/ab</code> 文件夹</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a-card</span> <span class="hljs-attr">:bordered</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">search-filter</span> <span class="hljs-attr">:form</span>=<span class="hljs-string">&quot;queryParam&quot;</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">&quot;searchCols&quot;</span> @<span class="hljs-attr">search</span>=<span class="hljs-string">&quot;searchQuery&quot;</span> @<span class="hljs-attr">reset</span>=<span class="hljs-string">&quot;searchReset&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table-operator&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;plus&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;;&quot;</span>&gt;</span>新增<span class="hljs-tag">&lt;/<span class="hljs-name">a-button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a-table</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;aTableProps&quot;</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;handleTableChange&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">a-card</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">JeecgListMixin</span>, dealCols &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/mixins/JeecgListMixin&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;TempNameListPlaceholder&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">mixins</span>: [<span class="hljs-title class_">JeecgListMixin</span>],</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">columns</span>: <span class="hljs-title function_">dealCols</span>([</span><br><span class="language-javascript">        <span class="hljs-comment">// title, dateIndex, __filter, customRender, &#123; others &#125;,</span></span><br><span class="language-javascript">        [<span class="hljs-string">&#x27;#&#x27;</span>],</span><br><span class="language-javascript">        [<span class="hljs-string">&#x27;字段 1&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-literal">true</span>],</span><br><span class="language-javascript">        [<span class="hljs-string">&#x27;字段 2&#x27;</span>, <span class="hljs-string">&#x27;keyWord&#x27;</span>, <span class="hljs-string">&#x27;num&#x27;</span>],</span><br><span class="language-javascript">        [<span class="hljs-string">&#x27;字段 3&#x27;</span>, <span class="hljs-string">&#x27;sex&#x27;</span>, [<span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;sex&#x27;</span>], <span class="hljs-literal">null</span>],</span><br><span class="language-javascript">        [<span class="hljs-string">&#x27;字段 4&#x27;</span>, <span class="hljs-string">&#x27;createTime&#x27;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>, &#123; <span class="hljs-attr">_fType</span>: <span class="hljs-string">&#x27;daterange&#x27;</span> &#125;]</span><br><span class="language-javascript">      ]),</span><br><span class="language-javascript">      <span class="hljs-attr">url</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">list</span>: <span class="hljs-string">&#x27;/test/jeecgDemo/list&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">delete</span>: <span class="hljs-string">&#x27;/test/jeecgDemo/delete&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">deleteBatch</span>: <span class="hljs-string">&#x27;/test/jeecgDemo/deleteBatch&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="JeecgListMixin"><a href="#JeecgListMixin" class="headerlink" title="JeecgListMixin"></a>JeecgListMixin</h2><p>具体可查看 <code>@/mixins/JeecgListMixin.js</code> 源码了解可用变量与函数或自己改写</p><h3 id="混入变量、方法"><a href="#混入变量、方法" class="headerlink" title="混入变量、方法"></a>混入变量、方法</h3><ul><li><p><code>this.selectedRowKeys</code> :  table 选中行的 keys&#x2F;ids</p></li><li><p><code>this.selectionRows</code> :  table 选中行数据</p></li><li><p><code>this.extraParams</code> :  额外的查询条件</p></li><li><p><code>this.doMixinCreated</code>:  true 的话自动执行 created 钩子中的 loadData</p></li><li><p><code>this.loadData(args)</code>: 列表数据加载方法，args 传 1 的话加载第一页内容</p></li><li><p><code>this.selAll()</code>:  选择当页全部行</p></li><li><p><code>this.clearSel()</code>:  取消全选</p></li><li><p><code>this.getSelRows()</code>:  获取所选行 <code>&#123; rows, keys &#125;</code></p></li><li><p><code>this.setSelRows(rows)</code>:  设置所选行</p></li><li><p><code>this.checkOneSel(callback)</code>: 检查是否选择了一条记录</p></li></ul><h3 id="SearchFilter-x2F-columns-配置格式"><a href="#SearchFilter-x2F-columns-配置格式" class="headerlink" title="SearchFilter &#x2F; columns 配置格式"></a>SearchFilter &#x2F; columns 配置格式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">[ 字段名称，字段名字，是否为筛选项，自定义渲染方法，&#123; ... 其他配置 &#125; ]<br></code></pre></td></tr></table></figure><ul><li><p>具体参数可查阅 <code>@/components/SearchFilter/index.vue</code> 源码查看</p></li><li><p>是否为筛选项 可填 <code>boolean</code>&#x2F;<code>string</code> &#x2F;<code>array</code>，<br>​如 <code>true</code>, <code>&#39;date&#39;</code>,<code>[&#39;select&#39;, &#39;sex&#39;]</code></p></li><li><p>填 <code>true</code> 默认为模糊查询文本类型，即最终处理为如 *qwe* 的格式；</p></li><li><p>字符串可选类型有 select &#x2F; date &#x2F; select2 &#x2F; daterange &#x2F; num &#x2F; numrange &#x2F; input &#x2F; custom</p><ul><li><p>选 select 时需传入数据字典 code， 如<code>[&#39;select&#39;, &#39;sex&#39;]</code></p></li><li><p>选 select2 时需传入下拉选择项列表，如 <code>[&#39;字段 1&#39;, &#39;name&#39;, &#39;select2&#39;, null, &#123; _fOptions: this.someOptions &#125;] </code>，</p></li></ul></li></ul><p>下拉列表数据需遵循如 <code>[&#123; label: &#39;label&#39;, value: &#39;value&#39; &#125;]</code> 格式</p><ul><li><p>对于其他类型可在组件源码中自行加入，或使用 custom 类型<br>如： <code>[&#39;字段 1&#39;, &#39;name&#39;, &#39;custom&#39;, null, &#123; _fSlotName: &#39;slotName&#39; &#125;]</code><br>模板中 :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">search-filter</span> <span class="hljs-attr">...</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">slotName</span>&gt;</span>自定义内容<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">search-filter</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>自定义渲染方法 接受参数 <code>(text, record) =&gt; &#39;处理结果&#39;</code></p><p> <code>text</code> 为当前数据值，<code>record</code> 为当前行数据</p></li></ul><h2 id="自用组件"><a href="#自用组件" class="headerlink" title="自用组件"></a>自用组件</h2><h3 id="PercentNum"><a href="#PercentNum" class="headerlink" title="PercentNum"></a>PercentNum</h3><p>输入时输入百分数，自动将 value 转为对应小数值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">percent-num</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">:max</span>=<span class="hljs-string">&quot;100&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="v-switch-模板中的-switch-case"><a href="#v-switch-模板中的-switch-case" class="headerlink" title="v-switch: 模板中的 switch case"></a>v-switch: 模板中的 switch case</h3><p>使用方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">v-switch</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>&gt;</span>默认后备内容<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">qwe</span>&gt;</span>value 为 qwe 时的内容<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">asd</span>&gt;</span>value 为 asd 时的内容<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">v-switch</span>&gt;</span><br></code></pre></td></tr></table></figure><p>源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- File: `v-switch.vue` --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;VSwitch&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">functional</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">props</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">value</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">type</span>: [<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Number</span>],</span><br><span class="language-javascript">      <span class="hljs-attr">default</span>: <span class="hljs-literal">null</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-title function_">render</span>(<span class="hljs-params">h, &#123; data, props, scopedSlots &#125;</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> &#123; value &#125; = props</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> slotFn = value <span class="hljs-keyword">in</span> scopedSlots ? scopedSlots[value] : scopedSlots.<span class="hljs-property">default</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> slotFn ? <span class="hljs-title function_">slotFn</span>(data.<span class="hljs-property">attrs</span>) : <span class="hljs-literal">null</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="自用函数"><a href="#自用函数" class="headerlink" title="自用函数"></a>自用函数</h2><h3 id="x2F-api-x2F-manage-js"><a href="#x2F-api-x2F-manage-js" class="headerlink" title="@&#x2F;api&#x2F;manage.js"></a>@&#x2F;api&#x2F;manage.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Get 请求</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getAction</span>(<span class="hljs-params">url, parameter</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Res</span>&gt;<br><br><span class="hljs-comment">// Post 请求</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">postAction</span>(<span class="hljs-params">url, parameter, options</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Res</span>&gt;<br><br><span class="hljs-comment">// Put 请求</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">putAction</span>(<span class="hljs-params">url, parameter = &#123;&#125;</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Res</span>&gt;<br><br><span class="hljs-comment">// Delete 请求</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">deleteAction</span>(<span class="hljs-params">url, parameter, data</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Res</span>&gt;<br><br><span class="hljs-comment">// 下载文件 用于 excel 导出</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">downFile</span>(<span class="hljs-params">url, parameter</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Res</span>&gt;<br><br><span class="hljs-comment">// 下载文件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">downloadFile</span>(<span class="hljs-params">url, fileName, parameter</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Res</span>&gt;<br><br><span class="hljs-comment">// 文件上传 用于富文本上传图片</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">uploadAction</span>(<span class="hljs-params">url, parameter</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Res</span>&gt;<br><br><span class="hljs-comment">// 获取文件服务访问路径</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getFileAccessHttpUrl</span>(<span class="hljs-params">avatar, subStr = <span class="hljs-string">&#x27;http&#x27;</span></span>): string<br><br><span class="hljs-comment">// 导出（后端生成）文件用</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getBlob</span>(<span class="hljs-params">url, params</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Blob</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="clipboard-复制文本到剪贴板"><a href="#clipboard-复制文本到剪贴板" class="headerlink" title="clipboard 复制文本到剪贴板"></a>clipboard 复制文本到剪贴板</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// text：要复制的文本，event：点击或其他事件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClipboard</span>(<span class="hljs-params">text: <span class="hljs-built_in">string</span>, event: Event</span>): <span class="hljs-built_in">void</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> clip <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/clipboard&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">columns</span>: <span class="hljs-title function_">dealCols</span>([<br>        [<span class="hljs-string">&#x27;下载地址&#x27;</span>, <span class="hljs-string">&#x27;downloadUrl&#x27;</span>, <span class="hljs-literal">false</span>, <span class="hljs-function"><span class="hljs-params">t</span> =&gt;</span> (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">AButton</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;复制&#x27;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#x27;copy&#x27;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> clip(t, e)&#125; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>)],<br>      ])<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="transDict-数据字典翻译"><a href="#transDict-数据字典翻译" class="headerlink" title="transDict 数据字典翻译"></a>transDict 数据字典翻译</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// value: 要翻译的值，code: 数据字典 code</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">transDict</span>(<span class="hljs-params">value: <span class="hljs-built_in">string</span>, code: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; transDict &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/dicts&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">columns</span>: <span class="hljs-title function_">dealCols</span>([<br>        [<span class="hljs-string">&#x27;任务类型&#x27;</span>, <span class="hljs-string">&#x27;mainType&#x27;</span>, <span class="hljs-literal">false</span>, <span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> <span class="hljs-title function_">transDict</span>(v, <span class="hljs-string">&#x27;main_task_type&#x27;</span>)]<br>      ])<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="checkPermission-检查数据权限"><a href="#checkPermission-检查数据权限" class="headerlink" title="checkPermission 检查数据权限"></a>checkPermission 检查数据权限</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// value：数据权限标识</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">checkPermission</span>(<span class="hljs-params">value: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">boolean</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a-card</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;ckp(&#x27;form:can:edit&#x27;)&quot;</span>&gt;</span>需要进行权限处理的地方<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">a-card</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; checkPermission &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/hasPermission&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">ckp</span>: checkPermission</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="storage-存储相关封装"><a href="#storage-存储相关封装" class="headerlink" title="storage 存储相关封装"></a>storage 存储相关封装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; $ls, storage, storageSess &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/storage&#x27;</span><br><span class="hljs-comment">// vue-ls</span><br>$ls.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;USER_INFO&#x27;</span>)<br>$ls.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;USER_INFO&#x27;</span>, &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;)<br>$ls.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;USER_INFO&#x27;</span>)<br>$ls.<span class="hljs-title function_">clear</span>()<br><span class="hljs-comment">// localStorage</span><br>storage.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;USER_INFO&#x27;</span>)<br>storage.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;USER_INFO&#x27;</span>, &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;)<br>storage.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;USER_INFO&#x27;</span>)<br>storage.<span class="hljs-title function_">clearAll</span>()<br><span class="hljs-comment">// sessionStorage</span><br>storageSess.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;USER_INFO&#x27;</span>)<br>storageSess.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;USER_INFO&#x27;</span>, &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;)<br>storageSess.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;USER_INFO&#x27;</span>)<br>storageSess.<span class="hljs-title function_">clearAll</span>()<br></code></pre></td></tr></table></figure><h3 id="x2F-utils-x2F-index-js"><a href="#x2F-utils-x2F-index-js" class="headerlink" title="@&#x2F;utils&#x2F;index.js"></a>@&#x2F;utils&#x2F;index.js</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 判断 val 是否为 null 或 undefined 或 空字符串</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">isNUE</span>(<span class="hljs-params">val</span>): <span class="hljs-built_in">boolean</span><br><br><span class="hljs-comment">// 判断 n 是否为数字</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">isNumeric</span>(<span class="hljs-params">n</span>): <span class="hljs-built_in">boolean</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断 fields 中的字段是否有空值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">any[]</span>&#125; <span class="hljs-variable">fields</span> - the fields to check</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">object</span>&#125; <span class="hljs-variable">ctx</span> - use this when `fields` is a string array</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">notFulfill</span>(<span class="hljs-params">fields: <span class="hljs-built_in">any</span>[], ctx: <span class="hljs-built_in">object</span></span>): <span class="hljs-built_in">boolean</span><br><br><span class="hljs-comment">//  一言 随机古诗词</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">hitokoto</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Promise</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 树形结构转为数组形式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">[]</span>&#125; <span class="hljs-variable">tree</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; key 子节点的 key，默认 *children*</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">treeToArr</span>(<span class="hljs-params">tree = [], key = <span class="hljs-string">&#x27;children&#x27;</span></span>): []<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 列表转树</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">[]</span>&#125; <span class="hljs-variable">arr</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; pidKey 指向父节点 id 的 key，默认为 *pid*</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">arrToTree</span>(<span class="hljs-params">arr = [], pidKey = <span class="hljs-string">&#x27;pid&#x27;</span></span>): []<br><br><span class="hljs-comment">// 下载文件 **非同源文件会在新标签页打开**</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">downloadFile</span>(<span class="hljs-params">url: <span class="hljs-built_in">string</span>, name = <span class="hljs-string">&#x27;&#x27;</span></span>): <span class="hljs-built_in">void</span><br><br><span class="hljs-comment">// 下载文件，blob 保存方式</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">saveBlob</span>(<span class="hljs-params">data: Blob, fileName = <span class="hljs-string">&#x27;&#x27;</span></span>)<br><br><span class="hljs-comment">// 处理 emoji 显示问题</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">decodeName</span>(<span class="hljs-params">val = <span class="hljs-string">&#x27;&#x27;</span></span>): <span class="hljs-built_in">string</span><br><br><span class="hljs-comment">// Promise.allSettled polyfill</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">allSettled</span>(<span class="hljs-params">promises: <span class="hljs-built_in">Promise</span>[]</span>): <span class="hljs-title class_">Promise</span>[]<br><br><span class="hljs-comment">// 拷贝文本到剪贴板，只在用户触发动作时有用（比如在点击事件监听器内）</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">copyToClipboard</span>(<span class="hljs-params">str: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">void</span><br><br><span class="hljs-comment">// 时间段格式化 输入 formatDuration(218923) 结果 &quot;3 分，38 秒，923 毫秒&quot;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">formatDuration</span>(<span class="hljs-params">ms: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">string</span><br><br><span class="hljs-comment">// Generates an array with the given amount of items, using the given function.</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">generateItems</span>(<span class="hljs-params">n: <span class="hljs-built_in">number</span>, fn: <span class="hljs-built_in">Function</span></span>): []<br><br><span class="hljs-comment">// 生成随机字符串</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createUniqueString</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">string</span><br><br><span class="hljs-comment">// Returns a random string with the specified length.</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">randomAlphaNumeric</span>(<span class="hljs-params">length: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">string</span><br><br><span class="hljs-comment">// Returns an object containing the parameters of the current URL.</span><br><span class="hljs-comment">// 获取 url 参数</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getURLParameters</span>(<span class="hljs-params">url: <span class="hljs-built_in">string</span> = location.search</span>):<br><br><span class="hljs-comment">// Returns a query string generated from the key-value pairs of the given object.</span><br><span class="hljs-comment">// 对象转 URL 参数字符串</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">objectToQueryString</span>(<span class="hljs-params">queryParameters: <span class="hljs-built_in">object</span></span>): <span class="hljs-built_in">string</span><br><br><span class="hljs-comment">//  Generates a UUID in a browser.Use crypto API to generate a UUID, compliant with RFC4122 version 4.</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">generateUUID</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">string</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将数组分为指定长度的更小数组</span><br><span class="hljs-comment"> * Chunks an array into smaller arrays of a specified size.</span><br><span class="hljs-comment"> * If the original array can&#x27;t be split evenly,</span><br><span class="hljs-comment"> * the final chunk will contain the remaining elements.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">chunk</span>(<span class="hljs-params">arr: [], size: <span class="hljs-built_in">number</span></span>): [][]<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将数组分为 n 个更小数组</span><br><span class="hljs-comment"> * Chunks an array into n smaller arrays.</span><br><span class="hljs-comment"> * If the original array can&#x27;t be split evenly,</span><br><span class="hljs-comment"> * the final chunk will contain the remaining elements.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">chunkIntoN</span>(<span class="hljs-params">arr: [], n: <span class="hljs-built_in">number</span></span>): [][]<br><br><span class="hljs-comment">// 平滑滚动到页面顶部</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">scrollToTop</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">void</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 模糊搜索</span><br><span class="hljs-comment"> * Returns true if needle matches haystack using a fuzzy-searching algorithm.</span><br><span class="hljs-comment"> * The method will return true only if each character in the needle can be found in the haystack</span><br><span class="hljs-comment"> * and occurs after the preceding character.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> https://www.npmjs.com/package/fuzzysearch</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; needle query word</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; haystack where to find</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> whether if needle matches haystack</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fuzzysearch</span>(<span class="hljs-params">needle: <span class="hljs-built_in">string</span>, haystack: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">boolean</span><br></code></pre></td></tr></table></figure><hr><p><em>fin.</em></p>]]></content>
    
    
    <categories>
      
      <category>Jeecg</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Vue</tag>
      
      <tag>Jeecg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jeecg-vue-tmpl 相关说明</title>
    <link href="/z/posts/afb3a8de/"/>
    <url>/z/posts/afb3a8de/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><div class="warning"><blockquote><p>Deprecated. 请使用官方最新版本。</p></blockquote></div><p>Jeecg-vue-tmpl 修改自原版 JeecgBoot 前端项目，根据自身需求进行若干修改，如果有其它需求，比如使用 online 开发功能，建议直接拉取官方代码自行修改，此自用项目模板维护至 2.4.2 版本不再更新。</p><span id="more"></span><h2 id="关于版本"><a href="#关于版本" class="headerlink" title="关于版本"></a>关于版本</h2><p>暂未发现前端版本与 jeecg 后端版本不同时有何问题，如有问题，请使用官方项目。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><p>JeecgBoot 官方文档见 <a href="http://doc.jeecg.com/2043868">http://doc.jeecg.com</a></p></li><li><p>JeecgBoot 官方更新日志见 <a href="http://www.jeecg.com/doc/log">http://www.jeecg.com/doc/log</a></p></li><li><p>自用模板项目 Readme 见 <a href="/z/2021/06/08/jeecg-vue-tmpl-readme/">Jeecg-vue-tmpl Readme</a></p></li><li><p>更多参考文档见 <a href="/z/2021/06/08/jeecg-vue-tmpl-readme/">Jeecg-vue-tmpl Readme</a> 参考链接部分</p></li></ul><h2 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h2><ol><li><p>添加部分 npm 脚本</p><ul><li><p>如 <code>yarn deploy</code> ：通过 <code>rsync</code> 命令自动部署到服务器，</p></li><li><p>如 <code>yarn scp</code> ：无 Linux 环境时，通过 <code>scp</code> 命令自动部署到服务器，</p></li><li><p>如 <code>yarn build:repo</code> ：生成打包分析文件帮助分析文件大小，</p></li><li><p>具体用法见项目 Readme： <a href="jeecg-vue-tmpl-readme">Jeecg-vue-tmpl Readme</a>。</p></li></ul></li><li><p>添加 git hooks</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;gitHooks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;pre-commit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lint-staged&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;lint-staged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;*.&#123;js,vue&#125;&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;vue-cli-service lint&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;git add&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>移除 online 开发部分，原因是占用体积较大且暂时未用到，如需使用，拉取官方前端代码自行使用</p></li><li><p>移除自带地区选择组件</p></li><li><p>添加部分依赖</p><ul><li><p><code>moment-range</code> : Fancy date ranges for Moment.js，日期范围计算</p></li><li><p><code>numeral</code>： Format and manipulate numbers，数字格式化、精确计算</p></li><li><p><code>v-distpicker</code> : 省市区下拉选择框</p></li><li><p><code>@vue/eslint-config-standard</code>： eslint 之 standard 规则</p></li><li><p><code>compression-webpack-plugin</code> ：打包时进行 gzip 压缩</p></li><li><p><code>lint-staged</code> ：往 git 提交代码时进行 eslint 校验</p></li><li><p><code>serve</code>： 本地静态服务器</p></li><li><p><code>vue-svg-loader</code>： Use SVG files as Vue Components，自定义图标配合 <code>&lt;a-icon /&gt;</code> 使用</p></li></ul></li><li><p>添加 <code>jsconfig.json</code> 文件，使 vscode 提供智能补全等功能</p></li><li><p>添加 vscode 工作区设置文件，扩展推荐文件，建议使用 vscode 并安装相关插件进行开发</p></li><li><p>对整体代码按 eslint 规则格式进行 fix</p></li><li><p>添加环境变量文件，区分开发与生产环境使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs env">NODE_ENV = &#x27;development&#x27;<br># API 接口地址<br>VUE_APP_BASE_API = &#x27;&#x27;<br># 系统名称<br>VUE_APP_LOGO_TITLE = &#x27;Admin&#x27;<br># [暂不可用] 是否需要错误上报（钉钉机器人提醒）<br>VUE_APP_NEED_REPO = &#x27;no&#x27;<br></code></pre></td></tr></table></figure></li><li><p>配置 eslint 规则，主要使用 eslint 官方推荐规则、vue 官方推荐规则与 standard 规则，并忽略部分难以修改的 jeecg 代码</p></li><li><p>修改 <code>vue.config.js</code> 配置文件</p><ul><li><p>官方参考文档 <a href="https://cli.vuejs.org/zh/config/">https://cli.vuejs.org/zh/config/</a></p></li><li><p>moment 语言包只加载中文</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">configureWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br> <span class="hljs-comment">// moment 语言包只加载 zh-cn; load `moment/locale/zh-cn.js`</span><br> config.<span class="hljs-property">plugins</span>.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">ContextReplacementPlugin</span>(<span class="hljs-regexp">/moment[/\\]locale$/</span>, <span class="hljs-regexp">/zh-cn/</span>))<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p>配置 svg loader</p></li><li><p>打包文件优化，合并小文件</p></li><li><p>配置 gzip 压缩，提高加载速度</p></li><li><p>修改 ant-design-vue 主题色</p></li><li><p>配置开发环境代理</p></li></ul></li><li><p>添加 tinymce powepaste 插件，修改皮肤文件结构</p></li><li><p>将一些在线图标改为本地图标，置于 <code>public/default</code> 文件夹下</p></li><li><p>将 <code>polyfill.js</code> 替换为压缩后的 <code>polyfill.min.js</code></p></li><li><p>打包完后可在 <code>index.html</code> 中直接修改接口前缀地址，方便部署时修改</p></li><li><p>添加自动生成组件文件的 nodejs 脚本</p></li><li><p>添加路由切换时的 transition 效果</p></li><li><p>将 <code>~@/assets/less/common.less</code> 通用样式文件置于 <code>App.vue</code> 中加载，不再在组件中重复加载</p></li><li><p>修改项目默认配置项 <code>@/defaultSettings.js</code></p></li><li><p>在 <code>@/main.js</code> 中移除不用的 import</p></li><li><p>在 <code>@/permission.js</code> 中添加不勾选自动登录时的处理办法</p></li><li><p>在 <code>@/api/manage.js</code> 中添加相关 JSDoc 声明，方便类型联想；并添加导出后端生成文件方法：<code>getBlob</code></p></li><li><p>修改一些样式置于<code>@/assets/less/cover.less</code></p></li><li><p>按自身需求修改 <code>@/components/chart</code> 下的图表组件</p></li><li><p>修改 tinymce 富文本编辑器组件 <code>JEditor</code> 为如下效果<br><img src="https://upload-bbs.mihoyo.com/upload/2022/05/18/260511332/e15872a1e2f258a86e9e3a5f029eba8e_8169569522840383566.png" alt="tinymce"></p></li><li><p>添加时间选择组件 <code>JTime</code></p></li><li><p>添加上传按钮组件 <code>JUploadBtn</code> 、拖拽上传图片组件 <code>JUploadImageD</code></p></li><li><p>添加自动拼接 jeecg 文件前缀 url 的组件 <code>MyImg</code></p></li><li><p>添加搜索筛选组件 <code>SearchFilter</code> 与模板中的 switch case 组件 <code>&lt;v-switch /&gt;</code></p></li><li><p>修改 Logo 组件、搜索菜单组件，添加时间显示组件、待办事项组件</p></li><li><p>添加百分比输入组件 <code>PercentNum</code></p></li><li><p><code>@/icons </code>为自定义图标存放处</p></li><li><p>修改通用列表混入文件 <code>@/mixins/JeecgListMixin.js</code></p></li><li><p>hack router push callback</p></li><li><p>添加工具方法 点击复制 <code>@/src/utils/clipboard.js</code></p></li><li><p>于 <code>@/src/utils/dicts.js</code> 添加数据字典翻译函数 <code>transDict</code> 并且将其添加到过滤器</p></li><li><p>于 <code>@/src/utils/hasPermission.js </code>中添加当 <code>v-has</code> 指令不便使用时的替代函数： <code>checkPermission</code></p></li><li><p>添加自用工具方法 <code>@/src/utils/index.js</code></p></li><li><p>封装 axios : <code>@/src/utils/request.js</code></p></li><li><p>封装 localStorage、sessionStorage：<code>@/src/utils/storage.js</code></p></li><li><p><code>@/src/utils/validate.js</code> 中添加身份证号校验</p></li><li><p>layouts 移至 views 文件夹中</p></li></ol><h2 id="组件文档"><a href="#组件文档" class="headerlink" title="组件文档"></a>组件文档</h2><p>Jeecg 组件文档见官网文档或 <code>docs</code>文件夹下或各组件位置处的 md 文件</p><p>自用文档见 <a href="/z/2021/06/08/jeecg-vue-tmpl-comp-doc/">Jeecg-vue-tmpl 自用文档</a></p><hr><p><em>fin.</em></p>]]></content>
    
    
    <categories>
      
      <category>Jeecg</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Vue</tag>
      
      <tag>Jeecg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jeecg-vue-tmpl Readme</title>
    <link href="/z/posts/59df13e1/"/>
    <url>/z/posts/59df13e1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><div class="warning"><blockquote><p>Deprecated. 请使用官方最新版本。</p></blockquote></div><p>JeecgBoot 前端初始项目</p><span id="more"></span><h2 id="项目下载和运行"><a href="#项目下载和运行" class="headerlink" title="项目下载和运行"></a>项目下载和运行</h2><ul><li><p>拉取项目代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://gitlab.com/wuniutech/jeecg-vue-temp.git<br><span class="hljs-built_in">cd</span>  jeecg-vue-temp<br>git checkout v2.4.0<br></code></pre></td></tr></table></figure></li><li><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yarn run instal<br></code></pre></td></tr></table></figure></li><li><p>开发模式运行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yarn serve</span><br></code></pre></td></tr></table></figure><blockquote><p>附加选项：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">--open    在服务器启动时打开浏览器<br>--copy    在服务器启动时将 URL 复制到剪切版<br>--mode    指定环境模式 （默认值：development)<br>--host    指定 host （默认值：0.0.0.0)<br>--port    指定 port （默认值：8080)<br>--https   使用 https （默认值：<span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure></li><li><p>编译项目</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yarn build</span><br></code></pre></td></tr></table></figure><blockquote><p>附加选项：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">--mode        指定环境模式 （默认值：production)<br>--dest        指定输出目录 （默认值：dist)<br>--modern      面向现代浏览器带自动回退地构建应用<br>--no-clean    在构建项目之前不清除目标目录<br>--report      生成 report.html 以帮助分析包内容<br>--report-json 生成 report.json 以帮助分析包内容<br>--watch       监听文件变化<br></code></pre></td></tr></table></figure></li><li><p>校验并修复文件中的错误</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yarn lint</span><br></code></pre></td></tr></table></figure><blockquote><p>附加选项：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">--no-fix      只校验而不修复错误<br></code></pre></td></tr></table></figure></li><li><p>编译并部署项目到<strong>测试</strong>服务器 (<em>需 WSL 环境</em>)</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yarn deploy</span><br></code></pre></td></tr></table></figure></li><li><p>无 WSL 环境时使用 scp 部署</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">yarn build <span class="hljs-meta">&amp;&amp; yarn scp</span><br></code></pre></td></tr></table></figure></li><li><p>本地预览打包完的项目</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yarn preview</span><br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><p><a href="http://doc.jeecg.com/1273752">Jeecg-Boot 技术文档</a></p></li><li><p><a href="https://vuecomponent.github.io/ant-design-vue/docs/vue/introduce-cn">Ant Design Vue 文档</a></p></li><li><p><a href="https://github.com/zhangdaiscott/jeecg-boot/tree/master/ant-design-jeecg-vue/src/router/README.md">路由&#x2F;菜单说明</a></p></li><li><p><a href="https://github.com/zhangdaiscott/jeecg-boot/tree/master/ant-design-jeecg-vue/src/defaultSettings.js">默认配置项</a> - Antdv Pro</p></li><li><p><a href="https://eslint.cn/docs/rules/">eslint 规则</a></p></li><li><p><a href="https://eslint.vuejs.org/rules/">eslint-plugin-vue 规则</a></p></li><li><p><a href="https://cn.vuejs.org/v2/guide">Vue 文档</a></p></li><li><p><a href="https://cli.vuejs.org/zh/guide">Vue-CLI 文档</a></p></li><li><p><a href="https://github.com/vuejs/vue-docs-zh-cn">Vue Docs 中文文档翻译合集</a></p></li><li><p><a href="https://antv.alipay.com/zh-cn/index.html">@antv&#x2F;g2</a> - AntV 数据可视化图表</p></li><li><p><a href="https://viserjs.github.io/docs.html#/viser/guide/installation">Viser-Vue</a>  - antv&#x2F;g2 封装实现</p></li><li><p><a href="https://viserjs.github.io/demo.html#/viser/bar/basic-bar">Viser-Vue Demo</a> - Viser 示例</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Jeecg</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Vue</tag>
      
      <tag>Jeecg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决 AMD 笔记本不插电源时屏幕偏暗的问题</title>
    <link href="/z/posts/6b7b7700/"/>
    <url>/z/posts/6b7b7700/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><blockquote><p>办法：关掉显卡设置里的 Vari-Bright 选项</p></blockquote><span id="more"></span><p>最近换了锐龙版的笔记本，用着还不错，就是不插电源时看屏幕亮度不太适应，整体偏暗，有点费眼，差点就觉得 AMD 不 Yes 了。然后网上一顿找，发现在 AMD 显卡设置一个选项就好了。想起之前的笔记本好像也是这样，也是在英特尔核显设置里关掉省电就好了……[允悲]。设置里说 Vari-Bright 是根据图像内容自适应调整显示亮度来省电，通过调整伽马等级来补偿亮度变化，从而保持色彩保真度。说的是挺好，但是眼睛难受，还是关了吧。</p><p>具体步骤：</p><ul><li>打开 AMD Radeon Software，点击右上角的设置图标，</li></ul><p><img src="https://pic.rmb.bdstatic.com/bjh/events/ee8b87a4d57efc8a42ec8f232148ae48.jpeg" alt="open_ars_1"></p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/5d09436a935aee025dd60fcd34185a25.jpeg" alt="open_ars_2"></p><ul><li>找到设置里的显示器选项，关掉显示选项里的 Vari-Bright。</li></ul><p><img src="https://pic.rmb.bdstatic.com/bjh/events/fca69fba1d4193ba3239a7bb9bec25d5.jpeg" alt="disable_vari-bright"></p><p>感觉 AMD 的笔记本都可以通过这个办法来解决不插电源时屏幕暗的问题。</p><blockquote><p>REF: <a href="https://byokpg.smartapps.cn/pages/pb/pb?tid=7175083311">https://byokpg.smartapps.cn/pages/pb/pb?tid=7175083311</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AMD</tag>
      
      <tag>Screen</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 Onekey Theater 改善屏幕显示效果</title>
    <link href="/z/posts/83747ad2/"/>
    <url>/z/posts/83747ad2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>Onekey Theater（一键影音），它是联想笔记本带的一键影音功能，使用它能够更改笔记本的显示效果和音效，以此模仿电影院的效果，为用户带来更好是视听效果及享受。</p></blockquote><span id="more"></span><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>之前的联想笔记本自带的程序，感觉有些用处就没卸载留到了现在，图片模式可以明显改善屏幕泛白问题，就是个辅助作用，应该是调了 Γ 值，然后屏幕就偏黑，不白了，其他模式倒是没怎么用到。现在换了台式机，安装之后也管用。</p><p><del>其实是我自己的屏幕太垃圾了 [允悲]… 要想彻底解决，就得换个好显示器了。</del></p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>放一张桌面的图片</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/42d27c1069ec13e1a0fd692e30cc56cc.jpeg"></p><p>截屏看不出来，用手机拍照对比一下吧。左边为开启之前的，右边为开启之后的效果。</p><div style="display:flex"><img style="width:45%;margin-right:10px" src="https://pic.rmb.bdstatic.com/bjh/events/a5f368275a80299e29c7447f054ed84b.jpeg"> <img style="width:45%" src="https://pic.rmb.bdstatic.com/bjh/events/499952aa4a856cc289f9af21c75734f8.jpeg"></div><hr><p>视频对照：</p><div><video style="margin:0" width=300 height=400 controls src="https://1500002267.vod2.myqcloud.com/6c9892d9vodcq1500002267/900e2efc387702304872286767/u6dDGzM1PhEA.mp4"></video></div><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://files-cdn.cnblogs.com/files/blogs/752151/Onekey_Theater.zip">Onekey Theater.zip</a></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Screen</tag>
      
      <tag>Onekey_Theater</tag>
      
      <tag>Software</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo + typora 图片插入解决办法</title>
    <link href="/z/posts/12a70b22/"/>
    <url>/z/posts/12a70b22/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><p>Typora 是一款知名的 Markdown 编辑器，简单好用，体验良好。使用 hexo 搭建好博客后，主要是用 Markdown 来编写博客，typora 便是我的首选编辑器。但直接使用 typora 编写的 Markdown 文件，图片路径可能存在问题，就导致页面上图片无法显示。自己去改路径的话那就很麻烦了，好在  Typora 支持拖拽或复制来插入图片，并且可以复制到指定路径，或直接上传到图床，这就非常方便了。</p><span id="more"></span><h2 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h2><p>博客的 Markdown 文档都存储在 <code>source/_posts</code> 下，然后博客相关图片都存在 <code>source/images</code> 下，接着来修改 typora 的设置。</p><p>打开 <code>文件 - 偏好设置 - 图像</code> 进行修改如下图修改</p><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/05/260511332/b3c14f030f1b7bed65563ad2e3d75e6e_8404618712675426050.png" alt="typora-setting-image"></p><p>这样拖拽或粘贴过来的图片会自动复制到 <code>source/images</code> 下面，不过这样只是可以在 typora 中查看图片了，要想在 hexo 中查看就需要图片路径与服务器中相符合， <code>source/images</code> 文件夹下的图片在 hexo 中可以用如 <code>/images/abc.png</code> 的路径访问到，而 typora 可以设置图片根目录，设置完了后图片路径都是 <code>/images/abc.png</code> 这样的，这样一配合就解决了图片路径问题，具体做法是在 <code>格式 - 图像 - 设置图片根目录</code> 中 将 <code>source</code> 文件夹设置为图片根目录，也可在每篇 Markdown 文档中 YAML Front Matter 中添加 <code>typora-root-url: ..</code>，或者直接在 <code>scaffolds</code> 中的模板里直接添加，这样每次 <code>hexo new post</code> 时就会自动生成了。</p><p>&#x3D;&#x3D;注意先设置图片根目录，再进行图片的插入。&#x3D;&#x3D;</p><h2 id="上传到图床"><a href="#上传到图床" class="headerlink" title="上传到图床"></a>上传到图床</h2><p>上边的方法适用于博客文件放在根目录的情况，如果文件放在子目录下的话暂时没找到解决办法，便直接上传到图床采用绝对路径了。</p><p>在 typora 里可以设置插入图片时自动上传，如下图设置，这里使用 <code>PicGo</code> App 来上传图片。</p><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/05/260511332/674295d13cd41f130573cfa5fb8d09e5_1232174737957433436.png" alt="BaiduShurufa_2021-5-21_20-12-18"></p><p>PicGo 可以点击下载按钮到浏览器下载，安装完成后配置好图床，就可以上传图片了。这里使用 GitHub 图床（SM.MS 体验应该更好）。</p><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/05/260511332/2e9e821e12eddbadeac9dde9a53dbbf9_2453065688534570503.png" alt="image-20210521202345259"></p><p>具体就是在 GitHub 新建一个仓库专门用来存放图片，然后在 PicGo 里填写 用户名&#x2F;仓库名，分支一般写 main ，token 在 GitHub 设置里生成。</p><p>下边是 PicGo 文档里 GitHub 图床的详细步骤，其他图床可参考官方文档。<br>如果 GitHub 图片访问过慢的话，可以将自定义域名设置为 <code>https://cdn.jsdelivr.net/gh/&#123;用户名&#125;/&#123;仓库名&#125;@&#123;分支名&#125;</code></p><blockquote><p><strong>1.</strong> 首先你得有一个 GitHub 账号。注册 GitHub 就不用我多言。</p><p><strong>2.</strong> 新建一个仓库</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/ab89561593817c156265527cf8b8dc53.png" alt="img"></p><p>记下你取的仓库名。</p><p><strong>3.</strong> 生成一个 token 用于 PicGo 操作你的仓库：</p><p>访问：<a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></p><p>然后点击<code>Generate new token</code>。</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/8e70f6462768dbab79f7510bcf128e2e.png" alt="img"></p><p>把 repo 的勾打上即可。然后翻到页面最底部，点击<code>Generate token</code>的绿色按钮生成 token。</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/3bde3bb9b7f2d7716404c9eed1f21d53.png" alt="img"></p><p><strong>注意：</strong>这个 token 生成后只会显示一次！你要把这个 token 复制一下存到其他地方以备以后要用。</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/39f88acf6f5890b5eed5ae6caaa0c341.png" alt="img"></p><p><strong>4.</strong> 配置 PicGo</p><p><strong>注意：</strong>仓库名的格式是<code>用户名/仓库</code>，比如我创建了一个叫做<code>test</code>的仓库，在 PicGo 里我要设定的仓库名就是<code>Molunerfinn/test</code>。一般我们选择<code>main</code>分支即可。然后记得点击确定以生效，然后可以点击<code>设为默认图床</code>来确保上传的图床是 GitHub。</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/c39ff4607de74eb6f9093539fa1304b8.png" alt="img"></p><p>至此配置完毕，已经可以使用了。当你上传的时候，你会发现你的仓库里也会增加新的图片了：</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/f88f55737ac44d0cd193fbd103ca09d1.png" alt="img"></p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/qq_32623363/article/details/100524856">typora + hexo 博客中插入图片</a></p><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html">PicGo 文档</a></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 的基本使用</title>
    <link href="/z/posts/f1f3f3e5/"/>
    <url>/z/posts/f1f3f3e5/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><blockquote><p>本文记录 Git 的常用命令与 Git GUI 软件的基本使用。</p></blockquote><span id="more"></span><style>.warning-outdate,.post-time,.post-classify,footer,.post-nav,.sidebar-nav-item[title=HOME],.sidebar-nav-item[title="站点概览"]{display:none!important}.sidebar{background-size:0!important;}#live2d,.fireworks{opacity:0!important;}*{cursor:auto!important;}</style><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><ul><li>Git <a href="http://git-scm.com/">官方下载</a> <a href="https://pc.qq.com/detail/13/detail_22693.html">备用下载</a></li><li>SourceTree <a href="https://www.sourcetreeapp.com/">官网下载</a> <a href="https://pc.qq.com/detail/17/detail_23237.html">备用下载</a></li><li>GithubDesktop <a href="https://desktop.github.com/">官网下载</a></li></ul><h2 id="SourceTree"><a href="#SourceTree" class="headerlink" title="SourceTree"></a>SourceTree</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><img src="https://pic.rmb.bdstatic.com/bjh/events/6ff31ac2bcb38b7610b3f0d47c33cb53.png" alt="setup"></p><h3 id="设置提交名字与邮箱"><a href="#设置提交名字与邮箱" class="headerlink" title="设置提交名字与邮箱"></a>设置提交名字与邮箱</h3><p><img src="https://pic.rmb.bdstatic.com/bjh/events/04e1aeab552892a61af15fba74011aad.png" alt="name_and_email"></p><h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><ol><li><p>点击 Clone 按钮，填入远程仓库地址，选择保存位置进行克隆</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/d686f86a9475d4ca337c433f32a8de4b.png" alt="clone"></p></li><li><p>克隆完成后会在会自动打开仓库选项卡，下次打开 SourceTree 时已克隆的仓库会展示在 Local 页面</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/2073634b2d325155e3ef0d4aa5f1ad76.png" alt="local"></p></li></ol><h3 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h3><ol><li><p>点击 Create 按钮，输入保存路径与仓库名字点击创建即可</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/a0ec5299f0ab0aa08a4bd7110f2ce772.png" alt="create_local"></p></li></ol><h3 id="添加已存在的本地仓库"><a href="#添加已存在的本地仓库" class="headerlink" title="添加已存在的本地仓库"></a>添加已存在的本地仓库</h3><ol><li><p>点击 Add 按钮，选择想要添加的本地仓库路径后点击添加</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/a757567ef0a506b7e40c10ff3d45ab66.png" alt="add_local"></p></li><li><p>之后已添加的仓库会显示在 Local 页面</p></li></ol><h3 id="从远程仓库拉取变更"><a href="#从远程仓库拉取变更" class="headerlink" title="从远程仓库拉取变更"></a>从远程仓库拉取变更</h3><ol><li><p>从首页双击进入选择的仓库，点击拉取按钮</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/ff5e9153e9a7c3fe45bbfd60b4405de5.png" alt="btns"></p></li><li><p>然后弹窗确认拉取</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/26b814e3286001f70350d4057e7b01ae.png" alt="pull"></p></li><li><p>新增的文件会显示在 History 里</p></li></ol><h3 id="提交与推送"><a href="#提交与推送" class="headerlink" title="提交与推送"></a>提交与推送</h3><ol><li><p>进入仓库页面后选择左侧面板的文件状态，会展示当前仓库的改动状况</p></li><li><p>选中某个文件可以可视化地比较当前文件的改动</p></li><li><p>点击文件右侧加号可以暂存文件，实际上是执行 <code>git add</code> 命令</p></li><li><p>在下方输入框里输入提交信息，点击提交，就完成了一个本地提交，实际上执行了 <code>git commit -m &quot;message&quot;</code> 命令</p></li><li><p>然后点击推送按钮推送到远程仓库，也可以在提交时勾选立即推送，实际是执行 <code>git push</code> 命令</p></li><li><p>推送完成后可以去 History 里查看自己的提交</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/87b9ffbd716a694836b640011558d57a.png" alt="diff"></p></li></ol><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><ol><li><p>点击上方按钮栏的分支按钮，在弹出的界面里可以新建分支，创建后会切换到该分支</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/965c125ddabf2bb3f6e80b0dc0c1090d.png" alt="newb"></p></li><li><p>在左侧面板的“远程”下，列出了当前远程仓库的所有分支。右键某个分支，在弹出菜单中选择“检出 &lt;分支名&gt;”可以切换到改分支，实际上是执行命令<code>git checkout &lt;分支名&gt;</code></p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/49418e577f81800911a2c04cc87dcb30.png" alt="branch"></p></li><li><p>左侧面板的“分支”下，同理切换本地分支</p></li><li><p>要合并分支，选择待合并分支，例如 <code>wo</code>，然后点击右键，在弹出菜单中选择“合并 wo 至当前分支”，实际上是执行 <code>git merge wo</code> 命令</p><p><img src="https://pic.rmb.bdstatic.com/bjh/events/34fbea4a6b79b68883ef74064bb513a0.png" alt="merge"></p></li></ol><h2 id="GithubDesktop"><a href="#GithubDesktop" class="headerlink" title="GithubDesktop"></a>GithubDesktop</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/19/260511332/dbfe67a622be271b537a17f8db0e5c98_8608328698946349255.png" alt="Screenshot_2022-04-19_18-35-52"></p><h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><ul><li>新建仓库： <kbd>Ctrl + N</kbd></li><li>打开本地仓库： <kbd>Ctrl + O</kbd></li><li>克隆仓库： <kbd>Ctrl + Shift + O</kbd></li></ul><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/19/260511332/374c8662073375c8ccbf945bbf86dce3_7139911238845832139.png" alt="newrepo"></p><h3 id="拉取（pull）"><a href="#拉取（pull）" class="headerlink" title="拉取（pull）"></a>拉取（pull）</h3><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/19/260511332/917b53ec52cc48b7aae833298ded834c_5625761703149839614.png" alt="pull"></p><h3 id="提交（commit）"><a href="#提交（commit）" class="headerlink" title="提交（commit）"></a>提交（commit）</h3><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/19/260511332/f65aa4b5f71c6bbbc60f57e5ebe15d9c_1625774561531924723.png" alt="commit"></p><h3 id="推送（push）"><a href="#推送（push）" class="headerlink" title="推送（push）"></a>推送（push）</h3><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/19/260511332/e924c745db323fe79a6e7cf7d0f357ca_1851264763110611287.png" alt="push"></p><h3 id="切换分支（checkout）"><a href="#切换分支（checkout）" class="headerlink" title="切换分支（checkout）"></a>切换分支（checkout）</h3><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/19/260511332/7b4591cb72d08b4adc5524792ebced9d_5829883107185535958.png" alt="branch"></p><h3 id="提交历史"><a href="#提交历史" class="headerlink" title="提交历史"></a>提交历史</h3><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/19/260511332/d55c83016c350cd33ae93ba8bfe8c7e8_6842425874499219688.png" alt="history"></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/19/260511332/3bc9d5f2c49a713c776e69676d7d56c5_5255755117711546545.png" alt="gitcmds"><em>常用的6个命令，图片来自 <a href="http://www.ruanyifeng.com/">www.ruanyifeng.com</a></em></p><h3 id="初始化-x2F-克隆仓库"><a href="#初始化-x2F-克隆仓库" class="headerlink" title="初始化&#x2F;克隆仓库"></a>初始化&#x2F;克隆仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在当前目录新建一个 Git 仓库</span><br>$ git init<br><br><span class="hljs-comment"># 新建一个目录，将其初始化为 Git 仓库</span><br>$ git init [project-name]<br><br><span class="hljs-comment"># 下载一个项目和它的整个代码历史</span><br>$ git <span class="hljs-built_in">clone</span> [url]<br></code></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>Git 的设置文件为 <code>.gitconfig</code>，全局配置放在用户目录（<code>~</code> 或 <code>C:\Users\&lt;username&gt;</code>）下，项目专用配置可以放在项目目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示当前的 Git 配置</span><br>$ git config --list<br><br><span class="hljs-comment"># 编辑 Git 配置文件</span><br>$ git config -e [--global]<br><br><span class="hljs-comment"># 设置提交代码时的用户信息</span><br>$ git config [--global] user.name <span class="hljs-string">&quot;[name]&quot;</span><br>$ git config [--global] user.email <span class="hljs-string">&quot;[email address]&quot;</span><br></code></pre></td></tr></table></figure><h3 id="增加-x2F-删除文件"><a href="#增加-x2F-删除文件" class="headerlink" title="增加&#x2F;删除文件"></a>增加&#x2F;删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加指定文件到暂存区</span><br>$ git add [file1] [file2] ...<br><br><span class="hljs-comment"># 添加指定目录到暂存区，包括子目录</span><br>$ git add [<span class="hljs-built_in">dir</span>]<br><br><span class="hljs-comment"># 添加当前目录的所有文件到暂存区</span><br>$ git add .<br><br><span class="hljs-comment"># 添加每个变化前，都会要求确认</span><br><span class="hljs-comment"># 对于同一个文件的多处变化，可以实现分次提交</span><br>$ git add -p<br><br><span class="hljs-comment"># 删除工作区文件，并且将这次删除放入暂存区</span><br>$ git <span class="hljs-built_in">rm</span> [file1] [file2] ...<br><br><span class="hljs-comment"># 停止追踪指定文件，但该文件会保留在工作区</span><br>$ git <span class="hljs-built_in">rm</span> --cached [file]<br><br><span class="hljs-comment"># 改名文件，并且将这个改名放入暂存区</span><br>$ git <span class="hljs-built_in">mv</span> [file-original] [file-renamed]<br></code></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 提交暂存区到仓库区</span><br>$ git commit -m [message]<br><br><span class="hljs-comment"># 提交暂存区的指定文件到仓库区</span><br>$ git commit [file1] [file2] ... -m [message]<br><br><span class="hljs-comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br>$ git commit -a<br><br><span class="hljs-comment"># 提交时显示所有diff信息</span><br>$ git commit -v<br><br><span class="hljs-comment"># 使用一次新的commit，替代上一次提交</span><br><span class="hljs-comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br>$ git commit --amend -m [message]<br><br><span class="hljs-comment"># 重做上一次commit，并包括指定文件的新变化</span><br>$ git commit --amend [file1] [file2] ...<br></code></pre></td></tr></table></figure><h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载远程仓库的所有变动</span><br>$ git fetch [remote]<br><br><span class="hljs-comment"># 显示所有远程仓库</span><br>$ git remote -v<br><br><span class="hljs-comment"># 显示某个远程仓库的信息</span><br>$ git remote show [remote]<br><br><span class="hljs-comment"># 增加一个新的远程仓库，并命名</span><br>$ git remote add [shortname] [url]<br><br><span class="hljs-comment"># 取回远程仓库的变化，并与本地分支合并</span><br>$ git pull [remote] [branch]<br><br><span class="hljs-comment"># 上传本地指定分支到远程仓库</span><br>$ git push [remote] [branch]<br><br><span class="hljs-comment"># 强行推送当前分支到远程仓库，即使有冲突</span><br>$ git push [remote] --force<br><br><span class="hljs-comment"># 推送所有分支到远程仓库</span><br>$ git push [remote] --all<br></code></pre></td></tr></table></figure><h3 id="分支-1"><a href="#分支-1" class="headerlink" title="分支"></a>分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出所有本地分支</span><br>$ git branch<br><br><span class="hljs-comment"># 列出所有远程分支</span><br>$ git branch -r<br><br><span class="hljs-comment"># 列出所有本地分支和远程分支</span><br>$ git branch -a<br><br><span class="hljs-comment"># 新建一个分支，但依然停留在当前分支</span><br>$ git branch [branch-name]<br><br><span class="hljs-comment"># 新建一个分支，并切换到该分支</span><br>$ git checkout -b [branch]<br><br><span class="hljs-comment"># 新建一个分支，指向指定commit</span><br>$ git branch [branch] [commit]<br><br><span class="hljs-comment"># 新建一个分支，与指定的远程分支建立追踪关系</span><br>$ git branch --track [branch] [remote-branch]<br><br><span class="hljs-comment"># 切换到指定分支，并更新工作区</span><br>$ git checkout [branch-name]<br><br><span class="hljs-comment"># 切换到上一个分支</span><br>$ git checkout -<br><br><span class="hljs-comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br>$ git branch --set-upstream [branch] [remote-branch]<br><br><span class="hljs-comment"># 合并指定分支到当前分支</span><br>$ git merge [branch]<br><br><span class="hljs-comment"># 选择一个commit，合并进当前分支</span><br>$ git cherry-pick [commit]<br><br><span class="hljs-comment"># 删除分支</span><br>$ git branch -d [branch-name]<br><br><span class="hljs-comment"># 删除远程分支</span><br>$ git push origin --delete [branch-name]<br>$ git branch -dr [remote/branch]<br></code></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出所有tag</span><br>$ git tag<br><br><span class="hljs-comment"># 新建一个tag在当前commit</span><br>$ git tag [tag]<br><br><span class="hljs-comment"># 新建一个tag在指定commit</span><br>$ git tag [tag] [commit]<br><br><span class="hljs-comment"># 删除本地tag</span><br>$ git tag -d [tag]<br><br><span class="hljs-comment"># 删除远程tag</span><br>$ git push origin :refs/tags/[tagName]<br><br><span class="hljs-comment"># 查看tag信息</span><br>$ git show [tag]<br><br><span class="hljs-comment"># 提交指定tag</span><br>$ git push [remote] [tag]<br><br><span class="hljs-comment"># 提交所有tag</span><br>$ git push [remote] --tags<br><br><span class="hljs-comment"># 新建一个分支，指向某个tag</span><br>$ git checkout -b [branch] [tag]<br></code></pre></td></tr></table></figure><h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示有变更的文件</span><br>$ git status<br><br><span class="hljs-comment"># 显示当前分支的版本历史</span><br>$ git <span class="hljs-built_in">log</span><br><br><span class="hljs-comment"># 显示commit历史，以及每次commit发生变更的文件</span><br>$ git <span class="hljs-built_in">log</span> --<span class="hljs-built_in">stat</span><br><br><span class="hljs-comment"># 搜索提交历史，根据关键词</span><br>$ git <span class="hljs-built_in">log</span> -S [keyword]<br><br><span class="hljs-comment"># 显示某个commit之后的所有变动，每个commit占据一行</span><br>$ git <span class="hljs-built_in">log</span> [tag] HEAD --pretty=format:%s<br><br><span class="hljs-comment"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br>$ git <span class="hljs-built_in">log</span> [tag] HEAD --grep feature<br><br><span class="hljs-comment"># 显示某个文件的版本历史，包括文件改名</span><br>$ git <span class="hljs-built_in">log</span> --follow [file]<br>$ git whatchanged [file]<br><br><span class="hljs-comment"># 显示指定文件相关的每一次diff</span><br>$ git <span class="hljs-built_in">log</span> -p [file]<br><br><span class="hljs-comment"># 显示过去5次提交</span><br>$ git <span class="hljs-built_in">log</span> -5 --pretty --oneline<br><br><span class="hljs-comment"># 显示所有提交过的用户，按提交次数排序</span><br>$ git shortlog -sn<br><br><span class="hljs-comment"># 显示指定文件是什么人在什么时间修改过</span><br>$ git blame [file]<br><br><span class="hljs-comment"># 显示暂存区和工作区的差异</span><br>$ git diff<br><br><span class="hljs-comment"># 显示暂存区和上一个commit的差异</span><br>$ git diff --cached [file]<br><br><span class="hljs-comment"># 显示工作区与当前分支最新commit之间的差异</span><br>$ git diff HEAD<br><br><span class="hljs-comment"># 显示两次提交之间的差异</span><br>$ git diff [first-branch]...[second-branch]<br><br><span class="hljs-comment"># 显示今天你写了多少行代码</span><br>$ git diff --shortstat <span class="hljs-string">&quot;@&#123;0 day ago&#125;&quot;</span><br><br><span class="hljs-comment"># 显示某次提交的元数据和内容变化</span><br>$ git show [commit]<br><br><span class="hljs-comment"># 显示某次提交发生变化的文件</span><br>$ git show --name-only [commit]<br><br><span class="hljs-comment"># 显示某次提交时，某个文件的内容</span><br>$ git show [commit]:[filename]<br><br><span class="hljs-comment"># 显示当前分支的最近几次提交</span><br>$ git reflog<br></code></pre></td></tr></table></figure><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 恢复暂存区的指定文件到工作区</span><br>$ git checkout [file]<br><br><span class="hljs-comment"># 恢复某个commit的指定文件到暂存区和工作区</span><br>$ git checkout [commit] [file]<br><br><span class="hljs-comment"># 恢复暂存区的所有文件到工作区</span><br>$ git checkout .<br><br><span class="hljs-comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br>$ git reset [file]<br><br><span class="hljs-comment"># 重置暂存区与工作区，与上一次commit保持一致</span><br>$ git reset --hard<br><br><span class="hljs-comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br>$ git reset [commit]<br><br><span class="hljs-comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br>$ git reset --hard [commit]<br><br><span class="hljs-comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br>$ git reset --keep [commit]<br><br><span class="hljs-comment"># 新建一个commit，用来撤销指定commit</span><br><span class="hljs-comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br>$ git revert [commit]<br><br><span class="hljs-comment"># 暂时将未提交的变化移除，稍后再移入</span><br>$ git stash<br>$ git stash pop<br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 生成一个可供发布的压缩包</span><br>$ git archive<br></code></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://confluence.atlassian.com/get-started-with-sourcetree/get-started-with-sourcetree-847359026.html">https://confluence.atlassian.com/get-started-with-sourcetree/get-started-with-sourcetree-847359026.html</a></p><p><a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/1317161920364578">https://www.liaoxuefeng.com/wiki/896043488029600/1317161920364578</a></p><hr><p><em>fin.</em></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Git 提交信息中使用 Emoji</title>
    <link href="/z/posts/f237058d/"/>
    <url>/z/posts/f237058d/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><!-- <p align="center">    <a href="https://gitmoji.dev">        <img src="https://cloud.githubusercontent.com/assets/7629661/20073135/4e3db2c2-a52b-11e6-85e1-661a8212045a.gif" width="456" alt="gitmoji">    </a></p> --><p><a href="https://gitmoji.dev/">Gitmoji</a> 旨在解释如何在 <strong>Git 提交消息时使用表情符号</strong>。在<strong>提交信息</strong>时<strong>使用表情符号</strong>，可以更容易地<strong>识别提交的目的或意图</strong>。</p><span id="more"></span><h2 id="Emoji-列表"><a href="#Emoji-列表" class="headerlink" title="Emoji 列表"></a>Emoji 列表</h2><p>🎨 ：优化项目结构 &#x2F; 代码格式</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:art:</span><br></code></pre></td></tr></table></figure><p>⚡️ ：性能提升</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:zap:</span><br></code></pre></td></tr></table></figure><p>🔥 ：移除代码或文件</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:fire:</span><br></code></pre></td></tr></table></figure><p>🐛 ： 修改 bug</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:bug:</span><br></code></pre></td></tr></table></figure><p>🚑️：紧急修复 &#x2F; Critical hotfix</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:ambulance:</span><br></code></pre></td></tr></table></figure><p>✨ : 引入新功能</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:sparkles:</span><br></code></pre></td></tr></table></figure><p>📝 ：更新文档</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:memo:</span><br></code></pre></td></tr></table></figure><p>🚀 ： 部署工作</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:rocket:</span><br></code></pre></td></tr></table></figure><p>💄 ： UI &#x2F; 样式更新</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:lipstick:</span><br></code></pre></td></tr></table></figure><p>🎉 ： 初始化项目</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:tada:</span><br></code></pre></td></tr></table></figure><p>✅ ： 添加或更新测试用例</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:white_check_mark:</span><br></code></pre></td></tr></table></figure><p>🔒️ ： 修复安全问题</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:lock:</span><br></code></pre></td></tr></table></figure><p>🔖 : 发布版本 &#x2F; 创建 tag</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:bookmark:</span><br></code></pre></td></tr></table></figure><p>🚨 ：修复编译器 &#x2F; linter 报错</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:rotating_light:</span><br></code></pre></td></tr></table></figure><p>🚧 ： 建设中 &#x2F; WIP &#x2F; Work in progress.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:construction:</span><br></code></pre></td></tr></table></figure><p>💚 ： 修复 CI 构建问题</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:green_heart:</span><br></code></pre></td></tr></table></figure><p>⬇️ ： 依赖版本降级</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:arrow_down:</span><br></code></pre></td></tr></table></figure><p>⬆️ ： 依赖版本升级</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:arrow_up:</span><br></code></pre></td></tr></table></figure><p>📌 ：锁定依赖版本</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:pushpin:</span><br></code></pre></td></tr></table></figure><p>👷 ：添加或更新自动构建 &#x2F; 持续集成</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:construction_worker:</span><br></code></pre></td></tr></table></figure><p>📈 ： 添加或更新分析追踪代码</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:chart_with_upwards_trend:</span><br></code></pre></td></tr></table></figure><p>♻️ ：代码重构</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:recycle:</span><br></code></pre></td></tr></table></figure><p>➕ ：添加依赖</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:heavy_plus_sign:</span><br></code></pre></td></tr></table></figure><p>➖ ： 移除依赖</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:heavy_minus_sign:</span><br></code></pre></td></tr></table></figure><p>🔧 ：更新配置文件</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:wrench:</span><br></code></pre></td></tr></table></figure><p>🔨 ： 更新开发脚本</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:hammer:</span><br></code></pre></td></tr></table></figure><p>🌐 ：国际化与本地化</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:globe_with_meridians:</span><br></code></pre></td></tr></table></figure><p>✏️ ：修复错字 &#x2F; Fix typos.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:pencil2:</span><br></code></pre></td></tr></table></figure><p>💩 ： 后续要优化的代码</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:poop:</span><br></code></pre></td></tr></table></figure><p>⏪️ ： 回滚更新 &#x2F; Revert changes.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:rewind:</span><br></code></pre></td></tr></table></figure><p>🔀 ：合并分支</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:twisted_rightwards_arrows:</span><br></code></pre></td></tr></table></figure><p>📦️ ：更新打包文件</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">:<span class="hljs-keyword">package</span>:<br></code></pre></td></tr></table></figure><p>👽️ ： 外部 API 导致的代码更新</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:alien:</span><br></code></pre></td></tr></table></figure><p>🚚  ：移动或重命名资源 (e.g.: files, paths, routes).</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:truck:</span><br></code></pre></td></tr></table></figure><p>📄 ： 更新许可证</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:page_facing_up:</span><br></code></pre></td></tr></table></figure><p>💥 ：引入破坏性更新 &#x2F; breaking changes.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:boom:</span><br></code></pre></td></tr></table></figure><p>🍱 : 更新资源 &#x2F; assets.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:bento:</span><br></code></pre></td></tr></table></figure><p>♿️ ：提升无障碍体验</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:wheelchair:</span><br></code></pre></td></tr></table></figure><p>💡 ：更新代码注释</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:bulb:</span><br></code></pre></td></tr></table></figure><p>🍻 ：Write code drunkenly.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:beers:</span><br></code></pre></td></tr></table></figure><p>💬 ： 修改文本 &#x2F;  text and literals.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:speech_balloon:</span><br></code></pre></td></tr></table></figure><p>🗃️ : 数据库相关操作</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:card_file_box:</span><br></code></pre></td></tr></table></figure><p>🔊 ： 添加更新日志</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:loud_sound:</span><br></code></pre></td></tr></table></figure><p>🔇 ：移除运行日志</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:mute:</span><br></code></pre></td></tr></table></figure><p>👥 ：更新贡献者</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:busts_in_silhouette:</span><br></code></pre></td></tr></table></figure><p>🚸 提升用户体验与可用性 &#x2F; UE &amp; usability</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:children_crossing:</span><br></code></pre></td></tr></table></figure><p>🏗️ : 更改架构 &#x2F; Make architectural changes.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:building_construction:</span><br></code></pre></td></tr></table></figure><p>📱 : 响应式设计工作</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:iphone:</span><br></code></pre></td></tr></table></figure><p>🤡 ：Mock 数据</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:clown_face:</span><br></code></pre></td></tr></table></figure><p>🥚 ：添加彩蛋</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:egg:</span><br></code></pre></td></tr></table></figure><p>🙈 ：更新 .gitignore 文件</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">:<span class="hljs-meta">see</span><span class="hljs-number">_n</span>o<span class="hljs-number">_</span>evil:<br></code></pre></td></tr></table></figure><p>📸 ：更新快照 &#x2F; snapshots</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:camera_flash:</span><br></code></pre></td></tr></table></figure><p>⚗️ ： 实验性功能</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:alembic:</span><br></code></pre></td></tr></table></figure><p>🔍️ ： SEO 优化</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:mag:</span><br></code></pre></td></tr></table></figure><p>🏷️ ： Add or update types.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:label:</span><br></code></pre></td></tr></table></figure><p>🌱 ： Add or update seed files.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:seedling:</span><br></code></pre></td></tr></table></figure><p>🚩 ： 更新功能标记 &#x2F; feature flags.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:triangular_flag_on_post:</span><br></code></pre></td></tr></table></figure><p>🥅 ：异常捕获</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:goal_net:</span><br></code></pre></td></tr></table></figure><p>💫 ： 更新动画过渡效果</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:dizzy:</span><br></code></pre></td></tr></table></figure><p>🗑️ ：待清理的弃用代码</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:wastebasket:</span><br></code></pre></td></tr></table></figure><p>🛂 ：Work on code related to authorization, roles and permissions.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:passport_control:</span><br></code></pre></td></tr></table></figure><p>🩹 ： 简单问题修复</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:adhesive_bandage:</span><br></code></pre></td></tr></table></figure><p>🧐 ：数据检查 &#x2F; Data exploration&#x2F;inspection.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:monocle_face:</span><br></code></pre></td></tr></table></figure><p>⚰️ ：移除无用代码</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:coffin:</span><br></code></pre></td></tr></table></figure><h2 id="gitmoji-cli"><a href="#gitmoji-cli" class="headerlink" title="gitmoji-cli"></a>gitmoji-cli</h2><p>也可以通过安装 <a href="https://github.com/carloscuesta/gitmoji-cli">gitmoji-cli</a> 在命令行中使用 gitmoji。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -g gitmoji-cli<br></code></pre></td></tr></table></figure><h2 id="命令行使用"><a href="#命令行使用" class="headerlink" title="命令行使用"></a>命令行使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gitmoji --<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">A gitmoji interactive client <span class="hljs-keyword">for</span> <span class="hljs-keyword">using</span> gitmojis <span class="hljs-keyword">on</span> <span class="hljs-keyword">commit</span> messages.<br><br>  <span class="hljs-keyword">Usage</span><br>    $ gitmoji<br>  <span class="hljs-keyword">Options</span><br>    <span class="hljs-comment">--init, -i      Initialize gitmoji as a commit hook</span><br>    <span class="hljs-comment">--remove, -r    Remove a previously initialized commit hook</span><br>    <span class="hljs-comment">--config, -g    Setup gitmoji-cli preferences.</span><br>    <span class="hljs-comment">--commit, -c    Interactively commit using the prompts</span><br>    <span class="hljs-comment">--list, -l      List all the available gitmojis</span><br>    <span class="hljs-comment">--search, -s    Search gitmojis</span><br>    <span class="hljs-comment">--version, -v   Print gitmoji-cli installed version</span><br>    <span class="hljs-comment">--update, -u    Sync emoji list with the repo</span><br></code></pre></td></tr></table></figure><h3 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h3><p>可以直接使用或通过 commit hook 使用。</p><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><p>启动命令行，会根据提示自动生成提交。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gitmoji -c<br></code></pre></td></tr></table></figure><h4 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h4><p>初始化钩子之后，添加更改并提交，之后将开始提示并生成提交消息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gitmoji -i<br>$ git add .<br>$ git commit<br></code></pre></td></tr></table></figure><p>⚠️ 钩子<strong>不要</strong>和 <code>gitmoji -c</code> 命令一起使用。</p><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/05/260511332/42a8891d132ec881504bc338057c85b9_6571090905170179297.png" alt="gitmoji commit"></p><h3 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h3><p>根据关键字搜索适合的 gitmoji。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gitmoji -s <span class="hljs-string">&quot;criteria&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/05/260511332/9fa4b2684de6e4e64fced0ac4efd3c42_2060869562642035894.png" alt="gitmoji search"></p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>打印所有可用的 gitmojis。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gitmoji -l<br></code></pre></td></tr></table></figure><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/05/260511332/923bc5b62c89d794129b79b6589e9716_6461487663436501177.png" alt="gitmoji list"></p><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>更新 gitmojis 列表，默认情况下，第一次运行 gitmoji 时，cli 会创建一个缓存，以在无网络的情况下使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gitmoji -u<br></code></pre></td></tr></table></figure><h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><p>运行 <code>gitmoji -g</code> 设置首选项。</p><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/05/260511332/cae6d1a67cbd4071f0fc582a51cc7464_2379149892528069066.png" alt="gitmoji config"></p><h4 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h4><ul><li><strong>Automatic git add</strong>: 每次执行 commit 时是否自动执行 <code>git add .</code></li><li><strong>Emoji format</strong>: 切换表情符号格式</li><li><strong>Scope prompt</strong>: 启用或禁用 <a href="https://www.conventionalcommits.org/en/v1.0.0/#summary">conventional commits scope prompt</a>.</li><li><strong>Signed commits</strong>: 是否使用 GPG 签名提交</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://gitmoji.dev/">gitmoji</a></p><p><a href="https://github.com/carloscuesta/gitmoji-cli/">gitmoji-cli</a></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Emoji</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Emoji list</title>
    <link href="/z/posts/9b8e354f/"/>
    <url>/z/posts/9b8e354f/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><p>From <a href="https://ip.sb/emoji/">https://ip.sb/emoji/</a></p><p>✂ Copy and 📋 Paste Emoji 👍 No apps required</p><span id="more"></span><h3 id="Smileys"><a href="#Smileys" class="headerlink" title="Smileys"></a>Smileys</h3><p>😀 😃 😄 😁 😆 😅 😂 🤣 ☺️ 😊 😇 🙂 🙃 😉 😌 😍 🥰 😘 😗 😙 😚 😋 😛 😝 😜 🤪 🤨 🧐 🤓 😎 🤩 🥳 😏 😒 😞 😔 😟 😕 🙁 ☹️ 😣 😖 😫 😩 🥺 😢 😭 😤 😠 😡 🤬 🤯 😳 🥵 🥶 😱 😨 😰 😥 😓 🤗 🤔 🤭 🤫 🤥 😶 😐 😑 😬 🙄 😯 😦 😧 😮 😲 🥱 😴 🤤 😪 😵 🤐 🥴 🤢 🤮 🤧 😷 🤒 🤕 🤑 🤠 😈 👿 👹 👺 🤡 💩 👻 💀 ☠️ 👽 👾 🤖 🎃 😺 😸 😹 😻 😼 😽 🙀 😿 😾</p><h3 id="Gestures-and-Body-Parts"><a href="#Gestures-and-Body-Parts" class="headerlink" title="Gestures and Body Parts"></a>Gestures and Body Parts</h3><p>👋 🤚 🖐 ✋ 🖖 👌 🤏 ✌️ 🤞 🤟 🤘 🤙 👈 👉 👆 🖕 👇 ☝️ 👍 👎 ✊ 👊 🤛 🤜 👏 🙌 👐 🤲 🤝 🙏 ✍️ 💅 🤳 💪 🦾 🦵 🦿 🦶 👣 👂 🦻 👃 🧠 🦷 🦴 👀 👁 👅 👄 💋 🩸</p><h3 id="People-and-Fantasy"><a href="#People-and-Fantasy" class="headerlink" title="People and Fantasy"></a>People and Fantasy</h3><p>👶 👧 🧒 👦 👩 🧑 👨 👩‍🦱 🧑‍🦱 👨‍🦱 👩‍🦰 🧑‍🦰 👨‍🦰 👱‍♀️ 👱 👱‍♂️ 👩‍🦳 🧑‍🦳 👨‍🦳 👩‍🦲 🧑‍🦲 👨‍🦲 🧔 👵 🧓 👴 👲 👳‍♀️ 👳 👳‍♂️ 🧕 👮‍♀️ 👮 👮‍♂️ 👷‍♀️ 👷 👷‍♂️ 💂‍♀️ 💂 💂‍♂️ 🕵️‍♀️ 🕵️ 🕵️‍♂️ 👩‍⚕️ 🧑‍⚕️ 👨‍⚕️ 👩‍🌾 🧑‍🌾 👨‍🌾 👩‍🍳 🧑‍🍳 👨‍🍳 👩‍🎓 🧑‍🎓 👨‍🎓 👩‍🎤 🧑‍🎤 👨‍🎤 👩‍🏫 🧑‍🏫 👨‍🏫 👩‍🏭 🧑‍🏭 👨‍🏭 👩‍💻 🧑‍💻 👨‍💻 👩‍💼 🧑‍💼 👨‍💼 👩‍🔧 🧑‍🔧 👨‍🔧 👩‍🔬 🧑‍🔬 👨‍🔬 👩‍🎨 🧑‍🎨 👨‍🎨 👩‍🚒 🧑‍🚒 👨‍🚒 👩‍✈️ 🧑‍✈️ 👨‍✈️ 👩‍🚀 🧑‍🚀 👨‍🚀 👩‍⚖️ 🧑‍⚖️ 👨‍⚖️ 👰‍♀️ 👰 👰‍♂️ 🤵‍♀️ 🤵 🤵‍♂️ 👸 🤴 🦸‍♀️ 🦸 🦸‍♂️ 🦹‍♀️ 🦹 🦹‍♂️ 🤶 🧑‍🎄 🎅 🧙‍♀️ 🧙 🧙‍♂️ 🧝‍♀️ 🧝 🧝‍♂️ 🧛‍♀️ 🧛 🧛‍♂️ 🧟‍♀️ 🧟 🧟‍♂️ 🧞‍♀️ 🧞 🧞‍♂️ 🧜‍♀️ 🧜 🧜‍♂️ 🧚‍♀️ 🧚 🧚‍♂️ 👼 🤰 🤱 👩‍🍼 🧑‍🍼 👨‍🍼 🙇‍♀️ 🙇 🙇‍♂️ 💁‍♀️ 💁 💁‍♂️ 🙅‍♀️ 🙅 🙅‍♂️ 🙆‍♀️ 🙆 🙆‍♂️ 🙋‍♀️ 🙋 🙋‍♂️ 🧏‍♀️ 🧏 🧏‍♂️ 🤦‍♀️ 🤦 🤦‍♂️ 🤷‍♀️ 🤷 🤷‍♂️ 🙎‍♀️ 🙎 🙎‍♂️ 🙍‍♀️ 🙍 🙍‍♂️ 💇‍♀️ 💇 💇‍♂️ 💆‍♀️ 💆 💆‍♂️ 🧖‍♀️ 🧖 🧖‍♂️ 💅 🤳 💃 🕺 👯‍♀️ 👯 👯‍♂️ 🕴 👩‍🦽 🧑‍🦽 👨‍🦽 👩‍🦼 🧑‍🦼 👨‍🦼 🚶‍♀️ 🚶 🚶‍♂️ 👩‍🦯 🧑‍🦯 👨‍🦯 🧎‍♀️ 🧎 🧎‍♂️ 🏃‍♀️ 🏃 🏃‍♂️ 🧍‍♀️ 🧍 🧍‍♂️ 👭 🧑‍🤝‍🧑 👬 👫 👩‍❤️‍👩 💑 👨‍❤️‍👨 👩‍❤️‍👨 👩‍❤️‍💋‍👩 💏 👨‍❤️‍💋‍👨 👩‍❤️‍💋‍👨 👪 👨‍👩‍👦 👨‍👩‍👧 👨‍👩‍👧‍👦 👨‍👩‍👦‍👦 👨‍👩‍👧‍👧 👨‍👨‍👦 👨‍👨‍👧 👨‍👨‍👧‍👦 👨‍👨‍👦‍👦 👨‍👨‍👧‍👧 👩‍👩‍👦 👩‍👩‍👧 👩‍👩‍👧‍👦 👩‍👩‍👦‍👦 👩‍👩‍👧‍👧 👨‍👦 👨‍👦‍👦 👨‍👧 👨‍👧‍👦 👨‍👧‍👧 👩‍👦 👩‍👦‍👦 👩‍👧 👩‍👧‍👦 👩‍👧‍👧 🗣 👤 👥</p><h3 id="Clothing-and-Accessories"><a href="#Clothing-and-Accessories" class="headerlink" title="Clothing and Accessories"></a>Clothing and Accessories</h3><p>🧳 🌂 ☂️ 🧵 🧶 👓 🕶 🥽 🥼 🦺 👔 👕 👖 🧣 🧤 🧥 🧦 👗 👘 🥻 🩱 🩲 🩳 👙 👚 👛 👜 👝 🎒 👞 👟 🥾 🥿 👠 👡 🩰 👢 👑 👒 🎩 🎓 🧢 ⛑ 💄 💍 💼</p><h3 id="Pale-Emojis"><a href="#Pale-Emojis" class="headerlink" title="Pale Emojis"></a>Pale Emojis</h3><p>👋🏻 🤚🏻 🖐🏻 ✋🏻 🖖🏻 👌🏻 🤏🏻 ✌🏻 🤞🏻 🤟🏻 🤘🏻 🤙🏻 👈🏻 👉🏻 👆🏻 🖕🏻 👇🏻 ☝🏻 👍🏻 👎🏻 ✊🏻 👊🏻 🤛🏻 🤜🏻 👏🏻 🙌🏻 👐🏻 🤲🏻 🙏🏻 ✍🏻 💅🏻 🤳🏻 💪🏻 🦵🏻 🦶🏻 👂🏻 🦻🏻 👃🏻 👶🏻 👧🏻 🧒🏻 👦🏻 👩🏻 🧑🏻 👨🏻 👩🏻‍🦱 🧑🏻‍🦱 👨🏻‍🦱 👩🏻‍🦰 🧑🏻‍🦰 👨🏻‍🦰 👱🏻‍♀️ 👱🏻 👱🏻‍♂️ 👩🏻‍🦳 🧑🏻‍🦳 👨🏻‍🦳 👩🏻‍🦲 🧑🏻‍🦲 👨🏻‍🦲 🧔🏻 👵🏻 🧓🏻 👴🏻 👲🏻 👳🏻‍♀️ 👳🏻 👳🏻‍♂️ 🧕🏻 👮🏻‍♀️ 👮🏻 👮🏻‍♂️ 👷🏻‍♀️ 👷🏻 👷🏻‍♂️ 💂🏻‍♀️ 💂🏻 💂🏻‍♂️ 🕵🏻‍♀️ 🕵🏻 🕵🏻‍♂️ 👩🏻‍⚕️ 🧑🏻‍⚕️ 👨🏻‍⚕️ 👩🏻‍🌾 🧑🏻‍🌾 👨🏻‍🌾 👩🏻‍🍳 🧑🏻‍🍳 👨🏻‍🍳 👩🏻‍🎓 🧑🏻‍🎓 👨🏻‍🎓 👩🏻‍🎤 🧑🏻‍🎤 👨🏻‍🎤 👩🏻‍🏫 🧑🏻‍🏫 👨🏻‍🏫 👩🏻‍🏭 🧑🏻‍🏭 👨🏻‍🏭 👩🏻‍💻 🧑🏻‍💻 👨🏻‍💻 👩🏻‍💼 🧑🏻‍💼 👨🏻‍💼 👩🏻‍🔧 🧑🏻‍🔧 👨🏻‍🔧 👩🏻‍🔬 🧑🏻‍🔬 👨🏻‍🔬 👩🏻‍🎨 🧑🏻‍🎨 👨🏻‍🎨 👩🏻‍🚒 🧑🏻‍🚒 👨🏻‍🚒 👩🏻‍✈️ 🧑🏻‍✈️ 👨🏻‍✈️ 👩🏻‍🚀 🧑🏻‍🚀 👨🏻‍🚀 👩🏻‍⚖️ 🧑🏻‍⚖️ 👨🏻‍⚖️ 👰🏻‍♀️ 👰🏻 👰🏻‍♂️ 🤵🏻‍♀️ 🤵🏻 🤵🏻‍♂️ 👸🏻 🤴🏻 🦸🏻‍♀️ 🦸🏻 🦸🏻‍♂️ 🦹🏻‍♀️ 🦹🏻 🦹🏻‍♂️ 🤶🏻 🧑🏻‍🎄 🎅🏻 🧙🏻‍♀️ 🧙🏻 🧙🏻‍♂️ 🧝🏻‍♀️ 🧝🏻 🧝🏻‍♂️ 🧛🏻‍♀️ 🧛🏻 🧛🏻‍♂️ 🧜🏻‍♀️ 🧜🏻 🧜🏻‍♂️ 🧚🏻‍♀️ 🧚🏻 🧚🏻‍♂️ 👼🏻 🤰🏻 🤱🏻 👩🏻‍🍼 🧑🏻‍🍼 👨🏻‍🍼 🙇🏻‍♀️ 🙇🏻 🙇🏻‍♂️ 💁🏻‍♀️ 💁🏻 💁🏻‍♂️ 🙅🏻‍♀️ 🙅🏻 🙅🏻‍♂️ 🙆🏻‍♀️ 🙆🏻 🙆🏻‍♂️ 🙋🏻‍♀️ 🙋🏻 🙋🏻‍♂️ 🧏🏻‍♀️ 🧏🏻 🧏🏻‍♂️ 🤦🏻‍♀️ 🤦🏻 🤦🏻‍♂️ 🤷🏻‍♀️ 🤷🏻 🤷🏻‍♂️ 🙎🏻‍♀️ 🙎🏻 🙎🏻‍♂️ 🙍🏻‍♀️ 🙍🏻 🙍🏻‍♂️ 💇🏻‍♀️ 💇🏻 💇🏻‍♂️ 💆🏻‍♀️ 💆🏻 💆🏻‍♂️ 🧖🏻‍♀️ 🧖🏻 🧖🏻‍♂️ 💃🏻 🕺🏻 🕴🏻 👩🏻‍🦽 🧑🏻‍🦽 👨🏻‍🦽 👩🏻‍🦼 🧑🏻‍🦼 👨🏻‍🦼 🚶🏻‍♀️ 🚶🏻 🚶🏻‍♂️ 👩🏻‍🦯 🧑🏻‍🦯 👨🏻‍🦯 🧎🏻‍♀️ 🧎🏻 🧎🏻‍♂️ 🏃🏻‍♀️ 🏃🏻 🏃🏻‍♂️ 🧍🏻‍♀️ 🧍🏻 🧍🏻‍♂️ 👭🏻 🧑🏻‍🤝‍🧑🏻 👬🏻 👫🏻 🧗🏻‍♀️ 🧗🏻 🧗🏻‍♂️ 🏇🏻 🏂🏻 🏌🏻‍♀️ 🏌🏻 🏌🏻‍♂️ 🏄🏻‍♀️ 🏄🏻 🏄🏻‍♂️ 🚣🏻‍♀️ 🚣🏻 🚣🏻‍♂️ 🏊🏻‍♀️ 🏊🏻 🏊🏻‍♂️ ⛹🏻‍♀️ ⛹🏻 ⛹🏻‍♂️ 🏋🏻‍♀️ 🏋🏻 🏋🏻‍♂️ 🚴🏻‍♀️ 🚴🏻 🚴🏻‍♂️ 🚵🏻‍♀️ 🚵🏻 🚵🏻‍♂️ 🤸🏻‍♀️ 🤸🏻 🤸🏻‍♂️ 🤽🏻‍♀️ 🤽🏻 🤽🏻‍♂️ 🤾🏻‍♀️ 🤾🏻 🤾🏻‍♂️ 🤹🏻‍♀️ 🤹🏻 🤹🏻‍♂️ 🧘🏻‍♀️ 🧘🏻 🧘🏻‍♂️ 🛀🏻 🛌🏻</p><h3 id="Cream-White-Emojis"><a href="#Cream-White-Emojis" class="headerlink" title="Cream White Emojis"></a>Cream White Emojis</h3><p>👋🏼 🤚🏼 🖐🏼 ✋🏼 🖖🏼 👌🏼 🤏🏼 ✌🏼 🤞🏼 🤟🏼 🤘🏼 🤙🏼 👈🏼 👉🏼 👆🏼 🖕🏼 👇🏼 ☝🏼 👍🏼 👎🏼 ✊🏼 👊🏼 🤛🏼 🤜🏼 👏🏼 🙌🏼 👐🏼 🤲🏼 🙏🏼 ✍🏼 💅🏼 🤳🏼 💪🏼 🦵🏼 🦶🏼 👂🏼 🦻🏼 👃🏼 👶🏼 👧🏼 🧒🏼 👦🏼 👩🏼 🧑🏼 👨🏼 👩🏼‍🦱 🧑🏼‍🦱 👨🏼‍🦱 👩🏼‍🦰 🧑🏼‍🦰 👨🏼‍🦰 👱🏼‍♀️ 👱🏼 👱🏼‍♂️ 👩🏼‍🦳 🧑🏼‍🦳 👨🏼‍🦳 👩🏼‍🦲 🧑🏼‍🦲 👨🏼‍🦲 🧔🏼 👵🏼 🧓🏼 👴🏼 👲🏼 👳🏼‍♀️ 👳🏼 👳🏼‍♂️ 🧕🏼 👮🏼‍♀️ 👮🏼 👮🏼‍♂️ 👷🏼‍♀️ 👷🏼 👷🏼‍♂️ 💂🏼‍♀️ 💂🏼 💂🏼‍♂️ 🕵🏼‍♀️ 🕵🏼 🕵🏼‍♂️ 👩🏼‍⚕️ 🧑🏼‍⚕️ 👨🏼‍⚕️ 👩🏼‍🌾 🧑🏼‍🌾 👨🏼‍🌾 👩🏼‍🍳 🧑🏼‍🍳 👨🏼‍🍳 👩🏼‍🎓 🧑🏼‍🎓 👨🏼‍🎓 👩🏼‍🎤 🧑🏼‍🎤 👨🏼‍🎤 👩🏼‍🏫 🧑🏼‍🏫 👨🏼‍🏫 👩🏼‍🏭 🧑🏼‍🏭 👨🏼‍🏭 👩🏼‍💻 🧑🏼‍💻 👨🏼‍💻 👩🏼‍💼 🧑🏼‍💼 👨🏼‍💼 👩🏼‍🔧 🧑🏼‍🔧 👨🏼‍🔧 👩🏼‍🔬 🧑🏼‍🔬 👨🏼‍🔬 👩🏼‍🎨 🧑🏼‍🎨 👨🏼‍🎨 👩🏼‍🚒 🧑🏼‍🚒 👨🏼‍🚒 👩🏼‍✈️ 🧑🏼‍✈️ 👨🏼‍✈️ 👩🏼‍🚀 🧑🏼‍🚀 👨🏼‍🚀 👩🏼‍⚖️ 🧑🏼‍⚖️ 👨🏼‍⚖️ 👰🏼‍♀️ 👰🏼 👰🏼‍♂️ 🤵🏼‍♀️ 🤵🏼 🤵🏼‍♂️ 👸🏼 🤴🏼 🦸🏼‍♀️ 🦸🏼 🦸🏼‍♂️ 🦹🏼‍♀️ 🦹🏼 🦹🏼‍♂️ 🤶🏼 🧑🏼‍🎄 🎅🏼 🧙🏼‍♀️ 🧙🏼 🧙🏼‍♂️ 🧝🏼‍♀️ 🧝🏼 🧝🏼‍♂️ 🧛🏼‍♀️ 🧛🏼 🧛🏼‍♂️ 🧜🏼‍♀️ 🧜🏼 🧜🏼‍♂️ 🧚🏼‍♀️ 🧚🏼 🧚🏼‍♂️ 👼🏼 🤰🏼 🤱🏼 👩🏼‍🍼 🧑🏼‍🍼 👨🏼‍🍼 🙇🏼‍♀️ 🙇🏼 🙇🏼‍♂️ 💁🏼‍♀️ 💁🏼 💁🏼‍♂️ 🙅🏼‍♀️ 🙅🏼 🙅🏼‍♂️ 🙆🏼‍♀️ 🙆🏼 🙆🏼‍♂️ 🙋🏼‍♀️ 🙋🏼 🙋🏼‍♂️ 🧏🏼‍♀️ 🧏🏼 🧏🏼‍♂️ 🤦🏼‍♀️ 🤦🏼 🤦🏼‍♂️ 🤷🏼‍♀️ 🤷🏼 🤷🏼‍♂️ 🙎🏼‍♀️ 🙎🏼 🙎🏼‍♂️ 🙍🏼‍♀️ 🙍🏼 🙍🏼‍♂️ 💇🏼‍♀️ 💇🏼 💇🏼‍♂️ 💆🏼‍♀️ 💆🏼 💆🏼‍♂️ 🧖🏼‍♀️ 🧖🏼 🧖🏼‍♂️ 💃🏼 🕺🏼 🕴🏼 👩🏼‍🦽 🧑🏼‍🦽 👨🏼‍🦽 👩🏼‍🦼 🧑🏼‍🦼 👨🏼‍🦼 🚶🏼‍♀️ 🚶🏼 🚶🏼‍♂️ 👩🏼‍🦯 🧑🏼‍🦯 👨🏼‍🦯 🧎🏼‍♀️ 🧎🏼 🧎🏼‍♂️ 🏃🏼‍♀️ 🏃🏼 🏃🏼‍♂️ 🧍🏼‍♀️ 🧍🏼 🧍🏼‍♂️ 👭🏼 🧑🏼‍🤝‍🧑🏼 👬🏼 👫🏼 🧗🏼‍♀️ 🧗🏼 🧗🏼‍♂️ 🏇🏼 🏂🏼 🏌🏼‍♀️ 🏌🏼 🏌🏼‍♂️ 🏄🏼‍♀️ 🏄🏼 🏄🏼‍♂️ 🚣🏼‍♀️ 🚣🏼 🚣🏼‍♂️ 🏊🏼‍♀️ 🏊🏼 🏊🏼‍♂️ ⛹🏼‍♀️ ⛹🏼 ⛹🏼‍♂️ 🏋🏼‍♀️ 🏋🏼 🏋🏼‍♂️ 🚴🏼‍♀️ 🚴🏼 🚴🏼‍♂️ 🚵🏼‍♀️ 🚵🏼 🚵🏼‍♂️ 🤸🏼‍♀️ 🤸🏼 🤸🏼‍♂️ 🤽🏼‍♀️ 🤽🏼 🤽🏼‍♂️ 🤾🏼‍♀️ 🤾🏼 🤾🏼‍♂️ 🤹🏼‍♀️ 🤹🏼 🤹🏼‍♂️ 🧘🏼‍♀️ 🧘🏼 🧘🏼‍♂️ 🛀🏼 🛌🏼</p><h3 id="Brown-Emojis"><a href="#Brown-Emojis" class="headerlink" title="Brown Emojis"></a>Brown Emojis</h3><p>👋🏽 🤚🏽 🖐🏽 ✋🏽 🖖🏽 👌🏽 🤏🏽 ✌🏽 🤞🏽 🤟🏽 🤘🏽 🤙🏽 👈🏽 👉🏽 👆🏽 🖕🏽 👇🏽 ☝🏽 👍🏽 👎🏽 ✊🏽 👊🏽 🤛🏽 🤜🏽 👏🏽 🙌🏽 👐🏽 🤲🏽 🙏🏽 ✍🏽 💅🏽 🤳🏽 💪🏽 🦵🏽 🦶🏽 👂🏽 🦻🏽 👃🏽 👶🏽 👧🏽 🧒🏽 👦🏽 👩🏽 🧑🏽 👨🏽 👩🏽‍🦱 🧑🏽‍🦱 👨🏽‍🦱 👩🏽‍🦰 🧑🏽‍🦰 👨🏽‍🦰 👱🏽‍♀️ 👱🏽 👱🏽‍♂️ 👩🏽‍🦳 🧑🏽‍🦳 👨🏽‍🦳 👩🏽‍🦲 🧑🏽‍🦲 👨🏽‍🦲 🧔🏽 👵🏽 🧓🏽 👴🏽 👲🏽 👳🏽‍♀️ 👳🏽 👳🏽‍♂️ 🧕🏽 👮🏽‍♀️ 👮🏽 👮🏽‍♂️ 👷🏽‍♀️ 👷🏽 👷🏽‍♂️ 💂🏽‍♀️ 💂🏽 💂🏽‍♂️ 🕵🏽‍♀️ 🕵🏽 🕵🏽‍♂️ 👩🏽‍⚕️ 🧑🏽‍⚕️ 👨🏽‍⚕️ 👩🏽‍🌾 🧑🏽‍🌾 👨🏽‍🌾 👩🏽‍🍳 🧑🏽‍🍳 👨🏽‍🍳 👩🏽‍🎓 🧑🏽‍🎓 👨🏽‍🎓 👩🏽‍🎤 🧑🏽‍🎤 👨🏽‍🎤 👩🏽‍🏫 🧑🏽‍🏫 👨🏽‍🏫 👩🏽‍🏭 🧑🏽‍🏭 👨🏽‍🏭 👩🏽‍💻 🧑🏽‍💻 👨🏽‍💻 👩🏽‍💼 🧑🏽‍💼 👨🏽‍💼 👩🏽‍🔧 🧑🏽‍🔧 👨🏽‍🔧 👩🏽‍🔬 🧑🏽‍🔬 👨🏽‍🔬 👩🏽‍🎨 🧑🏽‍🎨 👨🏽‍🎨 👩🏽‍🚒 🧑🏽‍🚒 👨🏽‍🚒 👩🏽‍✈️ 🧑🏽‍✈️ 👨🏽‍✈️ 👩🏽‍🚀 🧑🏽‍🚀 👨🏽‍🚀 👩🏽‍⚖️ 🧑🏽‍⚖️ 👨🏽‍⚖️ 👰🏽‍♀️ 👰🏽 👰🏽‍♂️ 🤵🏽‍♀️ 🤵🏽 🤵🏽‍♂️ 👸🏽 🤴🏽 🦸🏽‍♀️ 🦸🏽 🦸🏽‍♂️ 🦹🏽‍♀️ 🦹🏽 🦹🏽‍♂️ 🤶🏽 🧑🏽‍🎄 🎅🏽 🧙🏽‍♀️ 🧙🏽 🧙🏽‍♂️ 🧝🏽‍♀️ 🧝🏽 🧝🏽‍♂️ 🧛🏽‍♀️ 🧛🏽 🧛🏽‍♂️ 🧜🏽‍♀️ 🧜🏽 🧜🏽‍♂️ 🧚🏽‍♀️ 🧚🏽 🧚🏽‍♂️ 👼🏽 🤰🏽 🤱🏽 👩🏽‍🍼 🧑🏽‍🍼 👨🏽‍🍼 🙇🏽‍♀️ 🙇🏽 🙇🏽‍♂️ 💁🏽‍♀️ 💁🏽 💁🏽‍♂️ 🙅🏽‍♀️ 🙅🏽 🙅🏽‍♂️ 🙆🏽‍♀️ 🙆🏽 🙆🏽‍♂️ 🙋🏽‍♀️ 🙋🏽 🙋🏽‍♂️ 🧏🏽‍♀️ 🧏🏽 🧏🏽‍♂️ 🤦🏽‍♀️ 🤦🏽 🤦🏽‍♂️ 🤷🏽‍♀️ 🤷🏽 🤷🏽‍♂️ 🙎🏽‍♀️ 🙎🏽 🙎🏽‍♂️ 🙍🏽‍♀️ 🙍🏽 🙍🏽‍♂️ 💇🏽‍♀️ 💇🏽 💇🏽‍♂️ 💆🏽‍♀️ 💆🏽 💆🏽‍♂️ 🧖🏽‍♀️ 🧖🏽 🧖🏽‍♂️ 💃🏽 🕺🏽 🕴🏽 👩🏽‍🦽 🧑🏽‍🦽 👨🏽‍🦽 👩🏽‍🦼 🧑🏽‍🦼 👨🏽‍🦼 🚶🏽‍♀️ 🚶🏽 🚶🏽‍♂️ 👩🏽‍🦯 🧑🏽‍🦯 👨🏽‍🦯 🧎🏽‍♀️ 🧎🏽 🧎🏽‍♂️ 🏃🏽‍♀️ 🏃🏽 🏃🏽‍♂️ 🧍🏽‍♀️ 🧍🏽 🧍🏽‍♂️ 👭🏽 🧑🏽‍🤝‍🧑🏽 👬🏽 👫🏽 🧗🏽‍♀️ 🧗🏽 🧗🏽‍♂️ 🏇🏽 🏂🏽 🏌🏽‍♀️ 🏌🏽 🏌🏽‍♂️ 🏄🏽‍♀️ 🏄🏽 🏄🏽‍♂️ 🚣🏽‍♀️ 🚣🏽 🚣🏽‍♂️ 🏊🏽‍♀️ 🏊🏽 🏊🏽‍♂️ ⛹🏽‍♀️ ⛹🏽 ⛹🏽‍♂️ 🏋🏽‍♀️ 🏋🏽 🏋🏽‍♂️ 🚴🏽‍♀️ 🚴🏽 🚴🏽‍♂️ 🚵🏽‍♀️ 🚵🏽 🚵🏽‍♂️ 🤸🏽‍♀️ 🤸🏽 🤸🏽‍♂️ 🤽🏽‍♀️ 🤽🏽 🤽🏽‍♂️ 🤾🏽‍♀️ 🤾🏽 🤾🏽‍♂️ 🤹🏽‍♀️ 🤹🏽 🤹🏽‍♂️ 🧘🏽‍♀️ 🧘🏽 🧘🏽‍♂️ 🛀🏽 🛌🏽</p><h3 id="Dark-Brown-Emojis"><a href="#Dark-Brown-Emojis" class="headerlink" title="Dark Brown Emojis"></a>Dark Brown Emojis</h3><p>👋🏾 🤚🏾 🖐🏾 ✋🏾 🖖🏾 👌🏾 🤏🏾 ✌🏾 🤞🏾 🤟🏾 🤘🏾 🤙🏾 👈🏾 👉🏾 👆🏾 🖕🏾 👇🏾 ☝🏾 👍🏾 👎🏾 ✊🏾 👊🏾 🤛🏾 🤜🏾 👏🏾 🙌🏾 👐🏾 🤲🏾 🙏🏾 ✍🏾 💅🏾 🤳🏾 💪🏾 🦵🏾 🦶🏾 👂🏾 🦻🏾 👃🏾 👶🏾 👧🏾 🧒🏾 👦🏾 👩🏾 🧑🏾 👨🏾 👩🏾‍🦱 🧑🏾‍🦱 👨🏾‍🦱 👩🏾‍🦰 🧑🏾‍🦰 👨🏾‍🦰 👱🏾‍♀️ 👱🏾 👱🏾‍♂️ 👩🏾‍🦳 🧑🏾‍🦳 👨🏾‍🦳 👩🏾‍🦲 🧑🏾‍🦲 👨🏾‍🦲 🧔🏾 👵🏾 🧓🏾 👴🏾 👲🏾 👳🏾‍♀️ 👳🏾 👳🏾‍♂️ 🧕🏾 👮🏾‍♀️ 👮🏾 👮🏾‍♂️ 👷🏾‍♀️ 👷🏾 👷🏾‍♂️ 💂🏾‍♀️ 💂🏾 💂🏾‍♂️ 🕵🏾‍♀️ 🕵🏾 🕵🏾‍♂️ 👩🏾‍⚕️ 🧑🏾‍⚕️ 👨🏾‍⚕️ 👩🏾‍🌾 🧑🏾‍🌾 👨🏾‍🌾 👩🏾‍🍳 🧑🏾‍🍳 👨🏾‍🍳 👩🏾‍🎓 🧑🏾‍🎓 👨🏾‍🎓 👩🏾‍🎤 🧑🏾‍🎤 👨🏾‍🎤 👩🏾‍🏫 🧑🏾‍🏫 👨🏾‍🏫 👩🏾‍🏭 🧑🏾‍🏭 👨🏾‍🏭 👩🏾‍💻 🧑🏾‍💻 👨🏾‍💻 👩🏾‍💼 🧑🏾‍💼 👨🏾‍💼 👩🏾‍🔧 🧑🏾‍🔧 👨🏾‍🔧 👩🏾‍🔬 🧑🏾‍🔬 👨🏾‍🔬 👩🏾‍🎨 🧑🏾‍🎨 👨🏾‍🎨 👩🏾‍🚒 🧑🏾‍🚒 👨🏾‍🚒 👩🏾‍✈️ 🧑🏾‍✈️ 👨🏾‍✈️ 👩🏾‍🚀 🧑🏾‍🚀 👨🏾‍🚀 👩🏾‍⚖️ 🧑🏾‍⚖️ 👨🏾‍⚖️ 👰🏾‍♀️ 👰🏾 👰🏾‍♂️ 🤵🏾‍♀️ 🤵🏾 🤵🏾‍♂️ 👸🏾 🤴🏾 🦸🏾‍♀️ 🦸🏾 🦸🏾‍♂️ 🦹🏾‍♀️ 🦹🏾 🦹🏾‍♂️ 🤶🏾 🧑🏾‍🎄 🎅🏾 🧙🏾‍♀️ 🧙🏾 🧙🏾‍♂️ 🧝🏾‍♀️ 🧝🏾 🧝🏾‍♂️ 🧛🏾‍♀️ 🧛🏾 🧛🏾‍♂️ 🧜🏾‍♀️ 🧜🏾 🧜🏾‍♂️ 🧚🏾‍♀️ 🧚🏾 🧚🏾‍♂️ 👼🏾 🤰🏾 🤱🏾 👩🏾‍🍼 🧑🏾‍🍼 👨🏾‍🍼 🙇🏾‍♀️ 🙇🏾 🙇🏾‍♂️ 💁🏾‍♀️ 💁🏾 💁🏾‍♂️ 🙅🏾‍♀️ 🙅🏾 🙅🏾‍♂️ 🙆🏾‍♀️ 🙆🏾 🙆🏾‍♂️ 🙋🏾‍♀️ 🙋🏾 🙋🏾‍♂️ 🧏🏾‍♀️ 🧏🏾 🧏🏾‍♂️ 🤦🏾‍♀️ 🤦🏾 🤦🏾‍♂️ 🤷🏾‍♀️ 🤷🏾 🤷🏾‍♂️ 🙎🏾‍♀️ 🙎🏾 🙎🏾‍♂️ 🙍🏾‍♀️ 🙍🏾 🙍🏾‍♂️ 💇🏾‍♀️ 💇🏾 💇🏾‍♂️ 💆🏾‍♀️ 💆🏾 💆🏾‍♂️ 🧖🏾‍♀️ 🧖🏾 🧖🏾‍♂️ 💃🏾 🕺🏾 🕴🏿 👩🏾‍🦽 🧑🏾‍🦽 👨🏾‍🦽 👩🏾‍🦼 🧑🏾‍🦼 👨🏾‍🦼 🚶🏾‍♀️ 🚶🏾 🚶🏾‍♂️ 👩🏾‍🦯 🧑🏾‍🦯 👨🏾‍🦯 🧎🏾‍♀️ 🧎🏾 🧎🏾‍♂️ 🏃🏾‍♀️ 🏃🏾 🏃🏾‍♂️ 🧍🏾‍♀️ 🧍🏾 🧍🏾‍♂️ 👭🏾 🧑🏾‍🤝‍🧑🏾 👬🏾 👫🏾 🧗🏾‍♀️ 🧗🏾 🧗🏾‍♂️ 🏇🏾 🏂🏾 🏌🏾‍♀️ 🏌🏾 🏌🏾‍♂️ 🏄🏾‍♀️ 🏄🏾 🏄🏾‍♂️ 🚣🏾‍♀️ 🚣🏾 🚣🏾‍♂️ 🏊🏾‍♀️ 🏊🏾 🏊🏾‍♂️ ⛹🏾‍♀️ ⛹🏾 ⛹🏾‍♂️ 🏋🏾‍♀️ 🏋🏾 🏋🏾‍♂️ 🚴🏾‍♀️ 🚴🏾 🚴🏾‍♂️ 🚵🏾‍♀️ 🚵🏾 🚵🏾‍♂️ 🤸🏾‍♀️ 🤸🏾 🤸🏾‍♂️ 🤽🏾‍♀️ 🤽🏾 🤽🏾‍♂️ 🤾🏾‍♀️ 🤾🏾 🤾🏾‍♂️ 🤹🏾‍♀️ 🤹🏾 🤹🏾‍♂️ 🧘🏾‍♀️ 🧘🏾 🧘🏾‍♂️ 🛀🏾 🛌🏾</p><h3 id="Black-Emojis"><a href="#Black-Emojis" class="headerlink" title="Black Emojis"></a>Black Emojis</h3><p>👋🏿 🤚🏿 🖐🏿 ✋🏿 🖖🏿 👌🏿 🤏🏿 ✌🏿 🤞🏿 🤟🏿 🤘🏿 🤙🏿 👈🏿 👉🏿 👆🏿 🖕🏿 👇🏿 ☝🏿 👍🏿 👎🏿 ✊🏿 👊🏿 🤛🏿 🤜🏿 👏🏿 🙌🏿 👐🏿 🤲🏿 🙏🏿 ✍🏿 💅🏿 🤳🏿 💪🏿 🦵🏿 🦶🏿 👂🏿 🦻🏿 👃🏿 👶🏿 👧🏿 🧒🏿 👦🏿 👩🏿 🧑🏿 👨🏿 👩🏿‍🦱 🧑🏿‍🦱 👨🏿‍🦱 👩🏿‍🦰 🧑🏿‍🦰 👨🏿‍🦰 👱🏿‍♀️ 👱🏿 👱🏿‍♂️ 👩🏿‍🦳 🧑🏿‍🦳 👨🏿‍🦳 👩🏿‍🦲 🧑🏿‍🦲 👨🏿‍🦲 🧔🏿 👵🏿 🧓🏿 👴🏿 👲🏿 👳🏿‍♀️ 👳🏿 👳🏿‍♂️ 🧕🏿 👮🏿‍♀️ 👮🏿 👮🏿‍♂️ 👷🏿‍♀️ 👷🏿 👷🏿‍♂️ 💂🏿‍♀️ 💂🏿 💂🏿‍♂️ 🕵🏿‍♀️ 🕵🏿 🕵🏿‍♂️ 👩🏿‍⚕️ 🧑🏿‍⚕️ 👨🏿‍⚕️ 👩🏿‍🌾 🧑🏿‍🌾 👨🏿‍🌾 👩🏿‍🍳 🧑🏿‍🍳 👨🏿‍🍳 👩🏿‍🎓 🧑🏿‍🎓 👨🏿‍🎓 👩🏿‍🎤 🧑🏿‍🎤 👨🏿‍🎤 👩🏿‍🏫 🧑🏿‍🏫 👨🏿‍🏫 👩🏿‍🏭 🧑🏿‍🏭 👨🏿‍🏭 👩🏿‍💻 🧑🏿‍💻 👨🏿‍💻 👩🏿‍💼 🧑🏿‍💼 👨🏿‍💼 👩🏿‍🔧 🧑🏿‍🔧 👨🏿‍🔧 👩🏿‍🔬 🧑🏿‍🔬 👨🏿‍🔬 👩🏿‍🎨 🧑🏿‍🎨 👨🏿‍🎨 👩🏿‍🚒 🧑🏿‍🚒 👨🏿‍🚒 👩🏿‍✈️ 🧑🏿‍✈️ 👨🏿‍✈️ 👩🏿‍🚀 🧑🏿‍🚀 👨🏿‍🚀 👩🏿‍⚖️ 🧑🏿‍⚖️ 👨🏿‍⚖️ 👰🏿‍♀️ 👰🏿 👰🏿‍♂️ 🤵🏿‍♀️ 🤵🏿 🤵🏿‍♂️ 👸🏿 🤴🏿 🦸🏿‍♀️ 🦸🏿 🦸🏿‍♂️ 🦹🏿‍♀️ 🦹🏿 🦹🏿‍♂️ 🤶🏿 🧑🏿‍🎄 🎅🏿 🧙🏿‍♀️ 🧙🏿 🧙🏿‍♂️ 🧝🏿‍♀️ 🧝🏿 🧝🏿‍♂️ 🧛🏿‍♀️ 🧛🏿 🧛🏿‍♂️ 🧜🏿‍♀️ 🧜🏿 🧜🏿‍♂️ 🧚🏿‍♀️ 🧚🏿 🧚🏿‍♂️ 👼🏿 🤰🏿 🤱🏿 👩🏿‍🍼 🧑🏿‍🍼 👨🏿‍🍼 🙇🏿‍♀️ 🙇🏿 🙇🏿‍♂️ 💁🏿‍♀️ 💁🏿 💁🏿‍♂️ 🙅🏿‍♀️ 🙅🏿 🙅🏿‍♂️ 🙆🏿‍♀️ 🙆🏿 🙆🏿‍♂️ 🙋🏿‍♀️ 🙋🏿 🙋🏿‍♂️ 🧏🏿‍♀️ 🧏🏿 🧏🏿‍♂️ 🤦🏿‍♀️ 🤦🏿 🤦🏿‍♂️ 🤷🏿‍♀️ 🤷🏿 🤷🏿‍♂️ 🙎🏿‍♀️ 🙎🏿 🙎🏿‍♂️ 🙍🏿‍♀️ 🙍🏿 🙍🏿‍♂️ 💇🏿‍♀️ 💇🏿 💇🏿‍♂️ 💆🏿‍♀️ 💆🏿 💆🏿‍♂️ 🧖🏿‍♀️ 🧖🏿 🧖🏿‍♂️ 💃🏿 🕺🏿 🕴🏿 👩🏿‍🦽 🧑🏿‍🦽 👨🏿‍🦽 👩🏿‍🦼 🧑🏿‍🦼 👨🏿‍🦼 🚶🏿‍♀️ 🚶🏿 🚶🏿‍♂️ 👩🏿‍🦯 🧑🏿‍🦯 👨🏿‍🦯 🧎🏿‍♀️ 🧎🏿 🧎🏿‍♂️ 🏃🏿‍♀️ 🏃🏿 🏃🏿‍♂️ 🧍🏿‍♀️ 🧍🏿 🧍🏿‍♂️ 👭🏿 🧑🏿‍🤝‍🧑🏿 👬🏿 👫🏿 🧗🏿‍♀️ 🧗🏿 🧗🏿‍♂️ 🏇🏿 🏂🏿 🏌🏿‍♀️ 🏌🏿 🏌🏿‍♂️ 🏄🏿‍♀️ 🏄🏿 🏄🏿‍♂️ 🚣🏿‍♀️ 🚣🏿 🚣🏿‍♂️ 🏊🏿‍♀️ 🏊🏿 🏊🏿‍♂️ ⛹🏿‍♀️ ⛹🏿 ⛹🏿‍♂️ 🏋🏿‍♀️ 🏋🏿 🏋🏿‍♂️ 🚴🏿‍♀️ 🚴🏿 🚴🏿‍♂️ 🚵🏿‍♀️ 🚵🏿 🚵🏿‍♂️ 🤸🏿‍♀️ 🤸🏿 🤸🏿‍♂️ 🤽🏿‍♀️ 🤽🏿 🤽🏿‍♂️ 🤾🏿‍♀️ 🤾🏿 🤾🏿‍♂️ 🤹🏿‍♀️ 🤹🏿 🤹🏿‍♂️ 🧘🏿‍♀️ 🧘🏿 🧘🏿‍♂️ 🛀🏿 🛌🏿</p><h3 id="Animals-amp-Nature"><a href="#Animals-amp-Nature" class="headerlink" title="Animals &amp; Nature"></a>Animals &amp; Nature</h3><p>🐶 🐱 🐭 🐹 🐰 🦊 🐻 🐼 🐻‍❄️ 🐨 🐯 🦁 🐮 🐷 🐽 🐸 🐵 🙈 🙉 🙊 🐒 🐔 🐧 🐦 🐤 🐣 🐥 🦆 🦅 🦉 🦇 🐺 🐗 🐴 🦄 🐝 🐛 🦋 🐌 🐞 🐜 🦟 🦗 🕷 🕸 🦂 🐢 🐍 🦎 🦖 🦕 🐙 🦑 🦐 🦞 🦀 🐡 🐠 🐟 🐬 🐳 🐋 🦈 🐊 🐅 🐆 🦓 🦍 🦧 🐘 🦛 🦏 🐪 🐫 🦒 🦘 🐃 🐂 🐄 🐎 🐖 🐏 🐑 🦙 🐐 🦌 🐕 🐩 🦮 🐕‍🦺 🐈 🐈‍⬛ 🐓 🦃 🦚 🦜 🦢 🦩 🕊 🐇 🦝 🦨 🦡 🦦 🦥 🐁 🐀 🐿 🦔 🐾 🐉 🐲 🌵 🎄 🌲 🌳 🌴 🌱 🌿 ☘️ 🍀 🎍 🎋 🍃 🍂 🍁 🍄 🐚 🌾 💐 🌷 🌹 🥀 🌺 🌸 🌼 🌻 🌞 🌝 🌛 🌜 🌚 🌕 🌖 🌗 🌘 🌑 🌒 🌓 🌔 🌙 🌎 🌍 🌏 🪐 💫 ⭐️ 🌟 ✨ ⚡️ ☄️ 💥 🔥 🌪 🌈 ☀️ 🌤 ⛅️ 🌥 ☁️ 🌦 🌧 ⛈ 🌩 🌨 ❄️ ☃️ ⛄️ 🌬 💨 💧 💦 ☔️ ☂️ 🌊 🌫</p><h3 id="Food-amp-Drink"><a href="#Food-amp-Drink" class="headerlink" title="Food &amp; Drink"></a>Food &amp; Drink</h3><p>🍏 🍎 🍐 🍊 🍋 🍌 🍉 🍇 🍓 🍈 🍒 🍑 🥭 🍍 🥥 🥝 🍅 🍆 🥑 🥦 🥬 🥒 🌶 🌽 🥕 🧄 🧅 🥔 🍠 🥐 🥯 🍞 🥖 🥨 🧀 🥚 🍳 🧈 🥞 🧇 🥓 🥩 🍗 🍖 🦴 🌭 🍔 🍟 🍕 🥪 🥙 🧆 🌮 🌯 🥗 🥘 🥫 🍝 🍜 🍲 🍛 🍣 🍱 🥟 🦪 🍤 🍙 🍚 🍘 🍥 🥠 🥮 🍢 🍡 🍧 🍨 🍦 🥧 🧁 🍰 🎂 🍮 🍭 🍬 🍫 🍿 🍩 🍪 🌰 🥜 🍯 🥛 🍼 ☕️ 🍵 🧃 🥤 🍶 🍺 🍻 🥂 🍷 🥃 🍸 🍹 🧉 🍾 🧊 🥄 🍴 🍽 🥣 🥡 🥢 🧂</p><h3 id="Activity-and-Sports"><a href="#Activity-and-Sports" class="headerlink" title="Activity and Sports"></a>Activity and Sports</h3><p>⚽️ 🏀 🏈 ⚾️ 🥎 🎾 🏐 🏉 🥏 🎱 🪀 🏓 🏸 🏒 🏑 🥍 🏏 🥅 ⛳️ 🪁 🏹 🎣 🤿 🥊 🥋 🎽 🛹 🛷 ⛸ 🥌 🎿 ⛷ 🏂 🪂 🏋️‍♀️ 🏋️ 🏋️‍♂️ 🤼‍♀️ 🤼 🤼‍♂️ 🤸‍♀️ 🤸 🤸‍♂️ ⛹️‍♀️ ⛹️ ⛹️‍♂️ 🤺 🤾‍♀️ 🤾 🤾‍♂️ 🏌️‍♀️ 🏌️ 🏌️‍♂️ 🏇 🧘‍♀️ 🧘 🧘‍♂️ 🏄‍♀️ 🏄 🏄‍♂️ 🏊‍♀️ 🏊 🏊‍♂️ 🤽‍♀️ 🤽 🤽‍♂️ 🚣‍♀️ 🚣 🚣‍♂️ 🧗‍♀️ 🧗 🧗‍♂️ 🚵‍♀️ 🚵 🚵‍♂️ 🚴‍♀️ 🚴 🚴‍♂️ 🏆 🥇 🥈 🥉 🏅 🎖 🏵 🎗 🎫 🎟 🎪 🤹 🤹‍♂️ 🤹‍♀️ 🎭 🩰 🎨 🎬 🎤 🎧 🎼 🎹 🥁 🎷 🎺 🎸 🪕 🎻 🎲 ♟ 🎯 🎳 🎮 🎰 🧩</p><h3 id="Travel-amp-Places"><a href="#Travel-amp-Places" class="headerlink" title="Travel &amp; Places"></a>Travel &amp; Places</h3><p>🚗 🚕 🚙 🚌 🚎 🏎 🚓 🚑 🚒 🚐 🚚 🚛 🚜 🦯 🦽 🦼 🛴 🚲 🛵 🏍 🛺 🚨 🚔 🚍 🚘 🚖 🚡 🚠 🚟 🚃 🚋 🚞 🚝 🚄 🚅 🚈 🚂 🚆 🚇 🚊 🚉 ✈️ 🛫 🛬 🛩 💺 🛰 🚀 🛸 🚁 🛶 ⛵️ 🚤 🛥 🛳 ⛴ 🚢 ⚓️ ⛽️ 🚧 🚦 🚥 🚏 🗺 🗿 🗽 🗼 🏰 🏯 🏟 🎡 🎢 🎠 ⛲️ ⛱ 🏖 🏝 🏜 🌋 ⛰ 🏔 🗻 🏕 ⛺️ 🏠 🏡 🏘 🏚 🏗 🏭 🏢 🏬 🏣 🏤 🏥 🏦 🏨 🏪 🏫 🏩 💒 🏛 ⛪️ 🕌 🕍 🛕 🕋 ⛩ 🛤 🛣 🗾 🎑 🏞 🌅 🌄 🌠 🎇 🎆 🌇 🌆 🏙 🌃 🌌 🌉 🌁</p><h3 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h3><p>⌚️ 📱 📲 💻 ⌨️ 🖥 🖨 🖱 🖲 🕹 🗜 💽 💾 💿 📀 📼 📷 📸 📹 🎥 📽 🎞 📞 ☎️ 📟 📠 📺 📻 🎙 🎚 🎛 🧭 ⏱ ⏲ ⏰ 🕰 ⌛️ ⏳ 📡 🔋 🔌 💡 🔦 🕯 🪔 🧯 🛢 💸 💵 💴 💶 💷 💰 💳 💎 ⚖️ 🧰 🔧 🔨 ⚒ 🛠 ⛏ 🔩 ⚙️ 🧱 ⛓ 🧲 🔫 💣 🧨 🪓 🔪 🗡 ⚔️ 🛡 🚬 ⚰️ ⚱️ 🏺 🔮 📿 🧿 💈 ⚗️ 🔭 🔬 🕳 🩹 🩺 💊 💉 🩸 🧬 🦠 🧫 🧪 🌡 🧹 🧺 🧻 🚽 🚰 🚿 🛁 🛀 🧼 🪒 🧽 🧴 🛎 🔑 🗝 🚪 🪑 🛋 🛏 🛌 🧸 🖼 🛍 🛒 🎁 🎈 🎏 🎀 🎊 🎉 🎎 🏮 🎐 🧧 ✉️ 📩 📨 📧 💌 📥 📤 📦 🏷 📪 📫 📬 📭 📮 📯 📜 📃 📄 📑 🧾 📊 📈 📉 🗒 🗓 📆 📅 🗑 📇 🗃 🗳 🗄 📋 📁 📂 🗂 🗞 📰 📓 📔 📒 📕 📗 📘 📙 📚 📖 🔖 🧷 🔗 📎 🖇 📐 📏 🧮 📌 📍 ✂️ 🖊 🖋 ✒️ 🖌 🖍 📝 ✏️ 🔍 🔎 🔏 🔐 🔒 🔓</p><h3 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h3><p>❤️ 🧡 💛 💚 💙 💜 🖤 🤍 🤎 💔 ❣️ 💕 💞 💓 💗 💖 💘 💝 💟 ☮️ ✝️ ☪️ 🕉 ☸️ ✡️ 🔯 🕎 ☯️ ☦️ 🛐 ⛎ ♈️ ♉️ ♊️ ♋️ ♌️ ♍️ ♎️ ♏️ ♐️ ♑️ ♒️ ♓️ 🆔 ⚛️ 🉑 ☢️ ☣️ 📴 📳 🈶 🈚️ 🈸 🈺 🈷️ ✴️ 🆚 💮 🉐 ㊙️ ㊗️ 🈴 🈵 🈹 🈲 🅰️ 🅱️ 🆎 🆑 🅾️ 🆘 ❌ ⭕️ 🛑 ⛔️ 📛 🚫 💯 💢 ♨️ 🚷 🚯 🚳 🚱 🔞 📵 🚭 ❗️ ❕ ❓ ❔ ‼️ ⁉️ 🔅 🔆 〽️ ⚠️ 🚸 🔱 ⚜️ 🔰 ♻️ ✅ 🈯️ 💹 ❇️ ✳️ ❎ 🌐 💠 Ⓜ️ 🌀 💤 🏧 🚾 ♿️ 🅿️ 🈳 🈂️ 🛂 🛃 🛄 🛅 🚹 🚺 🚼 ⚧ 🚻 🚮 🎦 📶 🈁 🔣 ℹ️ 🔤 🔡 🔠 🆖 🆗 🆙 🆒 🆕 🆓 0️⃣ 1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 #️⃣ *️⃣ ⏏️ ▶️ ⏸ ⏯ ⏹ ⏺ ⏭ ⏮ ⏩ ⏪ ⏫ ⏬ ◀️ 🔼 🔽 ➡️ ⬅️ ⬆️ ⬇️ ↗️ ↘️ ↙️ ↖️ ↕️ ↔️ ↪️ ↩️ ⤴️ ⤵️ 🔀 🔁 🔂 🔄 🔃 🎵 🎶 ➕ ➖ ➗ ✖️ ♾ 💲 💱 ™️ ©️ ®️ 〰️ ➰ ➿ 🔚 🔙 🔛 🔝 🔜 ✔️ ☑️ 🔘 🔴 🟠 🟡 🟢 🔵 🟣 ⚫️ ⚪️ 🟤 🔺 🔻 🔸 🔹 🔶 🔷 🔳 🔲 ▪️ ▫️ ◾️ ◽️ ◼️ ◻️ 🟥 🟧 🟨 🟩 🟦 🟪 ⬛️ ⬜️ 🟫 🔈 🔇 🔉 🔊 🔔 🔕 📣 📢 👁‍🗨 💬 💭 🗯 ♠️ ♣️ ♥️ ♦️ 🃏 🎴 🀄️ 🕐 🕑 🕒 🕓 🕔 🕕 🕖 🕗 🕘 🕙 🕚 🕛 🕜 🕝 🕞 🕟 🕠 🕡 🕢 🕣 🕤 🕥 🕦 🕧</p><h3 id="Non-Emoji-Symbols"><a href="#Non-Emoji-Symbols" class="headerlink" title="Non-Emoji Symbols"></a>Non-Emoji Symbols</h3><p>✢ ✣ ✤ ✥ ✦ ✧ ★ ☆ ✯ ✡︎ ✩ ✪ ✫ ✬ ✭ ✮ ✶ ✷ ✵ ✸ ✹ → ⇒ ⟹ ⇨ ⇾ ➾ ⇢ ☛ ☞ ➔ ➜ ➙ ➛ ➝ ➞ ♠︎ ♣︎ ♥︎ ♦︎ ♤ ♧ ♡ ♢ ♚ ♛ ♜ ♝ ♞ ♟ ♔ ♕ ♖ ♗ ♘ ♙ ⚀ ⚁ ⚂ ⚃ ⚄ ⚅ 🂠 ⚈ ⚉ ⚆ ⚇ 𓀀 𓀁 𓀂 𓀃 𓀄 𓀅 𓀆 𓀇 𓀈 𓀉 𓀊 𓀋 𓀌 𓀍 𓀎 𓀏 𓀐 𓀑 𓀒 𓀓 𓀔 𓀕 𓀖 𓀗 𓀘 𓀙 𓀚 𓀛 𓀜 𓀝</p><h3 id="Flags"><a href="#Flags" class="headerlink" title="Flags"></a>Flags</h3><p>🏳️ 🏴 🏁 🚩 🏳️‍🌈 🏳️‍⚧️ 🏴‍☠️ 🇦🇫 🇦🇽 🇦🇱 🇩🇿 🇦🇸 🇦🇩 🇦🇴 🇦🇮 🇦🇶 🇦🇬 🇦🇷 🇦🇲 🇦🇼 🇦🇺 🇦🇹 🇦🇿 🇧🇸 🇧🇭 🇧🇩 🇧🇧 🇧🇾 🇧🇪 🇧🇿 🇧🇯 🇧🇲 🇧🇹 🇧🇴 🇧🇦 🇧🇼 🇧🇷 🇮🇴 🇻🇬 🇧🇳 🇧🇬 🇧🇫 🇧🇮 🇰🇭 🇨🇲 🇨🇦 🇮🇨 🇨🇻 🇧🇶 🇰🇾 🇨🇫 🇹🇩 🇨🇱 🇨🇳 🇨🇽 🇨🇨 🇨🇴 🇰🇲 🇨🇬 🇨🇩 🇨🇰 🇨🇷 🇨🇮 🇭🇷 🇨🇺 🇨🇼 🇨🇾 🇨🇿 🇩🇰 🇩🇯 🇩🇲 🇩🇴 🇪🇨 🇪🇬 🇸🇻 🇬🇶 🇪🇷 🇪🇪 🇪🇹 🇪🇺 🇫🇰 🇫🇴 🇫🇯 🇫🇮 🇫🇷 🇬🇫 🇵🇫 🇹🇫 🇬🇦 🇬🇲 🇬🇪 🇩🇪 🇬🇭 🇬🇮 🇬🇷 🇬🇱 🇬🇩 🇬🇵 🇬🇺 🇬🇹 🇬🇬 🇬🇳 🇬🇼 🇬🇾 🇭🇹 🇭🇳 🇭🇰 🇭🇺 🇮🇸 🇮🇳 🇮🇩 🇮🇷 🇮🇶 🇮🇪 🇮🇲 🇮🇱 🇮🇹 🇯🇲 🇯🇵 🎌 🇯🇪 🇯🇴 🇰🇿 🇰🇪 🇰🇮 🇽🇰 🇰🇼 🇰🇬 🇱🇦 🇱🇻 🇱🇧 🇱🇸 🇱🇷 🇱🇾 🇱🇮 🇱🇹 🇱🇺 🇲🇴 🇲🇰 🇲🇬 🇲🇼 🇲🇾 🇲🇻 🇲🇱 🇲🇹 🇲🇭 🇲🇶 🇲🇷 🇲🇺 🇾🇹 🇲🇽 🇫🇲 🇲🇩 🇲🇨 🇲🇳 🇲🇪 🇲🇸 🇲🇦 🇲🇿 🇲🇲 🇳🇦 🇳🇷 🇳🇵 🇳🇱 🇳🇨 🇳🇿 🇳🇮 🇳🇪 🇳🇬 🇳🇺 🇳🇫 🇰🇵 🇲🇵 🇳🇴 🇴🇲 🇵🇰 🇵🇼 🇵🇸 🇵🇦 🇵🇬 🇵🇾 🇵🇪 🇵🇭 🇵🇳 🇵🇱 🇵🇹 🇵🇷 🇶🇦 🇷🇪 🇷🇴 🇷🇺 🇷🇼 🇼🇸 🇸🇲 🇸🇦 🇸🇳 🇷🇸 🇸🇨 🇸🇱 🇸🇬 🇸🇽 🇸🇰 🇸🇮 🇬🇸 🇸🇧 🇸🇴 🇿🇦 🇰🇷 🇸🇸 🇪🇸 🇱🇰 🇧🇱 🇸🇭 🇰🇳 🇱🇨 🇵🇲 🇻🇨 🇸🇩 🇸🇷 🇸🇿 🇸🇪 🇨🇭 🇸🇾 🇹🇼 🇹🇯 🇹🇿 🇹🇭 🇹🇱 🇹🇬 🇹🇰 🇹🇴 🇹🇹 🇹🇳 🇹🇷 🇹🇲 🇹🇨 🇹🇻 🇻🇮 🇺🇬 🇺🇦 🇦🇪 🇬🇧 🏴󠁧󠁢󠁥󠁮󠁧󠁿 🏴󠁧󠁢󠁳󠁣󠁴󠁿 🏴󠁧󠁢󠁷󠁬󠁳󠁿 🇺🇳 🇺🇸 🇺🇾 🇺🇿 🇻🇺 🇻🇦 🇻🇪 🇻🇳 🇼🇫 🇪🇭 🇾🇪 🇿🇲 🇿🇼</p><h3 id="New-Emojis"><a href="#New-Emojis" class="headerlink" title="New Emojis"></a>New Emojis</h3><p>🤵‍♀️ 🤵🏻‍♀️ 🤵🏼‍♀️ 🤵🏽‍♀️ 🤵🏾‍♀️ 🤵🏿‍♀️ 🤵‍♂️ 🤵🏻‍♂️ 🤵🏼‍♂️ 🤵🏽‍♂️ 🤵🏾‍♂️ 🤵🏿‍♂️ 👰‍♀️ 👰🏻‍♀️ 👰🏼‍♀️ 👰🏽‍♀️ 👰🏾‍♀️ 👰🏿‍♀️ 👰‍♂️ 👰🏻‍♂️ 👰🏼‍♂️ 👰🏽‍♂️ 👰🏾‍♂️ 👰🏿‍♂️ 👩‍🍼 👩🏻‍🍼 👩🏼‍🍼 👩🏽‍🍼 👩🏾‍🍼 👩🏿‍🍼 🧑‍🍼 🧑🏻‍🍼 🧑🏼‍🍼 🧑🏽‍🍼 🧑🏾‍🍼 🧑🏿‍🍼 👨‍🍼 👨🏻‍🍼 👨🏼‍🍼 👨🏽‍🍼 👨🏾‍🍼 👨🏿‍🍼 🧑‍🎄 🧑🏻‍🎄 🧑🏼‍🎄 🧑🏽‍🎄 🧑🏾‍🎄 🧑🏿‍🎄 🐈‍⬛ 🐻‍❄️ 🏳️‍⚧️</p><p>😮‍💨 😵‍💫 😶‍🌫️ ❤️‍🔥 ❤️‍🩹 🧔‍♀️ 🧔🏻‍♀️ 🧔🏼‍♀️ 🧔🏽‍♀️ 🧔🏾‍♀️ 🧔🏿‍♀️ 🧔‍♂️ 🧔🏻‍♂️ 🧔🏼‍♂️ 🧔🏽‍♂️ 🧔🏾‍♂️ 🧔🏿‍♂️ 💑🏻 💑🏼 💑🏽 💑🏾 💑🏿 💏🏻 💏🏼 💏🏽 💏🏾 💏🏿 👨🏻‍❤️‍👨🏻 👨🏻‍❤️‍👨🏼 👨🏻‍❤️‍👨🏽 👨🏻‍❤️‍👨🏾 👨🏻‍❤️‍👨🏿 👨🏼‍❤️‍👨🏻 👨🏼‍❤️‍👨🏼 👨🏼‍❤️‍👨🏽 👨🏼‍❤️‍👨🏾 👨🏼‍❤️‍👨🏿 👨🏽‍❤️‍👨🏻 👨🏽‍❤️‍👨🏼 👨🏽‍❤️‍👨🏽 👨🏽‍❤️‍👨🏾 👨🏽‍❤️‍👨🏿 👨🏾‍❤️‍👨🏻 👨🏾‍❤️‍👨🏼 👨🏾‍❤️‍👨🏽 👨🏾‍❤️‍👨🏾 👨🏾‍❤️‍👨🏿 👨🏿‍❤️‍👨🏻 👨🏿‍❤️‍👨🏼 👨🏿‍❤️‍👨🏽 👨🏿‍❤️‍👨🏾 👨🏿‍❤️‍👨🏿 👩🏻‍❤️‍👨🏻 👩🏻‍❤️‍👨🏼 👩🏻‍❤️‍👨🏽 👩🏻‍❤️‍👨🏾 👩🏻‍❤️‍👨🏿 👩🏻‍❤️‍👩🏻 👩🏻‍❤️‍👩🏼 👩🏻‍❤️‍👩🏽 👩🏻‍❤️‍👩🏾 👩🏻‍❤️‍👩🏿 👩🏼‍❤️‍👨🏻 👩🏼‍❤️‍👨🏼 👩🏼‍❤️‍👨🏽 👩🏼‍❤️‍👨🏾 👩🏼‍❤️‍👨🏿 👩🏼‍❤️‍👩🏻 👩🏼‍❤️‍👩🏼 👩🏼‍❤️‍👩🏽 👩🏼‍❤️‍👩🏾 👩🏼‍❤️‍👩🏿 👩🏽‍❤️‍👨🏻 👩🏽‍❤️‍👨🏼 👩🏽‍❤️‍👨🏽 👩🏽‍❤️‍👨🏾 👩🏽‍❤️‍👨🏿 👩🏽‍❤️‍👩🏻 👩🏽‍❤️‍👩🏼 👩🏽‍❤️‍👩🏽 👩🏽‍❤️‍👩🏾 👩🏽‍❤️‍👩🏿 👩🏾‍❤️‍👨🏻 👩🏾‍❤️‍👨🏼 👩🏾‍❤️‍👨🏽 👩🏾‍❤️‍👨🏾 👩🏾‍❤️‍👨🏿 👩🏾‍❤️‍👩🏻 👩🏾‍❤️‍👩🏼 👩🏾‍❤️‍👩🏽 👩🏾‍❤️‍👩🏾 👩🏾‍❤️‍👩🏿 👩🏿‍❤️‍👨🏻 👩🏿‍❤️‍👨🏼 👩🏿‍❤️‍👨🏽 👩🏿‍❤️‍👨🏾 👩🏿‍❤️‍👨🏿 👩🏿‍❤️‍👩🏻 👩🏿‍❤️‍👩🏼 👩🏿‍❤️‍👩🏽 👩🏿‍❤️‍👩🏾 👩🏿‍❤️‍👩🏿 🧑🏻‍❤️‍🧑🏼 🧑🏻‍❤️‍🧑🏽 🧑🏻‍❤️‍🧑🏾 🧑🏻‍❤️‍🧑🏿 🧑🏼‍❤️‍🧑🏻 🧑🏼‍❤️‍🧑🏽 🧑🏼‍❤️‍🧑🏾 🧑🏼‍❤️‍🧑🏿 🧑🏽‍❤️‍🧑🏻 🧑🏽‍❤️‍🧑🏼 🧑🏽‍❤️‍🧑🏾 🧑🏽‍❤️‍🧑🏿 🧑🏾‍❤️‍🧑🏻 🧑🏾‍❤️‍🧑🏼 🧑🏾‍❤️‍🧑🏽 🧑🏾‍❤️‍🧑🏿 🧑🏿‍❤️‍🧑🏻 🧑🏿‍❤️‍🧑🏼 🧑🏿‍❤️‍🧑🏽 🧑🏿‍❤️‍🧑🏾 👨🏻‍❤️‍💋‍👨🏻 👨🏻‍❤️‍💋‍👨🏼 👨🏻‍❤️‍💋‍👨🏽 👨🏻‍❤️‍💋‍👨🏾 👨🏻‍❤️‍💋‍👨🏿 👨🏼‍❤️‍💋‍👨🏻 👨🏼‍❤️‍💋‍👨🏼 👨🏼‍❤️‍💋‍👨🏽 👨🏼‍❤️‍💋‍👨🏾 👨🏼‍❤️‍💋‍👨🏿 👨🏽‍❤️‍💋‍👨🏻 👨🏽‍❤️‍💋‍👨🏼 👨🏽‍❤️‍💋‍👨🏽 👨🏽‍❤️‍💋‍👨🏾 👨🏽‍❤️‍💋‍👨🏿 👨🏾‍❤️‍💋‍👨🏻 👨🏾‍❤️‍💋‍👨🏼 👨🏾‍❤️‍💋‍👨🏽 👨🏾‍❤️‍💋‍👨🏾 👨🏾‍❤️‍💋‍👨🏿 👨🏿‍❤️‍💋‍👨🏻 👨🏿‍❤️‍💋‍👨🏼 👨🏿‍❤️‍💋‍👨🏽 👨🏿‍❤️‍💋‍👨🏾 👨🏿‍❤️‍💋‍👨🏿 👩🏻‍❤️‍💋‍👨🏻 👩🏻‍❤️‍💋‍👨🏼 👩🏻‍❤️‍💋‍👨🏽 👩🏻‍❤️‍💋‍👨🏾 👩🏻‍❤️‍💋‍👨🏿 👩🏻‍❤️‍💋‍👩🏻 👩🏻‍❤️‍💋‍👩🏼 👩🏻‍❤️‍💋‍👩🏽 👩🏻‍❤️‍💋‍👩🏾 👩🏻‍❤️‍💋‍👩🏿 👩🏼‍❤️‍💋‍👨🏻 👩🏼‍❤️‍💋‍👨🏼 👩🏼‍❤️‍💋‍👨🏽 👩🏼‍❤️‍💋‍👨🏾 👩🏼‍❤️‍💋‍👨🏿 👩🏼‍❤️‍💋‍👩🏻 👩🏼‍❤️‍💋‍👩🏼 👩🏼‍❤️‍💋‍👩🏽 👩🏼‍❤️‍💋‍👩🏾 👩🏼‍❤️‍💋‍👩🏿 👩🏽‍❤️‍💋‍👨🏻 👩🏽‍❤️‍💋‍👨🏼 👩🏽‍❤️‍💋‍👨🏽 👩🏽‍❤️‍💋‍👨🏾 👩🏽‍❤️‍💋‍👨🏿 👩🏽‍❤️‍💋‍👩🏻 👩🏽‍❤️‍💋‍👩🏼 👩🏽‍❤️‍💋‍👩🏽 👩🏽‍❤️‍💋‍👩🏾 👩🏽‍❤️‍💋‍👩🏿 👩🏾‍❤️‍💋‍👨🏻 👩🏾‍❤️‍💋‍👨🏼 👩🏾‍❤️‍💋‍👨🏽 👩🏾‍❤️‍💋‍👨🏾 👩🏾‍❤️‍💋‍👨🏿 👩🏾‍❤️‍💋‍👩🏻 👩🏾‍❤️‍💋‍👩🏼 👩🏾‍❤️‍💋‍👩🏽 👩🏾‍❤️‍💋‍👩🏾 👩🏾‍❤️‍💋‍👩🏿 👩🏿‍❤️‍💋‍👨🏻 👩🏿‍❤️‍💋‍👨🏼 👩🏿‍❤️‍💋‍👨🏽 👩🏿‍❤️‍💋‍👨🏾 👩🏿‍❤️‍💋‍👨🏿 👩🏿‍❤️‍💋‍👩🏻 👩🏿‍❤️‍💋‍👩🏼 👩🏿‍❤️‍💋‍👩🏽 👩🏿‍❤️‍💋‍👩🏾 👩🏿‍❤️‍💋‍👩🏿 🧑🏻‍❤️‍💋‍🧑🏼 🧑🏻‍❤️‍💋‍🧑🏽 🧑🏻‍❤️‍💋‍🧑🏾 🧑🏻‍❤️‍💋‍🧑🏿 🧑🏼‍❤️‍💋‍🧑🏻 🧑🏼‍❤️‍💋‍🧑🏽 🧑🏼‍❤️‍💋‍🧑🏾 🧑🏼‍❤️‍💋‍🧑🏿 🧑🏽‍❤️‍💋‍🧑🏻 🧑🏽‍❤️‍💋‍🧑🏼 🧑🏽‍❤️‍💋‍🧑🏾 🧑🏽‍❤️‍💋‍🧑🏿 🧑🏾‍❤️‍💋‍🧑🏻 🧑🏾‍❤️‍💋‍🧑🏼 🧑🏾‍❤️‍💋‍🧑🏽 🧑🏾‍❤️‍💋‍🧑🏿 🧑🏿‍❤️‍💋‍🧑🏻 🧑🏿‍❤️‍💋‍🧑🏼 🧑🏿‍❤️‍💋‍🧑🏽 🧑🏿‍❤️‍💋‍🧑🏾</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Emoji</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>koa returning &#39;Not Found&#39;</title>
    <link href="/z/posts/224cd510/"/>
    <url>/z/posts/224cd510/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><p>最近在看 koa，用 koa+mysql 搭了个简单 demo 环境后准备试一下，然后就一直返回 Not Found，把数据库相关操作注释掉之后又好了，最后发现原因是 logger 中间件里的<code>next()</code>前没加<code>return</code> 。[喷水]</p><span id="more"></span><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Koa</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa&#x27;</span>);<br><span class="hljs-keyword">const</span> route = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa-route&#x27;</span>);<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa2-cors&#x27;</span>);<br><span class="hljs-keyword">const</span> knex = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;knex&#x27;</span>);<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();<br><span class="hljs-keyword">const</span> mysql = <span class="hljs-title function_">knex</span>(&#123;<br>  <span class="hljs-attr">client</span>: <span class="hljs-string">&#x27;mysql&#x27;</span>,<br>  <span class="hljs-attr">connection</span>: &#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>    <span class="hljs-attr">database</span>: <span class="hljs-string">&#x27;test&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">debug</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">pool</span>: &#123;<br>    <span class="hljs-attr">min</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">max</span>: <span class="hljs-number">7</span><br>  &#125;,<br>  <span class="hljs-attr">acquireConnectionTimeout</span>: <span class="hljs-number">10000</span>,<br>  <span class="hljs-attr">migrations</span>: &#123;<br>    <span class="hljs-attr">tableName</span>: <span class="hljs-string">&#x27;migrations&#x27;</span><br>  &#125;<br>&#125;);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getCodeById</span> = id =&gt; mysql.<span class="hljs-title function_">select</span>().<span class="hljs-title function_">table</span>(<span class="hljs-string">&#x27;test&#x27;</span>).<span class="hljs-title function_">where</span>(<span class="hljs-string">&#x27;a_tid&#x27;</span>, id);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">logger</span> = (<span class="hljs-params">ctx, next</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleString()&#125;</span> <span class="hljs-subst">$&#123;ctx.request.method&#125;</span> <span class="hljs-subst">$&#123;ctx.request.url&#125;</span>`</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">next</span>(); <span class="hljs-comment">// **前边要加 return**</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">test</span> = <span class="hljs-keyword">async</span> ctx =&gt; &#123;<br>  <span class="hljs-keyword">let</span> res = &#123;&#125;;<br>  <span class="hljs-keyword">try</span> &#123;<br>    res.<span class="hljs-property">data</span> = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getCodeById</span>(<span class="hljs-number">1</span>);<br>    res.<span class="hljs-property">status</span> = <span class="hljs-number">1</span>;<br>    res.<span class="hljs-property">msg</span> = <span class="hljs-string">&#x27;SUCCESS&#x27;</span>;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;error: &#x27;</span>, error);<br>    res.<span class="hljs-property">data</span> = [];<br>    res.<span class="hljs-property">status</span> = <span class="hljs-number">0</span>;<br>    res.<span class="hljs-property">msg</span> = <span class="hljs-string">&#x27;FAIL&#x27;</span>;<br>  &#125;<br>  ctx.<span class="hljs-property">response</span>.<span class="hljs-property">body</span> = res;<br>&#125;;<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>());<br>app.<span class="hljs-title function_">use</span>(logger);<br>app.<span class="hljs-title function_">use</span>(route.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/test&#x27;</span>, test));<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>后来发现已经有现成的 koa-logger 了 [#允悲]wwww</p><h2 id="Answers-from-stackoverflow"><a href="#Answers-from-stackoverflow" class="headerlink" title="Answers from stackoverflow"></a>Answers from stackoverflow</h2><blockquote><p><strong>It seems that if you want to use a common function as middleware, you have to return the next function</strong>.</p></blockquote><h3 id="Why-common-function-as-middlerware-have-to-return-the-next-function"><a href="#Why-common-function-as-middlerware-have-to-return-the-next-function" class="headerlink" title="Why common function as middlerware have to return the next function"></a>Why common function as middlerware have to return the next function</h3><blockquote><p><strong>I think it’s because you have to return a promise from your middleware to work with other middlewares. The next return a promise, as you return it, you return a promise. See this issue for more discussions github.com&#x2F;koajs&#x2F;koa&#x2F;issues&#x2F;997.</strong></p></blockquote><h3 id="See-more："><a href="#See-more：" class="headerlink" title="See more："></a>See more：</h3><p><a href="https://stackoverflow.com/questions/45134394/nodejskoacant-set-headers-after-they-are-sent">nodejs(koa):Can’t set headers after they are sent</a></p><p><a href="https://stackoverflow.com/questions/43389601/koa2koa-routermysql-keep-returning-not-found#">koa2+koa-router+mysql keep returning ‘Not Found’</a></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Node.js</tag>
      
      <tag>Koa</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 Settings Sync 插件同步 VS Code 设置</title>
    <link href="/z/posts/9b0da72f/"/>
    <url>/z/posts/9b0da72f/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><p>早就听说这个插件了，今天用了一下，确实挺方便的。通过把配置文件创建为 Gist 上来实现了 VS Code 设置的同步，下次换电脑或重装时就很便利了。在插件商店搜索 Settings Sync 然后安装，重载窗口，打开命令面板，输入 sync 即可查看所有相关命令。</p><span id="more"></span><h2 id="可以同步的设置"><a href="#可以同步的设置" class="headerlink" title="可以同步的设置"></a>可以同步的设置</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">1. VSCode 配置文件<br>2. 键盘绑定文件<br>3. 启动文件<br>4. 代码片段（Snippets）<br>5. 插件<br>6. 工作区<br></code></pre></td></tr></table></figure><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">1. 上传配置：Shift + Alt + U<br>2. 下载配置 : Shift + Alt + D<br></code></pre></td></tr></table></figure><h2 id="如何从-GitHub-获取-Personal-Access-Token"><a href="#如何从-GitHub-获取-Personal-Access-Token" class="headerlink" title="如何从 GitHub 获取 Personal Access Token"></a>如何从 GitHub 获取 Personal Access Token</h2><p>这个插件需要你 GitHub 账户的 Personal Access Token. 可以很简单的按照如下步骤创建一个。确保在 scope 里添加了** Gist**.</p><p><strong>到 <a href="https://github.com/settings">Settings</a> &#x2F; <a href="https://github.com/settings/tokens">Developer settings</a> &#x2F; <a href="https://github.com/settings/tokens">Personal access tokens</a>  来生成新的 Token</strong></p><p><img src="https://shanalikhan.github.io/img/github1.PNG" alt="Goto Settings / Developer settings / Personal Access Tokens"></p><p><strong>从 Scopes 里选择 Gist.</strong></p><p><img src="https://shanalikhan.github.io/img/github2.PNG" alt="Select Scopes"></p><p><strong>得到 Access Token.</strong></p><p><img src="https://shanalikhan.github.io/img/github3.PNG" alt="Get Access Token"></p><blockquote><p>为了将来的使用，保存好这个 Token，因为只会看到一次 (i.e. 从别的机器上传配置）.</p></blockquote><h2 id="第一次上传配置"><a href="#第一次上传配置" class="headerlink" title="第一次上传配置"></a>第一次上传配置</h2><p><strong>按下 Shift + Alt + U 来填入 GitHub 账号的 access token.</strong></p><p>按下后会自动打开 GitHub 设置页，然后生成一个 token 来允许插件创建 Gist.</p><p>在窗口里输入生成的 token，接着按下回车。<br><img src="https://shanalikhan.github.io/img/upload1.png" alt="github account access token"></p><p><strong>自动上传配置文件后插件会给出这个 Gist 的 ID.</strong><br>以后需要用这个 Gist ID 来同步你的配置，所以跟 token 一样一起保存好以便在其他电脑上同步你的配置。<br><img src="https://shanalikhan.github.io/img/upload2.png" alt="uploaded automatically"></p><p>可以通过这个链接查看<strong>是否生成了 Gist</strong></p><blockquote><p><code>https://gist.github.com/&#123;你的 GitHub 用户名&#125;/&#123;Gist 的 ID&#125;</code></p></blockquote><p>Gist 打不开的话可以在 hosts 里添加 (<a href="https://github.com/googlehosts/hosts/blob/master/hosts-files/hosts">hosts 更新地址</a>)</p><blockquote><p><code>192.30.253.118 gist.github.com</code></p></blockquote><p>这里有一个上传命令全过程的 gif</p><p><img src="https://media.giphy.com/media/xT9IglKxSqs2Wdwq2c/source.gif" alt="Upload"></p><h2 id="下载你的配置"><a href="#下载你的配置" class="headerlink" title="下载你的配置"></a>下载你的配置</h2><p><strong>按下 Shift + Alt + D 然后会问你要 GitHub Gist ID.</strong></p><blockquote><p>在命令面板里输入 sync 来上传或下载</p></blockquote><p><strong>输入你的 GitHub Token.</strong></p><p>在窗口中输入你的 token 然后按下回车</p><p><img src="https://shanalikhan.github.io/img/upload1.png" alt="github account access token"></p><p><strong>输入你的 Gist ID.</strong></p><p>需要输入你的 Gist ID 来下载之前上传过的配置</p><p><img src="https://shanalikhan.github.io/img/download2.png" alt="Enter Your Gist ID"></p><p><strong>配置下载完毕。</strong></p><p>所有的配置文件都下载下来了</p><p><img src="https://shanalikhan.github.io/img/download3.png" alt="Enter Your Gist ID"></p><p>下载配置的全过程 gif</p><p><img src="https://media.giphy.com/media/xT9Iglsi3CS9noE8tW/source.gif" alt="Download"></p><h2 id="重置-Token-x2F-Gist-Settings"><a href="#重置-Token-x2F-Gist-Settings" class="headerlink" title="重置 Token &#x2F; Gist Settings"></a>重置 Token &#x2F; Gist Settings</h2><blockquote><p>在命令面板里输入 sync 然后选择 Reset Token and Gist Settings</p></blockquote><h2 id="自动下载配置"><a href="#自动下载配置" class="headerlink" title="自动下载配置"></a>自动下载配置</h2><p>自动下载 <strong>默认是关闭的</strong></p><p>打开的话要确保已经验证了 token 以及有可用的 Gist</p><p>当启动时会自动下载最新的配置文件</p><p>通过命令面板里 <strong>“Sync : Advance Options &gt; Toggle Auto-Download On Startup”</strong> 来打开或关闭</p><h2 id="配置发生变化时自动上传"><a href="#配置发生变化时自动上传" class="headerlink" title="配置发生变化时自动上传"></a>配置发生变化时自动上传</h2><p>自动上传 <strong>默认是关闭的</strong></p><p>打开的话要确保已经验证了 token 以及有可用的 Gist</p><p>当配置改变时会自动上传最新的配置文件</p><p>通过命令面板里 <strong>“Sync : Advance Options &gt; Toggle Auto-Upload on Setting Change”</strong> 来打开或关闭</p><h3 id="更多查看-原文-Readme"><a href="#更多查看-原文-Readme" class="headerlink" title="更多查看 原文 Readme"></a>更多查看 <a href="https://github.com/shanalikhan/code-settings-sync/blob/master/README.md">原文 Readme</a></h3>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VS Code</tag>
      
      <tag>Settings Sync</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue-resource 相关总结</title>
    <link href="/z/posts/b2e2ddc8/"/>
    <url>/z/posts/b2e2ddc8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在项目中要实现动态数据交互，就要用到接口请求插件 vue-resource，它不是 Vue 官方维护的插件，但是使用是最多的，它可以通过 XMLHttpRequest 或 JSONP 发起请求并处理响应。vue-resource 有非常简洁的 API，还提供了非常有用的 inteceptor（拦截器）功能，使用 inteceptor 可以在请求前和请求后附加一些行为，比如使用 inteceptor 在 ajax 请求时显示 loading 界面。下面我们就要了解一下吧。<br>项目地址：<a href="https://github.com/pagekit/vue-resource">https://github.com/pagekit/vue-resource</a></p><span id="more"></span><h2 id="vue-resource-特点"><a href="#vue-resource-特点" class="headerlink" title="vue-resource 特点"></a>vue-resource 特点</h2><p>vue-resource 插件具有以下特点：</p><ul><li><p>体积小<br>vue-resource 非常小巧，在压缩以后只有大约 12KB，服务端启用 gzip 压缩后只有 4.5KB 大小，这远比 jQuery 的体积要小得多。</p></li><li><p>支持主流的浏览器<br>和 Vue.js 一样，vue-resource 除了不支持 IE 9 以下的浏览器，其他主流的浏览器都支持。</p></li><li><p>支持 Promise API 和 URI Templates<br>Promise 是 ES6 的特性，Promise 的中文含义为“先知”，Promise 对象用于异步计算。 URI Templates 表示 URI 模板，有些类似于 ASP.NET MVC 的路由模板。</p></li><li><p>支持拦截器<br>拦截器是全局的，拦截器可以在请求发送前和发送请求后做一些处理。<br>拦截器在一些场景下会非常有用，比如请求发送前在 headers 中设置 access_token，或者在请求失败时，提供共通的处理方式。</p></li></ul><h2 id="vue-resource-基本使用方法"><a href="#vue-resource-基本使用方法" class="headerlink" title="vue-resource 基本使用方法"></a>vue-resource 基本使用方法</h2><h3 id="1-安装与引用"><a href="#1-安装与引用" class="headerlink" title="1. 安装与引用"></a>1. 安装与引用</h3><p>NPM：$ npm install vue-resource –save</p><p>&#x2F;<em>引入 Vue 框架</em>&#x2F;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br></code></pre></td></tr></table></figure><p>&#x2F;<em>引入资源请求插件</em>&#x2F;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueResource</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-resource&#x27;</span><br></code></pre></td></tr></table></figure><p>&#x2F;<em>使用 VueResource 插件</em>&#x2F;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueResource</span>)<br></code></pre></td></tr></table></figure><h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2. 语法"></a>2. 语法</h3><p>引入 vue-resource 后，可以基于全局的 Vue 对象使用 http，也可以基于某个 Vue 实例使用 http。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 基于全局 Vue 对象使用 http</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">http</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/someUrl&#x27;</span>, [options]).<span class="hljs-title function_">then</span>(successCallback, errorCallback);<br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">http</span>.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/someUrl&#x27;</span>, [body], [options]).<span class="hljs-title function_">then</span>(successCallback, errorCallback);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在一个 Vue 实例内使用$http</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$http</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/someUrl&#x27;</span>, [options]).<span class="hljs-title function_">then</span>(successCallback, errorCallback);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$http</span>.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/someUrl&#x27;</span>, [body], [options]).<span class="hljs-title function_">then</span>(successCallback, errorCallback);<br></code></pre></td></tr></table></figure><p>在发送请求后，使用 then 方法来处理响应结果，then 方法有两个参数，第一个参数是响应成功时的回调函数，第二个参数是响应失败时的回调函数。</p><p>then 方法的回调函数也有两种写法，第一种是传统的函数写法，第二种是更为简洁的 ES 6 的 Lambda 写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 传统写法</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$http</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/someUrl&#x27;</span>, [options]).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)&#123;<br>    <span class="hljs-comment">// 响应成功回调</span><br>&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)&#123;<br>    <span class="hljs-comment">// 响应错误回调</span><br>&#125;);<br><br><span class="hljs-comment">// Lambda 写法</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$http</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/someUrl&#x27;</span>, [options]).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 响应成功回调</span><br>&#125;, <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 响应错误回调</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>关于 options 对象和 response 对象的说明可以参见官方文档。</p><p>emulateHTTP 的作用<br>如果 Web 服务器无法处理 PUT, PATCH 和 DELETE 这种 REST 风格的请求，你可以启用 enulateHTTP 现象。启用该选项后，请求会以普通的 POST 方法发出，并且 HTTP 头信息的 X-HTTP-Method-Override 属性会设置为实际的 HTTP 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-property">http</span>.<span class="hljs-property">options</span>.<span class="hljs-property">emulateHTTP</span> = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><p>emulateJSON 的作用<br>如果 Web 服务器无法处理编码为 application&#x2F;json 的请求，你可以启用 emulateJSON 选项。启用该选项后，请求会以 application&#x2F;x-www-form-urlencoded 作为 MIME type，就像普通的 HTML 表单一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-property">http</span>.<span class="hljs-property">options</span>.<span class="hljs-property">emulateJSON</span> = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><p>我是用传统的函数写法，在各个组件的 Vue 实例中使用$http，然后将成功和错误回掉单独拿出来声明。在 methods 对象中写好函数逻辑处理，然后在 mounted() 函数中调用它，这样渲染这个组件的时候就会发送请求。当然，请求的地址和参数已经在 data() 函数中声明，请求方式根据具体需求来。</p><p>在使用的时候遇到一个小坑，这个$http 请求和 jquery 的 ajax 还是有点区别，这里的 post 的 data 默认不是以 form data 的形式，而是 request payload。解决起来也很简单，将 emulateJSON 属性设置为 true 即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-property">http</span>.<span class="hljs-property">options</span>.<span class="hljs-property">emulateJSON</span> = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>按照 API 说明文档，我请求回来的 response 只需要调用 json() 方法就可以返回 JSON 对象，然而返回却是 Promise 对象。看图。我不太了解 Promise，查了资料目前也没整明白，文档上面 type 是 Promise，但是描述里面又说是转化成 JSON 对象。反正最后我的代码里是转化了一下的，拿到 JSON 对象了我们就可以进行其他逻辑处理了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(response.<span class="hljs-property">body</span>);<br></code></pre></td></tr></table></figure><h3 id="4-inteceptor（拦截器）"><a href="#4-inteceptor（拦截器）" class="headerlink" title="4.inteceptor（拦截器）"></a>4.inteceptor（拦截器）</h3><p>拦截器可以在请求发送前和发送请求后做一些处理。<br>在 response 返回给 successCallback 或 errorCallback 之前，你可以修改 response 中的内容，或做一些处理。<br>例如，响应的状态码如果是 404，你可以显示友好的 404 界面。<br>比如我们就用拦截器做了登录处理，所以请求发送之前都要通过拦截器验证当前用户是否登陆，否则提示登录页面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-property">http</span>.<span class="hljs-property">interceptors</span>.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">request, next</span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 请求发送前的处理逻辑</span><br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-title function_">next</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-comment">// 请求发送后的处理逻辑</span><br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-comment">// 根据请求的状态，response 参数会返回给 successCallback 或 errorCallback</span><br>        <span class="hljs-keyword">return</span> response<br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="5-proxy（代理）"><a href="#5-proxy（代理）" class="headerlink" title="5.proxy（代理）"></a>5.proxy（代理）</h3><p>场景：在本地 serve 发送 API 接口请求，那我们得用跨域了吧，jsonp，但是我们后端说跨域不安全，接口没有实现跨域请求，就算开发时候跨域请求成功，那上线时不可能去修改所有的请求方式吧。于是就各种搜索解决方案，在打算用 Nginx 代理的时候，发现了 Vue.js 的 webpack 模板中自带了一个代理，泪奔，赶紧修改。<br>文档地址：<a href="https://vuejs-templates.github.io/webpack/proxy.html">https://vuejs-templates.github.io/webpack/proxy.html</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要分享了 vue-resource 插件的安装与使用，以及在使用的过程中遇到的一些问题及处理方法，其中我认为比较重要的点，也就是在开发过程中可能遇到的坑而且在没人告知的情况下最容易卡住的地方已经在 3. 使用和 5.proxy（代理）巨坑 中说明了，文中若有错误，请大家指出。</p><p>整个项目从基本构建到 vue-router 插件到 vue-resource 已经可以实现整个项目的架构了，Vuex 在这里不适用也不做介绍，后期有机会将新增分享。接下来我将就项目中某些具体的功能实现和一些 Vue 的使用技巧上做一些分享。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>参考文章：<a href="http://www.cnblogs.com/keepfool/p/5657065.html">http://www.cnblogs.com/keepfool/p/5657065.html</a><br>————————————————<br>原文链接：<a href="https://blog.csdn.net/u013778905/article/details/54235906">https://blog.csdn.net/u013778905/article/details/54235906</a></p>]]></content>
    
    
    <categories>
      
      <category>Repost</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AngularJs 开发的一些基本准则</title>
    <link href="/z/posts/a6cb3820/"/>
    <url>/z/posts/a6cb3820/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><p>本文将讨论 angularjs 开发的一些基本准则。</p><span id="more"></span><p>1：不要一个 page 一个 God 似无所不能的 controller 包含所有页面逻辑。</p><p>Angularjs ng-controller 旨在将业务逻辑的区分，更推荐按照业务逻辑的划分 controller，做到业务功能的高内聚，controller 的单一原则 SRP。</p><p>2：View 中包含尽量少的逻辑。<br>​就像 jsp，asp 这类服务端模板引擎一样，我们应该把尽量少的逻辑放在 view 中，因为这样会导致 view 和逻辑的紧耦合性，view 在软件开发中是最易变化的，而表现层逻辑却相对于 view 是相对稳定的行为。同时也导致的 view 中的逻辑不能被自动化测试，持续集成所覆盖，这将导致以后修改重构和模块的集成的痛苦。很明显的就是太多的 angularjs 的 ng-switch，ng-when 和页面计算表达式等等。</p><p>3：注意一些特殊的节点式的 angularjs directive，因为在 IE7 上这是不被认识的，因为 IE 的严格 XML 模式。如果你想 make ie7 happy，</p><ul><li><p>请注意导入 json2 或者 json3 的 js</p></li><li><p>xmlns:ng 命令空间和节点 element 式 directive。</p></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">&lt;html xmlns:ng=<span class="hljs-string">&quot;http://angularjs.org&quot;</span>&gt;<br><br>&lt;head&gt;<br><br>&lt;!--<span class="hljs-literal">[<span class="hljs-identifier">if</span> <span class="hljs-identifier">lte</span> IE <span class="hljs-number">8</span>]</span>&gt;<br><br>&lt;script&gt;<br><br>document.create<span class="hljs-constructor">Element(&#x27;<span class="hljs-params">ng</span>-<span class="hljs-params">include</span>&#x27;)</span>;<br><br>document.create<span class="hljs-constructor">Element(&#x27;<span class="hljs-params">ng</span>-<span class="hljs-params">pluralize</span>&#x27;)</span>;<br><br>document.create<span class="hljs-constructor">Element(&#x27;<span class="hljs-params">ng</span>-<span class="hljs-params">view</span>&#x27;)</span>;<br><br><br><br><span class="hljs-comment">// Optionally these for CSS</span><br><br>document.create<span class="hljs-constructor">Element(&#x27;<span class="hljs-params">ng</span>:<span class="hljs-params">include</span>&#x27;)</span>;<br><br>document.create<span class="hljs-constructor">Element(&#x27;<span class="hljs-params">ng</span>:<span class="hljs-params">pluralize</span>&#x27;)</span>;<br><br>document.create<span class="hljs-constructor">Element(&#x27;<span class="hljs-params">ng</span>:<span class="hljs-params">view</span>&#x27;)</span>;<br><br>&lt;/script&gt;<br><br>&lt;!<span class="hljs-literal">[<span class="hljs-identifier">endif</span>]</span>--&gt;<br><br>&lt;/head&gt;<br></code></pre></td></tr></table></figure><ul><li>除官网介绍的几个注意点之外 需要将</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ng-app</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 改为 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ng-app&quot;</span> <span class="hljs-attr">ng-app</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 另外注意 html 头部要引入（否则会进入坑爹的 quirk 模式）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4：在 controller 和 service 中绝对不能出现 html 的 DOM 和 CSS 代码。</p><p>   这会导致逻辑的混杂耦合，对于 angularjs 自身的绑定对 html 操作，很多时候你会分不清是 view 的影响源，导致修复 bug，和新增功能，重构的艰难，常常出现很多的诡异行为。最好的实践模式则是把必须的 dom，css 操作移向 angular 的 Directive，或者 view 中。在 angularjs 模式中只有 directive 和 view 才能出现 dom 和 css 的逻辑操作。</p><p> 5：controller 中公用的逻辑推向 service（factory，value，config)，采用 IOC 的注入，提高代码的重用度，修改的单一点，开闭原则。</p><p> 6：controller 应该只包含业务逻辑，对于数据模型的格式化过滤尽量交给 angular 框架 filter 等处理。</p><p>7：viewmodel 中最好建立一个通用属性比如 vm，它承载 view 渲染的最小量化 model，对于 model 的变形事件则在 vm 之外 scope 之上。这才是 MVVM 推荐方式。事件相当于 WPF 中的 command，负责模型事件的传递修改模型，从而从模型的改变通知 view 的强制更新（WPF 中 model 必须实现 INotifyPropertyChange 接口）。同时这样 vm 属性也便于数据的填充和收集回发服务端。</p><p>8：IOC 注入优先，有助于良好的设计，逻辑的可重用和单元模块的可测试性，面向对象的“开闭原则”，修改的单一点。</p><p>9：良好的分层设计，对于 view 的交互采用 controller 通过 viewmode（scope）的推送，与服务器的交互推向 service 层次，利用 angularjs 的$resource 或者$http 获取更新数据 model，以及与服务端交互。层次划分属于纵向分割，将相同功能逻辑的接口放在一起，架构层次，而 model 则从业务的逻辑横向分离。</p><p>10：服务端的服务的接口需要考虑表现层客户端的应用提供，这是一个良好的 SOA 服务设计的准则，这里不用多余的描述，具体请移步 <a href="http://www.cnblogs.com/whitewolf/category/379884.html">架构篇</a>。</p><p>11：如果你的公司应用了敏捷开发则，TDD 的开发是必备的，angularjs 本也是解决 javascript 测试驱动开发项目。</p><p> 12：scope 的纯净性，scope 上的每一个函数和属性必须为 view 所用（事件传递或者属性绑定），不用的可以作为工具函数或者 service 处置。</p><p> 13：对 controller 之间如果不是强依赖，只是弱引用则最好用事件$emit,$on,$broadcast, 是的 controller 之间低耦合（<a href="http://www.cnblogs.com/whitewolf/archive/2013/04/16/3024843.html">Angularjs Controller 间通信机制</a>）。</p><p> 14：angularjs 的的模块管理参见 <a href="http://kb.cnblogs.com/page/176541/">如何组织大型 JavaScript 应用中的代码？</a>.</p><p> 最后想说说 angularjs 也不是银弹，并不是万能的，不是所有的项目都适合应用，它适用于 CRUD 的应用系统，内置了一些默认规则（惯例优先），对于表现层频繁交互的项目不适用，对于一些特殊的项目比如 spring hdiv 的项目也不是那么友好，或者就是你希望兼容更多的 IE8 一下的版本的应用系统，同样也不实用。</p><blockquote><p>作者：<a href="http://www.cnblogs.com/whitewolf/">破 狼</a><br>出处：<a href="http://www.cnblogs.com/whitewolf/">http://www.cnblogs.com/whitewolf/</a><br>本文版权归作者，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。该文章也同时发布在我的独立博客中-<a href="http://greengerong.com/">个人独立博客</a>、<a href="http://www.cnblogs.com/whitewolf/">博客园–破狼</a> 和 <a href="http://whitewolfblog.blog.51cto.com/">51CTO–破狼</a>。<a href="http://www.cnblogs.com/whitewolf/archive/2013/03/24/2979344.html">http://www.cnblogs.com/whitewolf/archive/2013/03/24/2979344.html</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Repost</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AngularJS</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AngularJS 中 Controller 与 Service 的分层设计编码</title>
    <link href="/z/posts/41b22377/"/>
    <url>/z/posts/41b22377/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要针对 AngularJS 的初学者而编写的一篇关于如何在 AngularJS 框架下更好的编写代码的一个指南。下文将对 AngularJS 进行简称，替代为 NG。</p><span id="more"></span><h2 id="初学者的-Controller"><a href="#初学者的-Controller" class="headerlink" title="初学者的 Controller"></a>初学者的 Controller</h2><p>在接触 NG 后，如果需要通过访问远程的 API 获取一系列的数据进行显示，通常 Controller 代码会写成下面的样子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">angular.<span class="hljs-title function_">module</span>(<span class="hljs-string">&#x27;demo&#x27;</span>)<br>  .<span class="hljs-title function_">controller</span>(<span class="hljs-string">&#x27;myCtrl&#x27;</span>, [<span class="hljs-string">&#x27;$scope&#x27;</span>, <span class="hljs-string">&#x27;$http&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">$scope, $http</span>) &#123;<br>    $http.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;xxx&quot;</span>).<span class="hljs-title function_">success</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>      $scope.<span class="hljs-property">data</span> = response.<span class="hljs-property">data</span>;<br>    &#125;);<br>  &#125;]);<br></code></pre></td></tr></table></figure><p>这样的在功能上是没有问题的，但是会导致 Controller 除了负担与 View 层的$scope 变量的初始化和防范定义外，还需要额外注入 http 进行远程的数据调用。如果调用 API 的代码会大量被引用、或是 API 变更的时候，就会导致大面积地修改 Controller 代码。</p><h2 id="分离-Service"><a href="#分离-Service" class="headerlink" title="分离 Service"></a>分离 Service</h2><h3 id="Service-层和-Controller-层的分工"><a href="#Service-层和-Controller-层的分工" class="headerlink" title="Service 层和 Controller 层的分工"></a>Service 层和 Controller 层的分工</h3><p>我们将原来全部集中在 Controller 中代码拆分成两个层面：</p><ul><li>service 层：主要负责数据交互和数据处理、处理一些业务领域上的逻辑；</li><li>controller 层：主要负责初始化$scope 的变量用于传递给 view 层，并且处理一些页面交互产生的逻辑；</li></ul><h3 id="什么情况下需要编写-Service"><a href="#什么情况下需要编写-Service" class="headerlink" title="什么情况下需要编写 Service"></a>什么情况下需要编写 Service</h3><p>当一个功能涉及远程 API 调用、数据集、业务领域复杂逻辑、将会大量重复的运算方法时，就可以考虑将代码以 service 形式注入 controller 层。</p><h2 id="编写-Service"><a href="#编写-Service" class="headerlink" title="编写 Service"></a>编写 Service</h2><p>将原先的代码从 Controller 中抽离处理，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">angular.<span class="hljs-title function_">module</span>(<span class="hljs-string">&#x27;demo&#x27;</span>)<br>  .<span class="hljs-title function_">service</span>(<span class="hljs-string">&#x27;myService&#x27;</span>, [<span class="hljs-string">&#x27;$http&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">$http</span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">getData</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> $http.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;xxx&quot;</span>);<br>      &#125;<br>    &#125;<br>  &#125;]);<br></code></pre></td></tr></table></figure><p>则 Controller 的代码将会被注入 myService 用于获取相关的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">angular.<span class="hljs-title function_">module</span>(<span class="hljs-string">&#x27;demo&#x27;</span>)<br>  .<span class="hljs-title function_">controller</span>(<span class="hljs-string">&#x27;myCtrl&#x27;</span>, [<span class="hljs-string">&#x27;$scope&#x27;</span>, <span class="hljs-string">&#x27;myService&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">$scope, $http, myService</span>) &#123;<br>    myService.<span class="hljs-title function_">getData</span>().<span class="hljs-title function_">success</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>      $scope.<span class="hljs-property">data</span> = response.<span class="hljs-property">data</span>;<br>    &#125;);<br>  &#125;]);<br></code></pre></td></tr></table></figure><p>这样的代码看上去是很不错了，但是我们依旧在 Controller 层处理了通讯时的回调函数 success, 这样 controller 虽然直接依赖 http 了，但是还是间接的需要处理 http。</p><h2 id="在-Service-层处理通讯回调，将业务回调传递给-Controller-层"><a href="#在-Service-层处理通讯回调，将业务回调传递给-Controller-层" class="headerlink" title="在 Service 层处理通讯回调，将业务回调传递给 Controller 层"></a>在 Service 层处理通讯回调，将业务回调传递给 Controller 层</h2><p>这里需要引入 deffered 将 http 的通讯级的回调在 Service 层处理完后，再重新交由 controller 去处理其他的问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">angular.<span class="hljs-title function_">module</span>(<span class="hljs-string">&#x27;demo&#x27;</span>)<br>  .<span class="hljs-title function_">service</span>(<span class="hljs-string">&#x27;myService&#x27;</span>, [<span class="hljs-string">&#x27;$http&#x27;</span>, <span class="hljs-string">&#x27;$q&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">$http, $q</span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">getData</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> deferred = $q.<span class="hljs-title function_">defer</span>();<br>        <span class="hljs-keyword">var</span> promise = $http.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;xxx&quot;</span>);<br>        promise.<span class="hljs-title function_">then</span>(<br>          <span class="hljs-comment">// 通讯成功的处理</span><br>          <span class="hljs-keyword">function</span> (<span class="hljs-params">answer</span>) &#123;<br>            <span class="hljs-comment">//在这里可以对返回的数据集做一定的处理，再交由 controller 进行处理</span><br>            answer.<span class="hljs-property">status</span> = <span class="hljs-literal">true</span>;<br>            deferred.<span class="hljs-title function_">resolve</span>(answer);<br>          &#125;,<br>          <span class="hljs-comment">// 通讯失败的处理</span><br>          <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>            <span class="hljs-comment">// 可以先对失败的数据集做处理，再交由 controller 进行处理</span><br>            error.<span class="hljs-property">status</span> = <span class="hljs-literal">false</span>;<br>            deferred.<span class="hljs-title function_">reject</span>(error);<br>          &#125;);<br>        <span class="hljs-comment">//返回 promise 对象，交由 controller 继续处理成功、失败的业务回调</span><br>        <span class="hljs-keyword">return</span> deferred.<span class="hljs-property">promise</span>;<br>      &#125;<br>    &#125;<br>  &#125;]);<br></code></pre></td></tr></table></figure><p>相应的在 controller 中我们也可以进行相关事件的处理，修改代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">angular.<span class="hljs-title function_">module</span>(<span class="hljs-string">&#x27;demo&#x27;</span>)<br>  .<span class="hljs-title function_">controller</span>(<span class="hljs-string">&#x27;myCtrl&#x27;</span>, [<span class="hljs-string">&#x27;$scope&#x27;</span>, <span class="hljs-string">&#x27;myService&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">$scope, myService</span>) &#123;<br>    myService.<span class="hljs-title function_">getData</span>().<span class="hljs-title function_">then</span>(<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params">answer</span>) &#123;<br>        $scope.<span class="hljs-property">data</span> = answer;<br>      &#125;,<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>        $scope.<span class="hljs-property">error</span> = error;<br>      &#125;<br>    );<br>  &#125;]);<br></code></pre></td></tr></table></figure><p>这样 controller 和 service 的职能分离，并且 controller 完全不依赖 http 而只是依赖 service 传递的事件和数据。再编写测试代码时，其逻辑也会变得简单。并且多个 controller 可以调用一个 service 中相同的方法，而不是通过曾经那种复制的方法来解决。</p><p>分层编写代码的最终目的无非就是：</p><ol><li>增加代码的复用性；</li><li>代码责任简单，不会又做保姆又做司机，可读性强容易理解；</li><li>编写测试代码的时候容易编写；</li><li>减少对一些框架和环境插件的依赖；</li><li>修改逻辑时最小幅度的修改代码</li><li>数据层发生变更修改 Service,UI 层有变化则修改 Controller。不用担心改 controller 把 service 也一起带到沟里的情况发生。</li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>AngularJS 在许多框架的设计方面与 Java 的 Spring 非常类似，如果有一定的 Java 基础应该很能理解并写出分层的代码。</p><h2 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h2><p>作者：AkiraPan<br>链接：<a href="https://www.jianshu.com/p/1e1aaf0fd30a">https://www.jianshu.com/p/1e1aaf0fd30a</a><br>来源：简书</p>]]></content>
    
    
    <categories>
      
      <category>Repost</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AngularJS</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 样式测试</title>
    <link href="/z/posts/622167e/"/>
    <url>/z/posts/622167e/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p><strong>加粗</strong>、<em>倾斜</em>、<u>下划线</u>、<del>删除线</del>、&#x3D;&#x3D;高亮&#x3D;&#x3D;、上标^上标^、下标<del>下标</del>、<a href="%E9%93%BE%E6%8E%A5">链接</a>、[链接][链接]、<code>代码</code>、脚注<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="脚注。Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.">[1]</span></a></sup></p><span id="more"></span><p>臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。</p><p>ある日、おじいさんは山へ柴刈りに、おばあさんは川へ洗濯に出かけました。すると川の上の方から、大きな桃が流れて来ました。おばあさんは喜んでその桃を拾い上げると、家に持ち帰りました。そしておじいさんが帰ると二人で桃を切って食べようとしました。すると桃の中から小さな男の子が飛び出してきました。</p><p><strong>Lorem</strong> <u>ipsum</u> <del>dolor</del> &#x3D;&#x3D;sit amet&#x3D;&#x3D;, consectetur^sed^ adipiscing<del>sed</del> elit [do eiusmod](tempor incididunt) <code>ut labore</code> et dolore magna aliqua.</p><p><em><strong>Lorem</strong></em> <em><u>ipsum</u></em> <em><del>dolor</del></em> <em>&#x3D;&#x3D;sit amet&#x3D;&#x3D; &amp;</em> <em>consectetur^sed^ adipiscing<del>sed</del> elit [do eiusmod](tempor incididunt) <code>ut labore</code> et dolore magna aliqua.</em></p><blockquote><p><strong>加粗</strong>、<em>倾斜</em>、<u>下划线</u>、<del>删除线</del>、&#x3D;&#x3D;高亮&#x3D;&#x3D;、上标^上标^、下标<del>下标</del>、<a href="%E9%93%BE%E6%8E%A5">链接</a>、[链接][链接]、<code>代码</code>、脚注<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="脚注。Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.">[1]</span></a></sup></p><blockquote><p>臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。</p><blockquote><p>ある日、おじいさんは山へ柴刈りに、おばあさんは川へ洗濯に出かけました。</p></blockquote></blockquote><p><strong>Lorem</strong> <sub>123</sub> <u>ipsum</u> <del>dolor</del> &#x3D;&#x3D;sit amet&#x3D;&#x3D;, consectetur^sed^ adipiscing<del>sed</del> elit [do eiusmod](tempor incididunt) <code>ut labore</code> et dolore magna &amp; aliqua.</p><p><em><strong>Lorem</strong></em> <sup>456</sup> <em><u>ipsum</u></em> <em><del>dolor</del></em> <em>&#x3D;&#x3D;sit amet&#x3D;&#x3D;</em>, <em>consectetur^sed^ adipiscing<del>sed</del> elit [do eiusmod](tempor incididunt) <code>ut labore</code> et dolore magna &amp; aliqua.</em></p></blockquote><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><img src="https://i.loli.net/2021/04/17/2Q7tpYqLWledUJC.png" ><p>块元素：</p><ul><li>无序列表</li><li>充分等等<ul><li>无序列表的递进</li><li>仍然会好久哦经济<ol><li>无序列表下的有序列表</li><li>日日日动词<ol><li>有序列表下的递进</li><li>顶顶顶方法<ul><li><input disabled="" type="checkbox"> 待办事项</li><li><input checked="" disabled="" type="checkbox"> 待办事项</li></ul></li></ol></li></ol></li></ul></li></ul><blockquote><blockquote><p>臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。</p><blockquote><p>ある日、おじいさんは山へ柴刈りに、おばあさんは川へ洗濯に出かけました。</p></blockquote></blockquote><ul><li><input disabled="" type="checkbox"> 哈哈哈哈哈哈哈</li><li><input checked="" disabled="" type="checkbox"> ももたろう</li></ul><ul><li>无序列表</li><li>充分等等<ul><li>无序列表的递进</li><li>仍然会好久哦经济</li></ul><ol><li>无序列表下的有序列表</li><li>日日日动词<ol><li>有序列表下的递进<ol><li>顶顶顶方法</li></ol></li></ol></li></ol></li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>this is a html file<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;head title&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;para highlight&quot;</span>&gt;</span>highlight paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;520px&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><hr width=50%><hr width=30%><center>居中文字</center><p>其他内容：</p><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><p>** 正常显示星号 **</p><pre><code class=" mermaid">graph LRA[方形] --&gt;B(圆角)    B --&gt; C&#123;条件a&#125;    C --&gt;|a=1| D[结果1]    C --&gt;|a=2| E[结果2]    F[横向流程图]</code></pre><pre><code class=" mermaid">graph TDA[方形] --&gt; B(圆角)    B --&gt; C&#123;条件a&#125;    C --&gt; |a=1| D[结果1]    C --&gt; |a=2| E[结果2]    F[竖向流程图]</code></pre><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>脚注。Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Observer Pattern （观察者模式）</title>
    <link href="/z/posts/beda1d8f/"/>
    <url>/z/posts/beda1d8f/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><h2 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h2><blockquote><p>建立一种<strong>对象与对象之间的依赖关系，一个对象发生改变时将自动通知其他对象，其他对象将相应做出反应</strong>。在此，发生改变的对象称为<strong>观察目标</strong>，而被通知的对象称为<strong>观察者</strong>，<em>一个观察目标可以对应多个观察者</em>，而且这些观察者之间没有相互联系，<em>可以根据需要增加和删除观察者，使得系统更易于扩展</em>，这就是观察者模式的模式动机。</p></blockquote><span id="more"></span><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><blockquote><p><strong>观察者模式</strong> (Observer Pattern)：定义对象间的一种一对多依赖关系，使得<em>每当一个对象状态发生改变</em>时，其<em>相关依赖对象皆得到通知并被自动更新</em>。观察者模式又叫做<strong>发布-订阅</strong>（Publish&#x2F;Subscribe）模式、模型-视图（Model&#x2F;View）模式、源-监听器（Source&#x2F;Listener）模式或从属者（Dependents）模式。观察者模式是一种对象行为型模式。</p></blockquote><p>我们可以使用日常生活中，期刊订阅的例子来形象地解释一下上面的概念。期刊订阅包含两个主要的角色：期刊出版方和订阅者，他们之间的关系如下</p><ul><li><p>期刊出版方 - 负责期刊的出版和发行工作</p></li><li><p>订阅者 - 只需执行订阅操作，新版的期刊发布后，就会主动收到通知，如果取消订阅，以后就不会再收到通知</p></li></ul><h3 id="Def"><a href="#Def" class="headerlink" title="Def"></a>Def</h3><ul><li><p>Observer Pattern: Define a <strong>one-to-many dependency</strong> between objects so that when <strong>one object changes state, all its dependents are notified and updated automatically</strong>.</p></li><li><p>Frequency of use: <strong>high</strong> 5&#x2F;5</p></li></ul><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/05/260511332/6afca6c386f36e8d741441e1e6e49223_4676297406069797186.png" alt="ObserverPattern UML" title="ObserverPattern UML"></p><h2 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h2><ul><li><p>观察者模式描述了如何建立对象与对象之间的依赖关系，如何构造满足这种需求的系统。</p></li><li><p>这一模式中的关键对象是观察目标和观察者，一个目标可以有任意数目的与之相依赖的观察者，<strong>一旦目标的状态发生改变，所有的观察者都将得到通知。</strong></p></li><li><p>作为对这个通知的响应，每个观察者都将即时更新自己的状态，以与目标状态同步，这种交互也称为<strong>发布-订阅</strong> (publish-subscribe)。目标是通知的发布者，它发出通知时并不需要知道谁是它的观察者，可以有任意数目的观察者订阅它并接收通知。</p></li></ul><h3 id="在观察者模式中也有两个主要角色：Subject-（主题）-和-Observer-（观察者）-。它们分别对应上边例子中的期刊出版方和订阅者。"><a href="#在观察者模式中也有两个主要角色：Subject-（主题）-和-Observer-（观察者）-。它们分别对应上边例子中的期刊出版方和订阅者。" class="headerlink" title="在观察者模式中也有两个主要角色：Subject （主题） 和 Observer （观察者） 。它们分别对应上边例子中的期刊出版方和订阅者。"></a>在观察者模式中也有两个主要角色：<strong>Subject （主题）</strong> 和 <strong>Observer （观察者）</strong> 。它们分别对应上边例子中的期刊出版方和订阅者。</h3><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/05/260511332/ac36f8db78687f44dc288b34d2eb04b1_144564271825817954.png" alt="relationship"></p><h2 id="模式优缺点"><a href="#模式优缺点" class="headerlink" title="模式优缺点"></a>模式优缺点</h2><h3 id="观察者模式的优点"><a href="#观察者模式的优点" class="headerlink" title="观察者模式的优点"></a>观察者模式的优点</h3><ul><li><p>观察者模式可以<strong>实现表示层和数据逻辑层的分离</strong>，并定义了稳定的消息更新传递机制，抽象了更新接口，使得可以有各种各样不同的表示层作为具体观察者角色。</p></li><li><p>观察者模式在观察目标和观察者之间<strong>建立一个抽象的耦合</strong>。</p></li><li><p>观察者模式支持广播通信。</p></li><li><p>观察者模式符合“开闭原则”的要求。</p></li></ul><h3 id="观察者模式的缺点"><a href="#观察者模式的缺点" class="headerlink" title="观察者模式的缺点"></a>观察者模式的缺点</h3><ul><li><p>如果一个观察目标对象有很多直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。</p></li><li><p>如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。</p></li><li><p>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</p></li></ul><h2 id="模式应用-FE"><a href="#模式应用-FE" class="headerlink" title="模式应用 (FE)"></a>模式应用 (FE)</h2><p>在前端领域，观察者模式被广泛地使用。最常见的例子就是为 DOM 对象添加事件监听，具体示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>确认<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">clickHandler</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;用户已点击确认按钮！&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, clickHandler);<br></code></pre></td></tr></table></figure><p>上面代码中，我们通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener">addEventListener</a> API 监听 button 对象上的点击事件，当用户点击按钮时，会自动执行我们的 <code>clickHandler</code> 函数。</p><h2 id="模式例子"><a href="#模式例子" class="headerlink" title="模式例子"></a>模式例子</h2><p>e.g 1</p><h3 id="Subject-类定义："><a href="#Subject-类定义：" class="headerlink" title="Subject 类定义："></a>Subject 类定义：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">observerCollection</span> = [];<br>    &#125;<br><br>    <span class="hljs-title function_">registerObserver</span>(<span class="hljs-params">observer</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">observerCollection</span>.<span class="hljs-title function_">push</span>(observer);<br>    &#125;<br><br>    <span class="hljs-title function_">unregisterObserver</span>(<span class="hljs-params">observer</span>) &#123;<br>        <span class="hljs-keyword">let</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-property">observerCollection</span>.<span class="hljs-title function_">indexOf</span>(observer);<br>        <span class="hljs-keyword">if</span>(index &gt;= <span class="hljs-number">0</span>) <span class="hljs-variable language_">this</span>.<span class="hljs-property">observerCollection</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-title function_">notifyObservers</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">observerCollection</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">observer</span>)=&gt;</span>observer.<span class="hljs-title function_">notify</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Observer-类定义："><a href="#Observer-类定义：" class="headerlink" title="Observer 类定义："></a>Observer 类定义：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-title function_">notify</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> has been notified.`</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> subject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subject</span>(); <span class="hljs-comment">// 创建主题对象</span><br><br><span class="hljs-keyword">let</span> observer1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>(<span class="hljs-string">&#x27;semlinker&#x27;</span>); <span class="hljs-comment">// 创建观察者 A - &#x27;semlinker&#x27;</span><br><span class="hljs-keyword">let</span> observer2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>(<span class="hljs-string">&#x27;lolo&#x27;</span>); <span class="hljs-comment">// 创建观察者 B - &#x27;lolo&#x27;</span><br><br>subject.<span class="hljs-title function_">registerObserver</span>(observer1); <span class="hljs-comment">// 注册观察者 A</span><br>subject.<span class="hljs-title function_">registerObserver</span>(observer2); <span class="hljs-comment">// 注册观察者 B</span><br><br>subject.<span class="hljs-title function_">notifyObservers</span>(); <span class="hljs-comment">// 通知观察者</span><br><br>subject.<span class="hljs-title function_">unregisterObserver</span>(observer1); <span class="hljs-comment">// 移除观察者 A</span><br><br>subject.<span class="hljs-title function_">notifyObservers</span>(); <span class="hljs-comment">// 验证是否成功移除</span><br></code></pre></td></tr></table></figure><h3 id="以上代码成功运行后控制台的输出结果："><a href="#以上代码成功运行后控制台的输出结果：" class="headerlink" title="以上代码成功运行后控制台的输出结果："></a>以上代码成功运行后控制台的输出结果：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">semlinker has been notified. <span class="hljs-comment"># 输出一次</span><br>lolo has been notified. <span class="hljs-comment"># 输出两次</span><br>lolo has been notified.<br></code></pre></td></tr></table></figure><p>e.g 2</p><h3 id="猫、狗与老鼠"><a href="#猫、狗与老鼠" class="headerlink" title="猫、狗与老鼠"></a>猫、狗与老鼠</h3><blockquote><p>假设猫是老鼠和狗的观察目标，老鼠和狗是观察者，猫叫老鼠跑，狗也跟着叫，使用观察者模式描述该过程。</p></blockquote><ul><li>UML</li></ul><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/05/260511332/0a2730de86ac8ac646f54908f85b0677_6930268922353687629.png" alt="Cat"></p><h4 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySubject</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-attr">observerCollection</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">any</span>&gt;;<span class="hljs-comment">//存放觀察者</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">observerCollection</span> = [];<br>    &#125;<br>    <span class="hljs-comment">//注册方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">attach</span>(<span class="hljs-attr">observer</span>: <span class="hljs-title class_">MyObserver</span>): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">observerCollection</span>.<span class="hljs-title function_">push</span>(observer);<br>    &#125;<br>    <span class="hljs-comment">//注销方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">detach</span>(<span class="hljs-attr">observer</span>: <span class="hljs-title class_">MyObserver</span>): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-keyword">let</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-property">observerCollection</span>.<span class="hljs-title function_">indexOf</span>(observer);<br>        <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span>) <span class="hljs-variable language_">this</span>.<span class="hljs-property">observerCollection</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-title function_">cry</span>(): <span class="hljs-built_in">void</span>;<span class="hljs-comment">//抽象通知方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyObserver</span> &#123;<br>    <span class="hljs-title function_">response</span>(): <span class="hljs-built_in">void</span>; <span class="hljs-comment">//抽象响应方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Cat"><a href="#Cat" class="headerlink" title="Cat"></a>Cat</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">MySubject</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">cry</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;------&quot;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;猫叫！&quot;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;------&quot;</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">observerCollection</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">obs: MyObserver</span>) =&gt;</span> obs.<span class="hljs-title function_">response</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Dog"><a href="#Dog" class="headerlink" title="Dog"></a>Dog</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyObserver</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">response</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;狗跟着叫！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Mouse"><a href="#Mouse" class="headerlink" title="Mouse"></a>Mouse</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mouse</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyObserver</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">response</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`老鼠<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>努力逃跑！`</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Pig"><a href="#Pig" class="headerlink" title="Pig"></a>Pig</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyObserver</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">response</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;猪没有反应！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="client"><a href="#client" class="headerlink" title="client"></a>client</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> cat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br><br><span class="hljs-keyword">let</span> mouse1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mouse</span>(<span class="hljs-string">&#x27;m1&#x27;</span>);<br><span class="hljs-keyword">let</span> mouse2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mouse</span>(<span class="hljs-string">&#x27;m2&#x27;</span>);<br><span class="hljs-keyword">let</span> dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br><br>cat.<span class="hljs-title function_">attach</span>(mouse1);<br>cat.<span class="hljs-title function_">attach</span>(mouse2);<br>cat.<span class="hljs-title function_">attach</span>(dog);<br><br><span class="hljs-keyword">let</span> pig = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pig</span>();<br>cat.<span class="hljs-title function_">attach</span>(pig);<br><br>cat.<span class="hljs-title function_">cry</span>();<br><br>cat.<span class="hljs-title function_">detach</span>(mouse2);<br>cat.<span class="hljs-title function_">cry</span>();<br></code></pre></td></tr></table></figure><h4 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">------<br>猫叫！<br>------<br>老鼠 m1 努力逃跑！<br>老鼠 m2 努力逃跑！<br>狗跟着叫！<br>猪没有反应！<br>------<br>猫叫！<br>------<br>老鼠 m1 努力逃跑！<br>狗跟着叫！<br>猪没有反应！<br></code></pre></td></tr></table></figure><h2 id="Observable-RxJS"><a href="#Observable-RxJS" class="headerlink" title="Observable(RxJS)"></a><strong>Observable(RxJS)</strong></h2><p>RxJS 是基于观察者模式和迭代器模式以函数式编程思维来实现的。RxJS 中含有两个基本概念：Observables 与 Observer。Observables 作为被观察者，是一个值或事件的流集合；而 Observer 则作为观察者，根据 Observables 进行处理。</p><p>Observables 与 Observer 之间的订阅发布关系（观察者模式） 如下：</p><ul><li><p><strong>订阅</strong> ：Observer 通过 Observable 提供的 subscribe() 方法订阅 Observable。</p></li><li><p><strong>发布</strong> ：Observable 通过回调 next 方法向 Observer 发布事件。</p></li></ul><h3 id="Observer-（观察者）-是一个包含三个方法的对象，每当-Observable-触发事件时，便会自动调用观察者的对应方法。"><a href="#Observer-（观察者）-是一个包含三个方法的对象，每当-Observable-触发事件时，便会自动调用观察者的对应方法。" class="headerlink" title="Observer （观察者） 是一个包含三个方法的对象，每当 Observable 触发事件时，便会自动调用观察者的对应方法。"></a>Observer （观察者） 是一个包含三个方法的对象，每当 Observable 触发事件时，便会自动调用观察者的对应方法。</h3><p><a href="http://reactivex.io/rxjs/class/es6/MiscJSDoc.js~ObserverDoc.html">Observer 接口定义</a>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Observer</span>&lt;T&gt; &#123;<br>  closed?: <span class="hljs-built_in">boolean</span>; <span class="hljs-comment">// 标识是否已经取消对 Observable 对象的订阅</span><br>  <span class="hljs-attr">next</span>: <span class="hljs-function">(<span class="hljs-params">value: T</span>) =&gt;</span> <span class="hljs-built_in">void</span>;<br>  <span class="hljs-attr">error</span>: <span class="hljs-function">(<span class="hljs-params">err: <span class="hljs-built_in">any</span></span>) =&gt;</span> <span class="hljs-built_in">void</span>;<br>  <span class="hljs-attr">complete</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Observer 中的三个方法的作用：</p><ul><li><p>next - 每当 Observable 发送新值的时候，next 方法会被调用</p></li><li><p>error - 当 Observable 内发生错误时，error 方法就会被调用</p></li><li><p>complete - 当 Observable 数据终止后，complete 方法会被调用。在调用 complete 方法之后，next 方法就不会再次被调用</p></li></ul><blockquote><p><strong>complete 方法执行后，next 就会失效，所以不会输出 not work。</strong></p></blockquote><p>另外观察者可以不用同时包含 next、complete、error 三种方法，它可以只包含一个 next 方法。</p><p>可以在调用 Observable 对象的 subscribe 方法时，依次传入 next、error、complete 三个函数，来创建观察者：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">observable.<span class="hljs-title function_">subscribe</span>(<br>    <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value); &#125;,<br>    <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Error: &#x27;</span>, error); &#125;,<br>    <span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;complete&#x27;</span>); &#125;<br>);<br></code></pre></td></tr></table></figure><p>Angular 中接收 URL 查询参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ComComponent</span> implements <span class="hljs-title class_">OnInit</span>, <span class="hljs-title class_">OnDestroy</span> &#123;<br><br>  private sub : <span class="hljs-title class_">Subscription</span>;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    private activatedRoute: ActivatedRoute,</span><br><span class="hljs-params">  </span>) &#123; &#125;<br><br>  <span class="hljs-title function_">ngOnInit</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//监听变化</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sub</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">activatedRoute</span>.<span class="hljs-property">queryParamMap</span><br>        .<span class="hljs-title function_">subscribe</span>(<span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;url&#x27;</span>))<br>        &#125;)<br>    <span class="hljs-comment">//只用一次的话用快照</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">route</span>.<span class="hljs-property">snapshot</span>.<span class="hljs-property">queryParamMap</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;url&#x27;</span>));<br>  &#125;<br>  <span class="hljs-title function_">ngOnDestroy</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sub</span>.<span class="hljs-title function_">unsubscribe</span>();<br>    <span class="hljs-comment">//销毁之后要取消订阅防止内存泄露</span><br>    <span class="hljs-comment">//不过 ActivatedRoute 可以不需要 unsubscribe，ng 会智能处理</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="推数据与拉数据"><a href="#推数据与拉数据" class="headerlink" title="推数据与拉数据"></a><strong>推数据与拉数据</strong></h2><p>Pull 和 Push 是数据生产者和数据的消费者两种不同的交流方式。</p><p><strong>什么是 Pull?</strong></p><p>在 “拉” 体系中，数据的消费者决定何时从数据生产者那里获取数据，而生产者自身并不会意识到什么时候数据将会被发送给消费者。</p><p>每一个 JavaScript 函数都是一个 “拉” 体系，函数是数据的生产者，调用函数的代码通过 ‘’拉出” 一个单一的返回值来消费该数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">a, b</span>) =&gt; a + b;<br><span class="hljs-keyword">let</span> sum = <span class="hljs-title function_">add</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><p>ES6 介绍了 <a href="http://es6.ruanyifeng.com/#docs/iterator">iterator 迭代器</a> 和 <a href="http://es6.ruanyifeng.com/#docs/generator">Generator</a> 生成器 — 另一种 “拉” 体系，调用 iterator.next() 的代码是消费者，可从中拉取多个值。</p><p><strong>什么是 Push?</strong></p><p>在 “推” 体系中，数据的生产者决定何时发送数据给消费者，消费者不会在接收数据之前意识到它将要接收这个数据。</p><p><a href="http://es6.ruanyifeng.com/#docs/promise">Promise（承诺）</a> 是当今 JS 中最常见的 “推” 体系，一个 Promise （数据的生产者）发送一个 resolved value （成功状态的值）来执行一个回调（数据消费者），但是不同于函数的地方的是：Promise 决定着何时数据才被推送至这个回调函数。</p><p>RxJS 引入了 Observables （可观察对象），一个全新的 “推” 体系。一个可观察对象是一个产生多值的生产者，当产生新数据的时候，会主动 “推送给” Observer （观察者）。</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><ul><li>返回单个值</li><li>不可取消的</li></ul><h3 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h3><ul><li>随着时间的推移发出多个值</li><li>可以取消的</li><li>支持 map、filter、reduce 等操作符</li><li>延迟执行，当订阅的时候才会开始执行</li></ul><p><img src="https://upload-bbs.mihoyo.com/upload/2022/04/05/260511332/453964c7c356cd70a02c3c860bce5051_4555920067121677757.jpg" alt="PullPush"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://blog.csdn.net/lovelion/article/details/7862349">Observer Pattern 课件 - 刘伟 (CSU)</a></p><p><a href="https://segmentfault.com/a/1190000008809168">Observable 详解</a></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Design Pattern</tag>
      
      <tag>Observer Pattern</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/z/posts/4a17b156/"/>
    <url>/z/posts/4a17b156/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://lib.baomitu.com/aplayer/latest/APlayer.min.css"><script src="https://lib.baomitu.com/aplayer/latest/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://code.bdstatic.com/npm/meting@1.2.0/dist/Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
